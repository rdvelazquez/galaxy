{"version":3,"sources":["viz/trackster/util.js"],"names":["commatize","number","rgx","test","replace","is_deferred","d","ServerStateDeferred","Backbone","Model","extend","defaults","ajax_settings","interval","success_fn","result","go","deferred","$","Deferred","self","get","_go","ajax","success","resolve","setTimeout","get_random_color","colors","i","length","parseInt","slice","brightness","r","g","b","difference","r1","g1","b1","r2","g2","b2","Math","max","min","new_color","nr","ng","nb","other_color","or","og","ob","n_brightness","o_brightness","diff","ok","num_tries","round","random","abs","toString","substr"],"mappings":"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","file":"../../../scripts/viz/trackster/util.js","sourcesContent":["/**\n * Stringifies a number adding commas for digit grouping as per North America.\n */\nfunction commatize(number) {\n    number += \"\"; // Convert to string\n    var rgx = /(\\d+)(\\d{3})/;\n    while (rgx.test(number)) {\n        number = number.replace(rgx, \"$1\" + \",\" + \"$2\");\n    }\n    return number;\n}\n\n/**\n * Helper to determine if object is jQuery deferred.\n */\nvar is_deferred = d => \"promise\" in d;\n\n/**\n * Implementation of a server-state based deferred. Server is repeatedly polled, and when\n * condition is met, deferred is resolved.\n */\nvar ServerStateDeferred = Backbone.Model.extend({\n    defaults: {\n        ajax_settings: {},\n        interval: 1000,\n        success_fn: function(result) {\n            return true;\n        }\n    },\n\n    /**\n     * Returns a deferred that resolves when success function returns true.\n     */\n    go: function() {\n        var deferred = $.Deferred();\n        var self = this;\n        var ajax_settings = self.get(\"ajax_settings\");\n        var success_fn = self.get(\"success_fn\");\n        var interval = self.get(\"interval\");\n\n        var _go = () => {\n            $.ajax(ajax_settings).success(result => {\n                if (success_fn(result)) {\n                    // Result is good, so resolve.\n                    deferred.resolve(result);\n                } else {\n                    // Result not good, try again.\n                    setTimeout(_go, interval);\n                }\n            });\n        };\n\n        _go();\n        return deferred;\n    }\n});\n\n/**\n * Returns a random color in hexadecimal format that is sufficiently different from a single color\n * or set of colors.\n * @param colors a color or list of colors in the format '#RRGGBB'\n */\nvar get_random_color = colors => {\n    // Default for colors is white.\n    if (!colors) {\n        colors = \"#ffffff\";\n    }\n\n    // If needed, create list of colors.\n    if (typeof colors === \"string\") {\n        colors = [colors];\n    }\n\n    // Convert colors to numbers.\n    for (var i = 0; i < colors.length; i++) {\n        colors[i] = parseInt(colors[i].slice(1), 16);\n    }\n\n    // -- Perceived brightness and difference formulas are from\n    // -- http://www.w3.org/WAI/ER/WD-AERT/#color-contrast\n\n    // Compute perceived color brightness (based on RGB-YIQ transformation):\n    var brightness = (r, g, b) => (r * 299 + g * 587 + b * 114) / 1000;\n\n    // Compute color difference:\n    var difference = (r1, g1, b1, r2, g2, b2) =>\n        Math.max(r1, r2) -\n        Math.min(r1, r2) +\n        (Math.max(g1, g2) - Math.min(g1, g2)) +\n        (Math.max(b1, b2) - Math.min(b1, b2));\n\n    // Create new random color.\n    var new_color;\n\n    var nr;\n    var ng;\n    var nb;\n    var other_color;\n    var or;\n    var og;\n    var ob;\n    var n_brightness;\n    var o_brightness;\n    var diff;\n    var ok = false;\n    var num_tries = 0;\n    do {\n        // New color is never white b/c random in [0,1)\n        new_color = Math.round(Math.random() * 0xffffff);\n        nr = (new_color & 0xff0000) >> 16;\n        ng = (new_color & 0x00ff00) >> 8;\n        nb = new_color & 0x0000ff;\n        n_brightness = brightness(nr, ng, nb);\n        ok = true;\n        for (i = 0; i < colors.length; i++) {\n            other_color = colors[i];\n            or = (other_color & 0xff0000) >> 16;\n            og = (other_color & 0x00ff00) >> 8;\n            ob = other_color & 0x0000ff;\n            o_brightness = brightness(or, og, ob);\n            diff = difference(nr, ng, nb, or, og, ob);\n            // These thresholds may need to be adjusted. Brightness difference range is 125;\n            // color difference range is 500.\n            if (Math.abs(n_brightness - o_brightness) < 40 || diff < 200) {\n                ok = false;\n                break;\n            }\n        }\n\n        num_tries++;\n    } while (!ok && num_tries <= 10);\n\n    // Add 0x1000000 to left pad number with 0s.\n    return `#${(0x1000000 + new_color).toString(16).substr(1, 6)}`;\n};\n\nexport default {\n    commatize: commatize,\n    is_deferred: is_deferred,\n    ServerStateDeferred: ServerStateDeferred,\n    get_random_color: get_random_color\n};\n"]}