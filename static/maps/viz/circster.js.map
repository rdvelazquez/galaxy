{"version":3,"sources":["viz/circster.js"],"names":["_","d3","SVGUtils","Backbone","Model","extend","is_visible","svg_elt","svg","eltBRect","getBoundingClientRect","svgBRect","$","right","left","bottom","top","UsesTicks","drawTicks","parent_elt","data","dataHandler","textTransform","horizontal","ticks","append","selectAll","enter","attr","d","angle","Math","PI","radius","tick_coords","text_coords","text_anchor","style","text","label","formatNum","num","sigDigits","undefined","rval","abs","toPrecision","roundedNum","round","toFixed","CircsterLabelTrack","CircsterView","View","className","initialize","options","genome","label_arc_height","scale","circular_views","chords_views","model","get","on","add_track","remove_track","vis_config","update_track_bounds","get_circular_tracks","filter","track","get_chord_tracks","get_tracks_bounds","circular_tracks","dataset_arc_height","get_value","track_gap","min_dimension","min","$el","width","height","radius_start","length","tracks_start_radii","range","map","render","self","chords_tracks","total_gap","tracks_bounds","select","call","behavior","zoom","translate","zoom_drag_timeout","clearTimeout","setTimeout","index","view","CircsterBigWigTrackView","el","radius_bounds","CircsterChromInteractionsTrackView","outermost_radius","track_bounds","label_track_view","CircsterChromLabelTrackView","new_track","innermost_radius_bounds","new_view","push","new_track_bounds","each","track_view","i","update_radius_bounds","track_index","tracks","splice","remove","CircsterTrackView","tagName","bg_stroke","loading_bg_fill","bg_fill","chroms_layout","_chroms_layout","data_bounds","get_fill_color","color","track_parent_elt","genome_arcs","arc_gen","arc","innerRadius","outerRadius","chroms_elts","chroms_paths","chrom","data_manager","data_ready_deferred","data_is_ready","when","then","_render_data","render_labels","new_d","transition","duration","_transition_chrom_data","_transition_labels","update_scale","new_scale","old_scale","utils","path_elt","chrom_region","get_chrom_region","data_deferred","can_get_more_detailed_data","get_more_detailed_data","_update_data_bounds","chrom_arc","find","layout","_render_chrom_data","chrom_arcs","chrom_data_paths","num_paths","get_genome_wide_data","path_data","reject","genome_wide_data","chrom_data","path_fn","_get_path_function","p_data","path","new_bounds","get_data_bounds","rendered_deferred","Deferred","set_value","silent","layout_and_data","zip","chrom_info","resolve","chroms_info","get_chroms_info","pie_layout","pie","value","len","sort","init_arcs","gap_per_chrom","new_endAngle","endAngle","startAngle","prototype","min_arc_len","chromArcTicks","k","v","visibleChroms","c","CircsterQuantitativeTrackView","track_config","_update_min_max","_quantile","numbers","quantile","ascending","parent","datum","linear","domain","clamp","line","radial","interpolate","area","_data_bounds_ticks_fn","classed","tick","click","ConfigSettingCollectionView","collection","render_in_modal","labeledChroms","new_data","flatten","values","p","parseInt","max","chord_data","cur_chrom","chrom_chord_data","source_angle","_get_region_angle","target_angle","source","target","concat","chord","position","chrom_angle_data","chrom_layout","Circster","cssLoadFile","Genome","window","galaxy_config","app","vis","GenomeVisualization","viz_config","add","key","type","hidden","viz_view","title","dbkey","menu","create_icon_buttons_menu","icon_class","on_click","select_datasets","add_tracks","Galaxy","modal","show","body","ajax","url","root","dataType","id","vis_json","JSON","stringify","success","hide","set","vis_info","vis_id","error","buttons","Cancel","location","tooltip_config","placement","tooltip","GalaxyApp"],"mappings":"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","file":"../../scripts/viz/circster.js","sourcesContent":["import _l from \"utils/localization\";\nimport * as _ from \"libs/underscore\";\nimport * as d3 from \"d3\";\nimport { event as currentEvent } from \"d3\";\nimport visualization from \"viz/visualization\";\nimport mod_utils from \"utils/utils\";\nimport config from \"utils/config\";\nimport mod_icon_btn from \"mvc/ui/icon-button\";\nimport \"libs/farbtastic\";\n/**\n * Utility class for working with SVG.\n */\n\nvar SVGUtils = Backbone.Model.extend({\n    /**\n     * Returns true if element is visible.\n     */\n    is_visible: function(svg_elt, svg) {\n        var eltBRect = svg_elt.getBoundingClientRect();\n        var svgBRect = $(\"svg\")[0].getBoundingClientRect();\n\n        if (\n            // To the left of screen?\n            eltBRect.right < 0 ||\n            // To the right of screen?\n            eltBRect.left > svgBRect.right ||\n            // Above screen?\n            eltBRect.bottom < 0 ||\n            // Below screen?\n            eltBRect.top > svgBRect.bottom\n        ) {\n            return false;\n        }\n        return true;\n    }\n});\n\n/**\n * Mixin for using ticks.\n */\nvar UsesTicks = {\n    drawTicks: function(parent_elt, data, dataHandler, textTransform, horizontal) {\n        // Set up group elements for chroms and for each tick.\n        var ticks = parent_elt\n            .append(\"g\")\n            .selectAll(\"g\")\n            .data(data)\n            .enter()\n            .append(\"g\")\n            .selectAll(\"g\")\n            .data(dataHandler)\n            .enter()\n            .append(\"g\")\n            .attr(\"class\", \"tick\")\n            .attr(\"transform\", d => `rotate(${d.angle * 180 / Math.PI - 90})translate(${d.radius},0)`);\n\n        // Add line + text for ticks.\n        var tick_coords = [];\n\n        var text_coords = [];\n\n        var text_anchor = d => (d.angle > Math.PI ? \"end\" : null);\n\n        if (horizontal) {\n            tick_coords = [0, 0, 0, -4];\n            text_coords = [4, 0, \"\", \".35em\"];\n            text_anchor = null;\n        } else {\n            tick_coords = [1, 0, 4, 0];\n            text_coords = [0, 4, \".35em\", \"\"];\n        }\n\n        ticks\n            .append(\"line\")\n            .attr(\"x1\", tick_coords[0])\n            .attr(\"y1\", tick_coords[1])\n            .attr(\"x2\", tick_coords[2])\n            .attr(\"y1\", tick_coords[3])\n            .style(\"stroke\", \"#000\");\n\n        return ticks\n            .append(\"text\")\n            .attr(\"x\", text_coords[0])\n            .attr(\"y\", text_coords[1])\n            .attr(\"dx\", text_coords[2])\n            .attr(\"dy\", text_coords[3])\n            .attr(\"text-anchor\", text_anchor)\n            .attr(\"transform\", textTransform)\n            .text(d => d.label);\n    },\n\n    /**\n     * Format number for display at a tick.\n     */\n    formatNum: function(num, sigDigits) {\n        // Use default of 2 sig. digits.\n        if (sigDigits === undefined) sigDigits = 2;\n\n        // Verify input number\n        if (num === null) return null;\n\n        // Calculate return value\n        var rval = null;\n        if (Math.abs(num) < 1) {\n            rval = num.toPrecision(sigDigits);\n        } else {\n            // Use round to turn string from toPrecision() back into a number.\n            var roundedNum = Math.round(num.toPrecision(sigDigits));\n\n            // Use abbreviations.\n            num = Math.abs(num);\n            if (num < 1000) {\n                rval = roundedNum;\n            } else if (num < 1000000) {\n                // Use K.\n                rval = `${Math.round((roundedNum / 1000).toPrecision(3)).toFixed(0)}K`;\n            } else if (num < 1000000000) {\n                // Use M.\n                rval = `${Math.round((roundedNum / 1000000).toPrecision(3)).toFixed(0)}M`;\n            }\n        }\n\n        return rval;\n    }\n};\n\n/**\n * A label track.\n */\nvar CircsterLabelTrack = Backbone.Model.extend({});\n\n/**\n * Renders a full circster visualization.\n */\nvar CircsterView = Backbone.View.extend({\n    className: \"circster\",\n\n    initialize: function(options) {\n        this.genome = options.genome;\n        this.label_arc_height = 50;\n        this.scale = 1;\n        this.circular_views = null;\n        this.chords_views = null;\n\n        // When tracks added to/removed from model, update view.\n        this.model.get(\"drawables\").on(\"add\", this.add_track, this);\n        this.model.get(\"drawables\").on(\"remove\", this.remove_track, this);\n\n        // When config settings change, update view.\n        var vis_config = this.model.get(\"config\");\n        vis_config.get(\"arc_dataset_height\").on(\"change:value\", this.update_track_bounds, this);\n        vis_config.get(\"track_gap\").on(\"change:value\", this.update_track_bounds, this);\n    },\n\n    // HACKs: using track_type for circular/chord distinction in the functions below for now.\n\n    /**\n     * Returns tracks to be rendered using circular view.\n     */\n    get_circular_tracks: function() {\n        return this.model.get(\"drawables\").filter(track => track.get(\"track_type\") !== \"DiagonalHeatmapTrack\");\n    },\n\n    /**\n     * Returns tracks to be rendered using chords view.\n     */\n    get_chord_tracks: function() {\n        return this.model.get(\"drawables\").filter(track => track.get(\"track_type\") === \"DiagonalHeatmapTrack\");\n    },\n\n    /**\n     * Returns a list of circular tracks' radius bounds.\n     */\n    get_tracks_bounds: function() {\n        var circular_tracks = this.get_circular_tracks();\n\n        var dataset_arc_height = this.model.get(\"config\").get_value(\"arc_dataset_height\");\n\n        var track_gap = this.model.get(\"config\").get_value(\"track_gap\");\n\n        var // Subtract 20 to make sure chrom labels are on screen.\n        min_dimension = Math.min(this.$el.width(), this.$el.height()) - 20;\n\n        var // Compute radius start based on model, will be centered\n        // and fit entirely inside element by default.\n        radius_start =\n            min_dimension / 2 -\n            circular_tracks.length * (dataset_arc_height + track_gap) +\n            // Add track_gap back in because no gap is needed for last track.\n            track_gap -\n            this.label_arc_height;\n\n        var // Compute range of track starting radii.\n        tracks_start_radii = d3.range(radius_start, min_dimension / 2, dataset_arc_height + track_gap);\n\n        // Map from track start to bounds.\n        return _.map(tracks_start_radii, radius => [radius, radius + dataset_arc_height]);\n    },\n\n    /**\n     * Renders circular tracks, chord tracks, and label tracks.\n     */\n    render: function() {\n        var self = this;\n        var width = self.$el.width();\n        var height = self.$el.height();\n        var circular_tracks = this.get_circular_tracks();\n        var chords_tracks = this.get_chord_tracks();\n        var total_gap = self.model.get(\"config\").get_value(\"total_gap\");\n        var tracks_bounds = this.get_tracks_bounds();\n\n        var // Set up SVG element.\n        svg = d3\n            .select(self.$el[0])\n            .append(\"svg\")\n            .attr(\"width\", width)\n            .attr(\"height\", height)\n            .attr(\"pointer-events\", \"all\")\n            // Set up zooming, dragging.\n            .append(\"svg:g\")\n            .call(\n                d3.behavior.zoom().on(\"zoom\", () => {\n                    // Do zoom, drag.\n                    var scale = currentEvent.scale;\n                    svg.attr(\"transform\", `translate(${currentEvent.translate}) scale(${scale})`);\n\n                    // Propagate scale changes to views.\n                    if (self.scale !== scale) {\n                        // Use timeout to wait for zooming/dragging to stop before rendering more detail.\n                        if (self.zoom_drag_timeout) {\n                            clearTimeout(self.zoom_drag_timeout);\n                        }\n                        self.zoom_drag_timeout = setTimeout(() => {\n                            // Render more detail in tracks' visible elements.\n                            // FIXME: do not do this right now; it is not fully implemented--e.g. data bounds\n                            // are not updated when new data is fetched--and fetching more detailed quantitative\n                            // data is not that useful.\n                            /*\n                        _.each(self.circular_views, function(view) {\n                            view.update_scale(scale);\n                        });\n                        */\n                        }, 400);\n                    }\n                })\n            )\n            .attr(\"transform\", `translate(${width / 2},${height / 2})`)\n            .append(\"svg:g\")\n            .attr(\"class\", \"tracks\");\n\n        // -- Render circular tracks. --\n\n        // Create a view for each track in the visualization and render.\n        this.circular_views = circular_tracks.map((track, index) => {\n            var view = new CircsterBigWigTrackView({\n                el: svg.append(\"g\")[0],\n                track: track,\n                radius_bounds: tracks_bounds[index],\n                genome: self.genome,\n                total_gap: total_gap\n            });\n\n            view.render();\n\n            return view;\n        });\n\n        // -- Render chords tracks. --\n\n        this.chords_views = chords_tracks.map(track => {\n            var view = new CircsterChromInteractionsTrackView({\n                el: svg.append(\"g\")[0],\n                track: track,\n                radius_bounds: tracks_bounds[0],\n                genome: self.genome,\n                total_gap: total_gap\n            });\n\n            view.render();\n\n            return view;\n        });\n\n        // -- Render label track. --\n\n        // Track bounds are:\n        // (a) outer radius of last circular track;\n        // (b)\n        var outermost_radius = this.circular_views[this.circular_views.length - 1].radius_bounds[1];\n\n        var track_bounds = [outermost_radius, outermost_radius + this.label_arc_height];\n\n        this.label_track_view = new CircsterChromLabelTrackView({\n            el: svg.append(\"g\")[0],\n            track: new CircsterLabelTrack(),\n            radius_bounds: track_bounds,\n            genome: self.genome,\n            total_gap: total_gap\n        });\n\n        this.label_track_view.render();\n    },\n\n    /**\n     * Render a single track on the outside of the current visualization.\n     */\n    add_track: function(new_track) {\n        var total_gap = this.model.get(\"config\").get_value(\"total_gap\");\n\n        if (new_track.get(\"track_type\") === \"DiagonalHeatmapTrack\") {\n            // Added chords track.\n            var innermost_radius_bounds = this.circular_views[0].radius_bounds;\n\n            var new_view = new CircsterChromInteractionsTrackView({\n                el: d3.select(\"g.tracks\").append(\"g\")[0],\n                track: new_track,\n                radius_bounds: innermost_radius_bounds,\n                genome: this.genome,\n                total_gap: total_gap\n            });\n\n            new_view.render();\n            this.chords_views.push(new_view);\n        } else {\n            // Added circular track.\n\n            // Recompute and update circular track bounds.\n            var new_track_bounds = this.get_tracks_bounds();\n            _.each(this.circular_views, (track_view, i) => {\n                track_view.update_radius_bounds(new_track_bounds[i]);\n            });\n\n            // Update chords tracks.\n            _.each(this.chords_views, track_view => {\n                track_view.update_radius_bounds(new_track_bounds[0]);\n            });\n\n            // Render new track.\n            var track_index = this.circular_views.length;\n\n            var track_view = new CircsterBigWigTrackView({\n                el: d3.select(\"g.tracks\").append(\"g\")[0],\n                track: new_track,\n                radius_bounds: new_track_bounds[track_index],\n                genome: this.genome,\n                total_gap: total_gap\n            });\n\n            track_view.render();\n            this.circular_views.push(track_view);\n\n            // Update label track.\n            /*\n            FIXME: should never have to update label track because vis always expands to fit area\n            within label track.\n            var track_bounds = new_track_bounds[ new_track_bounds.length-1 ];\n            track_bounds[1] = track_bounds[0];\n            this.label_track_view.update_radius_bounds(track_bounds);\n            */\n        }\n    },\n\n    /**\n     * Remove a track from the view.\n     */\n    remove_track: function(track, tracks, options) {\n        // -- Remove track from view. --\n        var track_view = this.circular_views[options.index];\n        this.circular_views.splice(options.index, 1);\n        track_view.$el.remove();\n\n        // Recompute and update track bounds.\n        var new_track_bounds = this.get_tracks_bounds();\n        _.each(this.circular_views, (track_view, i) => {\n            track_view.update_radius_bounds(new_track_bounds[i]);\n        });\n    },\n\n    update_track_bounds: function() {\n        // Recompute and update track bounds.\n        var new_track_bounds = this.get_tracks_bounds();\n        _.each(this.circular_views, (track_view, i) => {\n            track_view.update_radius_bounds(new_track_bounds[i]);\n        });\n\n        // Update chords tracks.\n        _.each(this.chords_views, track_view => {\n            track_view.update_radius_bounds(new_track_bounds[0]);\n        });\n    }\n});\n\n/**\n * Renders a track in a Circster visualization.\n */\nvar CircsterTrackView = Backbone.View.extend({\n    tagName: \"g\",\n\n    /* ----------------------- Public Methods ------------------------- */\n\n    initialize: function(options) {\n        this.bg_stroke = \"#ddd\";\n        // Fill color when loading data.\n        this.loading_bg_fill = \"#ffc\";\n        // Fill color when data has been loaded.\n        this.bg_fill = \"#ddd\";\n        this.total_gap = options.total_gap;\n        this.track = options.track;\n        this.radius_bounds = options.radius_bounds;\n        this.genome = options.genome;\n        this.chroms_layout = this._chroms_layout();\n        this.data_bounds = [];\n        this.scale = 1;\n        this.parent_elt = d3.select(this.$el[0]);\n    },\n\n    /**\n     * Get fill color from config.\n     */\n    get_fill_color: function() {\n        var color = this.track.get(\"config\").get_value(\"block_color\");\n        if (!color) {\n            color = this.track.get(\"config\").get_value(\"color\");\n        }\n        return color;\n    },\n\n    /**\n     * Render track's data by adding SVG elements to parent.\n     */\n    render: function() {\n        // -- Create track group element. --\n        var track_parent_elt = this.parent_elt;\n\n        // -- Render background arcs. --\n        var genome_arcs = this.chroms_layout;\n\n        var arc_gen = d3.svg\n            .arc()\n            .innerRadius(this.radius_bounds[0])\n            .outerRadius(this.radius_bounds[1]);\n\n        var // Attach data to group element.\n        chroms_elts = track_parent_elt\n            .selectAll(\"g\")\n            .data(genome_arcs)\n            .enter()\n            .append(\"svg:g\");\n\n        var // Draw chrom arcs/paths.\n        chroms_paths = chroms_elts\n            .append(\"path\")\n            .attr(\"d\", arc_gen)\n            .attr(\"class\", \"chrom-background\")\n            .style(\"stroke\", this.bg_stroke)\n            .style(\"fill\", this.loading_bg_fill);\n\n        // Append titles to paths.\n        chroms_paths.append(\"title\").text(d => d.data.chrom);\n\n        // -- Render track data and, when track data is rendered, apply preferences and update chrom_elts fill. --\n\n        var self = this;\n\n        var data_manager = self.track.get(\"data_manager\");\n\n        var // If track has a data manager, get deferred that resolves when data is ready.\n        data_ready_deferred = data_manager ? data_manager.data_is_ready() : true;\n\n        // When data is ready, render track.\n        $.when(data_ready_deferred).then(() => {\n            $.when(self._render_data(track_parent_elt)).then(() => {\n                chroms_paths.style(\"fill\", self.bg_fill);\n\n                // Render labels after data is available so that data attributes are available.\n                self.render_labels();\n            });\n        });\n    },\n\n    /**\n     * Render track labels.\n     */\n    render_labels: function() {},\n\n    /**\n     * Update radius bounds.\n     */\n    update_radius_bounds: function(radius_bounds) {\n        // Update bounds.\n        this.radius_bounds = radius_bounds;\n\n        // -- Update background arcs. --\n        var new_d = d3.svg\n            .arc()\n            .innerRadius(this.radius_bounds[0])\n            .outerRadius(this.radius_bounds[1]);\n\n        this.parent_elt\n            .selectAll(\"g>path.chrom-background\")\n            .transition()\n            .duration(1000)\n            .attr(\"d\", new_d);\n\n        this._transition_chrom_data();\n\n        this._transition_labels();\n    },\n\n    /**\n     * Update view scale. This fetches more data if scale is increased.\n     */\n    update_scale: function(new_scale) {\n        // -- Update scale and return if new scale is less than old scale. --\n\n        var old_scale = this.scale;\n        this.scale = new_scale;\n        if (new_scale <= old_scale) {\n            return;\n        }\n\n        // -- Scale increased, so render visible data with more detail. --\n\n        var self = this;\n\n        var utils = new SVGUtils();\n\n        // Select all chrom data and filter to operate on those that are visible.\n        this.parent_elt\n            .selectAll(\"path.chrom-data\")\n            .filter(function(d, i) {\n                return utils.is_visible(this);\n            })\n            .each(function(d, i) {\n                // -- Now operating on a single path element representing chromosome data. --\n\n                var path_elt = d3.select(this);\n\n                var chrom = path_elt.attr(\"chrom\");\n                var chrom_region = self.genome.get_chrom_region(chrom);\n                var data_manager = self.track.get(\"data_manager\");\n                var data_deferred;\n\n                // If can't get more detailed data, return.\n                if (!data_manager.can_get_more_detailed_data(chrom_region)) {\n                    return;\n                }\n\n                // -- Get more detailed data. --\n                data_deferred = self.track\n                    .get(\"data_manager\")\n                    .get_more_detailed_data(chrom_region, \"Coverage\", 0, new_scale);\n\n                // When more data is available, use new data to redraw path.\n                $.when(data_deferred).then(data => {\n                    // Remove current data path.\n                    path_elt.remove();\n\n                    // Update data bounds with new data.\n                    self._update_data_bounds();\n\n                    // Find chromosome arc to draw data on.\n                    var chrom_arc = _.find(self.chroms_layout, layout => layout.data.chrom === chrom);\n\n                    // Add new data path and apply preferences.\n                    var color = self.get_fill_color();\n                    self\n                        ._render_chrom_data(self.parent_elt, chrom_arc, data)\n                        .style(\"stroke\", color)\n                        .style(\"fill\", color);\n                });\n            });\n\n        return self;\n    },\n\n    /* ----------------------- Internal Methods ------------------------- */\n\n    /**\n     * Transitions chrom data to new values (e.g new radius or data bounds).\n     */\n    _transition_chrom_data: function() {\n        var track = this.track;\n        var chrom_arcs = this.chroms_layout;\n        var chrom_data_paths = this.parent_elt.selectAll(\"g>path.chrom-data\");\n        var num_paths = chrom_data_paths[0].length;\n\n        if (num_paths > 0) {\n            var self = this;\n            $.when(track.get(\"data_manager\").get_genome_wide_data(this.genome)).then(genome_wide_data => {\n                // Map chrom data to path data, filtering out null values.\n                var path_data = _.reject(\n                    _.map(genome_wide_data, (chrom_data, i) => {\n                        var rval = null;\n\n                        var path_fn = self._get_path_function(chrom_arcs[i], chrom_data);\n\n                        if (path_fn) {\n                            rval = path_fn(chrom_data.data);\n                        }\n                        return rval;\n                    }),\n                    p_data => p_data === null\n                );\n\n                // Transition each path for data and color.\n                var color = track.get(\"config\").get_value(\"color\");\n                chrom_data_paths.each(function(path, index) {\n                    d3\n                        .select(this)\n                        .transition()\n                        .duration(1000)\n                        .style(\"stroke\", color)\n                        .style(\"fill\", color)\n                        .attr(\"d\", path_data[index]);\n                });\n            });\n        }\n    },\n\n    /**\n     * Transition labels to new values (e.g new radius or data bounds).\n     */\n    _transition_labels: function() {},\n\n    /**\n     * Update data bounds. If there are new_bounds, use them; otherwise use\n     * default data bounds.\n     */\n    _update_data_bounds: function(new_bounds) {\n        this.data_bounds =\n            new_bounds || this.get_data_bounds(this.track.get(\"data_manager\").get_genome_wide_data(this.genome));\n        this._transition_chrom_data();\n    },\n\n    /**\n     * Render data as elements attached to svg.\n     */\n    _render_data: function(svg) {\n        var self = this;\n        var chrom_arcs = this.chroms_layout;\n        var track = this.track;\n        var rendered_deferred = $.Deferred();\n\n        // When genome-wide data is available, render data.\n        $.when(track.get(\"data_manager\").get_genome_wide_data(this.genome)).then(genome_wide_data => {\n            // Set bounds.\n            self.data_bounds = self.get_data_bounds(genome_wide_data);\n\n            // Set min, max value in config so that they can be adjusted. Make this silent\n            // because these attributes are watched for changes and the viz is updated\n            // accordingly (set up in initialize). Because we are setting up, we don't want\n            // the watch to trigger events here.\n            track.get(\"config\").set_value(\"min_value\", self.data_bounds[0], {\n                silent: true\n            });\n            track.get(\"config\").set_value(\"max_value\", self.data_bounds[1], {\n                silent: true\n            });\n\n            // Merge chroms layout with data.\n            var layout_and_data = _.zip(chrom_arcs, genome_wide_data);\n\n            // Render each chromosome's data.\n            _.each(layout_and_data, chrom_info => {\n                var chrom_arc = chrom_info[0];\n                var data = chrom_info[1];\n                return self._render_chrom_data(svg, chrom_arc, data);\n            });\n\n            // Apply prefs to all track data.\n            var color = self.get_fill_color();\n            self.parent_elt\n                .selectAll(\"path.chrom-data\")\n                .style(\"stroke\", color)\n                .style(\"fill\", color);\n\n            rendered_deferred.resolve(svg);\n        });\n\n        return rendered_deferred;\n    },\n\n    /**\n     * Render a chromosome data and attach elements to svg.\n     */\n    _render_chrom_data: function(svg, chrom_arc, data) {},\n\n    /**\n     * Returns data for creating a path for the given data using chrom_arc and data bounds.\n     */\n    _get_path_function: function(chrom_arc, chrom_data) {},\n\n    /**\n     * Returns arc layouts for genome's chromosomes/contigs. Arcs are arranged in a circle\n     * separated by gaps.\n     */\n    _chroms_layout: function() {\n        // Setup chroms layout using pie.\n        var chroms_info = this.genome.get_chroms_info();\n\n        var pie_layout = d3.layout\n            .pie()\n            .value(d => d.len)\n            .sort(null);\n\n        var init_arcs = pie_layout(chroms_info);\n        var gap_per_chrom = 2 * Math.PI * this.total_gap / chroms_info.length;\n\n        var chrom_arcs = _.map(init_arcs, (arc, index) => {\n            // For short chroms, endAngle === startAngle.\n            var new_endAngle = arc.endAngle - gap_per_chrom;\n            arc.endAngle = new_endAngle > arc.startAngle ? new_endAngle : arc.startAngle;\n            return arc;\n        });\n\n        return chrom_arcs;\n    }\n});\n\n/**\n * Render chromosome labels.\n */\nvar CircsterChromLabelTrackView = CircsterTrackView.extend({\n    initialize: function(options) {\n        CircsterTrackView.prototype.initialize.call(this, options);\n        // Use a single arc for rendering data.\n        this.innerRadius = this.radius_bounds[0];\n        this.radius_bounds[0] = this.radius_bounds[1];\n        this.bg_stroke = \"#fff\";\n        this.bg_fill = \"#fff\";\n\n        // Minimum arc distance for labels to be applied.\n        this.min_arc_len = 0.05;\n    },\n\n    /**\n     * Render labels.\n     */\n    _render_data: function(svg) {\n        // -- Add chromosome label where it will fit; an alternative labeling mechanism\n        // would be nice for small chromosomes. --\n        var self = this;\n\n        var chrom_arcs = svg.selectAll(\"g\");\n\n        chrom_arcs.selectAll(\"path\").attr(\"id\", d => `label-${d.data.chrom}`);\n\n        chrom_arcs\n            .append(\"svg:text\")\n            .filter(d => d.endAngle - d.startAngle > self.min_arc_len)\n            .attr(\"text-anchor\", \"middle\")\n            .append(\"svg:textPath\")\n            .attr(\"class\", \"chrom-label\")\n            .attr(\"xlink:href\", d => `#label-${d.data.chrom}`)\n            .attr(\"startOffset\", \"25%\")\n            .text(d => d.data.chrom);\n\n        // -- Add ticks to denote chromosome length. --\n\n        /** Returns an array of tick angles and labels, given a chrom arc. */\n        var chromArcTicks = d => {\n            var k = (d.endAngle - d.startAngle) / d.value;\n\n            var ticks = d3.range(0, d.value, 25000000).map((v, i) => ({\n                radius: self.innerRadius,\n                angle: v * k + d.startAngle,\n                label: i === 0 ? 0 : i % 3 ? null : self.formatNum(v)\n            }));\n\n            // If there are fewer that 4 ticks, label last tick so that at least one non-zero tick is labeled.\n            if (ticks.length < 4) {\n                ticks[ticks.length - 1].label = self.formatNum(\n                    Math.round((ticks[ticks.length - 1].angle - d.startAngle) / k)\n                );\n            }\n\n            return ticks;\n        };\n\n        /** Rotate and move text as needed. */\n        var textTransform = d => (d.angle > Math.PI ? \"rotate(180)translate(-16)\" : null);\n\n        // Filter chroms for only those large enough for display.\n        var visibleChroms = _.filter(this.chroms_layout, c => c.endAngle - c.startAngle > self.min_arc_len);\n\n        this.drawTicks(this.parent_elt, visibleChroms, chromArcTicks, textTransform);\n    }\n});\n_.extend(CircsterChromLabelTrackView.prototype, UsesTicks);\n\n/**\n * View for quantitative track in Circster.\n */\nvar CircsterQuantitativeTrackView = CircsterTrackView.extend({\n    initialize: function(options) {\n        CircsterTrackView.prototype.initialize.call(this, options);\n\n        // When config settings change, update view.\n        var track_config = this.track.get(\"config\");\n        track_config.get(\"min_value\").on(\"change:value\", this._update_min_max, this);\n        track_config.get(\"max_value\").on(\"change:value\", this._update_min_max, this);\n        track_config.get(\"color\").on(\"change:value\", this._transition_chrom_data, this);\n    },\n\n    /**\n     * Update track when min and/or max are changed.\n     */\n    _update_min_max: function() {\n        var track_config = this.track.get(\"config\");\n\n        var new_bounds = [track_config.get_value(\"min_value\"), track_config.get_value(\"max_value\")];\n\n        this._update_data_bounds(new_bounds);\n\n        // FIXME: this works to update tick/text bounds, but there's probably a better way to do this\n        // by updating the data itself.\n        this.parent_elt.selectAll(\".min_max\").text((d, i) => new_bounds[i]);\n    },\n\n    /**\n     * Returns quantile for an array of numbers.\n     */\n    _quantile: function(numbers, quantile) {\n        numbers.sort(d3.ascending);\n        return d3.quantile(numbers, quantile);\n    },\n\n    /**\n     * Renders quantitative data with the form [x, value] and assumes data is equally spaced across\n     * chromosome. Attachs a dict with track and chrom name information to DOM element.\n     */\n    _render_chrom_data: function(svg, chrom_arc, chrom_data) {\n        var path_data = this._get_path_function(chrom_arc, chrom_data);\n\n        if (!path_data) {\n            return null;\n        }\n\n        // There is path data, so render as path.\n        var parent = svg.datum(chrom_data.data);\n\n        var path = parent\n            .append(\"path\")\n            .attr(\"class\", \"chrom-data\")\n            .attr(\"chrom\", chrom_arc.data.chrom)\n            .attr(\"d\", path_data);\n\n        return path;\n    },\n\n    /**\n     * Returns function for creating a path across the chrom arc.\n     */\n    _get_path_function: function(chrom_arc, chrom_data) {\n        // If no chrom data, return null.\n        if (typeof chrom_data === \"string\" || !chrom_data.data || chrom_data.data.length === 0) {\n            return null;\n        }\n\n        // Radius scaler.\n        var radius = d3.scale\n            .linear()\n            .domain(this.data_bounds)\n            .range(this.radius_bounds)\n            .clamp(true);\n\n        // Scaler for placing data points across arc.\n        var angle = d3.scale\n            .linear()\n            .domain([0, chrom_data.data.length])\n            .range([chrom_arc.startAngle, chrom_arc.endAngle]);\n\n        // Use line generator to create area.\n        var line = d3.svg.line\n            .radial()\n            .interpolate(\"linear\")\n            .radius(d => radius(d[1]))\n            .angle((d, i) => angle(i));\n\n        return d3.svg.area\n            .radial()\n            .interpolate(line.interpolate())\n            .innerRadius(radius(0))\n            .outerRadius(line.radius())\n            .angle(line.angle());\n    },\n\n    /**\n     * Render track min, max using ticks.\n     */\n    render_labels: function() {\n        var self = this;\n\n        var // Keep counter of visible chroms.\n        textTransform = () => \"rotate(90)\";\n\n        // FIXME:\n        // (1) using min_max class below is needed for _update_min_max, which could be improved.\n        // (2) showing config on tick click should be replaced by proper track config icon.\n\n        // Draw min, max on first chrom only.\n        var ticks = this.drawTicks(\n            this.parent_elt,\n            [this.chroms_layout[0]],\n            this._data_bounds_ticks_fn(),\n            textTransform,\n            true\n        ).classed(\"min_max\", true);\n\n        // Show config when ticks are clicked on.\n        _.each(ticks, tick => {\n            $(tick).click(() => {\n                var view = new config.ConfigSettingCollectionView({\n                    collection: self.track.get(\"config\")\n                });\n                view.render_in_modal(\"Configure Track\");\n            });\n        });\n\n        /*\n        // Filter for visible chroms, then for every third chrom so that labels attached to only every\n        // third chrom.\n        var visibleChroms = _.filter(this.chroms_layout, function(c) { return c.endAngle - c.startAngle > 0.08; }),\n            labeledChroms = _.filter(visibleChroms, function(c, i) { return i % 3 === 0; });\n        this.drawTicks(this.parent_elt, labeledChroms, this._data_bounds_ticks_fn(), textTransform, true);\n        */\n    },\n\n    /**\n     * Transition labels to new values (e.g new radius or data bounds).\n     */\n    _transition_labels: function() {\n        // FIXME: (a) pull out function for getting labeled chroms? and (b) function used in transition below\n        // is copied from UseTicks mixin, so pull out and make generally available.\n\n        // If there are no data bounds, nothing to transition.\n        if (this.data_bounds.length === 0) {\n            return;\n        }\n\n        // Transition labels to new radius bounds.\n        var self = this;\n\n        var visibleChroms = _.filter(this.chroms_layout, c => c.endAngle - c.startAngle > 0.08);\n\n        var labeledChroms = _.filter(visibleChroms, (c, i) => i % 3 === 0);\n\n        var new_data = _.flatten(_.map(labeledChroms, c => self._data_bounds_ticks_fn()(c)));\n\n        this.parent_elt\n            .selectAll(\"g.tick\")\n            .data(new_data)\n            .transition()\n            .attr(\"transform\", d => `rotate(${d.angle * 180 / Math.PI - 90})translate(${d.radius},0)`);\n    },\n\n    /**\n     * Get function for locating data bounds ticks.\n     */\n    _data_bounds_ticks_fn: function() {\n        // Closure vars.\n        var self = this;\n\n        // Return function for locating ticks based on chrom arc data.\n        return (\n            d // Set up data to display min, max ticks.\n        ) => [\n            {\n                radius: self.radius_bounds[0],\n                angle: d.startAngle,\n                label: self.formatNum(self.data_bounds[0])\n            },\n            {\n                radius: self.radius_bounds[1],\n                angle: d.startAngle,\n                label: self.formatNum(self.data_bounds[1])\n            }\n        ];\n    },\n\n    /**\n     * Returns an array with two values denoting the minimum and maximum\n     * values for the track.\n     */\n    get_data_bounds: function(data) {}\n});\n_.extend(CircsterQuantitativeTrackView.prototype, UsesTicks);\n\n/**\n * Bigwig track view in Circster.\n */\nvar CircsterBigWigTrackView = CircsterQuantitativeTrackView.extend({\n    get_data_bounds: function(data) {\n        // Set max across dataset by extracting all values, flattening them into a\n        // single array, and getting third quartile.\n        var values = _.flatten(\n            _.map(data, d => {\n                if (d) {\n                    // Each data point has the form [position, value], so return all values.\n                    return _.map(\n                        d.data,\n                        (\n                            p // Null is used for a lack of data; resolve null to 0 for comparison.\n                        ) => parseInt(p[1], 10) || 0\n                    );\n                } else {\n                    return 0;\n                }\n            })\n        );\n\n        // For max, use 98% quantile in attempt to avoid very large values. However, this max may be 0\n        // for sparsely populated data, so use max in that case.\n        return [_.min(values), this._quantile(values, 0.98) || _.max(values)];\n    }\n});\n\n/**\n * Chromosome interactions track view in Circster.\n */\nvar CircsterChromInteractionsTrackView = CircsterTrackView.extend({\n    render: function() {\n        var self = this;\n\n        // When data is ready, render track.\n        $.when(self.track.get(\"data_manager\").data_is_ready()).then(() => {\n            // When data has been fetched, render track.\n            $.when(self.track.get(\"data_manager\").get_genome_wide_data(self.genome)).then(genome_wide_data => {\n                var chord_data = [];\n                var chroms_info = self.genome.get_chroms_info();\n                // Convert chromosome data into chord data.\n                _.each(genome_wide_data, (chrom_data, index) => {\n                    // Map each interaction into chord data.\n                    var cur_chrom = chroms_info[index].chrom;\n                    var chrom_chord_data = _.map(chrom_data.data, datum => {\n                        // Each datum is an interaction/chord.\n                        var source_angle = self._get_region_angle(cur_chrom, datum[1]);\n\n                        var target_angle = self._get_region_angle(datum[3], datum[4]);\n\n                        return {\n                            source: {\n                                startAngle: source_angle,\n                                endAngle: source_angle + 0.01\n                            },\n                            target: {\n                                startAngle: target_angle,\n                                endAngle: target_angle + 0.01\n                            }\n                        };\n                    });\n\n                    chord_data = chord_data.concat(chrom_chord_data);\n                });\n\n                self.parent_elt\n                    .append(\"g\")\n                    .attr(\"class\", \"chord\")\n                    .selectAll(\"path\")\n                    .data(chord_data)\n                    .enter()\n                    .append(\"path\")\n                    .style(\"fill\", self.get_fill_color())\n                    .attr(\"d\", d3.svg.chord().radius(self.radius_bounds[0]))\n                    .style(\"opacity\", 1);\n            });\n        });\n    },\n\n    update_radius_bounds: function(radius_bounds) {\n        this.radius_bounds = radius_bounds;\n        this.parent_elt\n            .selectAll(\"path\")\n            .transition()\n            .attr(\"d\", d3.svg.chord().radius(this.radius_bounds[0]));\n    },\n\n    /**\n     * Returns radians for a genomic position.\n     */\n    _get_region_angle: function(chrom, position) {\n        // Find chrom angle data\n        var chrom_angle_data = _.find(this.chroms_layout, chrom_layout => chrom_layout.data.chrom === chrom);\n\n        // Return angle at position.\n        return (\n            chrom_angle_data.endAngle -\n            (chrom_angle_data.endAngle - chrom_angle_data.startAngle) *\n                (chrom_angle_data.data.len - position) /\n                chrom_angle_data.data.len\n        );\n    }\n});\n\n// circster app loader\nvar Circster = Backbone.View.extend({\n    initialize: function() {\n        // load css\n        mod_utils.cssLoadFile(\"static/style/circster.css\");\n        // -- Configure visualization --\n        var genome = new visualization.Genome(window.galaxy_config.app.genome);\n\n        var vis = new visualization.GenomeVisualization(window.galaxy_config.app.viz_config);\n\n        // Add Circster-specific config options.\n        vis.get(\"config\").add([\n            {\n                key: \"arc_dataset_height\",\n                label: \"Arc Dataset Height\",\n                type: \"int\",\n                value: 25,\n                view: \"circster\"\n            },\n            {\n                key: \"track_gap\",\n                label: \"Gap Between Tracks\",\n                type: \"int\",\n                value: 5,\n                view: \"circster\"\n            },\n            {\n                key: \"total_gap\",\n                label: \"Gap [0-1]\",\n                type: \"float\",\n                value: 0.4,\n                view: \"circster\",\n                hidden: true\n            }\n        ]);\n\n        var viz_view = new CircsterView({\n            // view pane\n            el: $(\"#center .unified-panel-body\"),\n            genome: genome,\n            model: vis\n        });\n\n        // Render vizualization\n        viz_view.render();\n\n        // setup title\n        $(\"#center .unified-panel-header-inner\").append(\n            `${window.galaxy_config.app.viz_config.title} ${window.galaxy_config.app.viz_config.dbkey}`\n        );\n\n        // setup menu\n        var menu = mod_icon_btn.create_icon_buttons_menu(\n            [\n                {\n                    icon_class: \"plus-button\",\n                    title: _l(\"Add tracks\"),\n                    on_click: function() {\n                        visualization.select_datasets({ dbkey: vis.get(\"dbkey\") }, tracks => {\n                            vis.add_tracks(tracks);\n                        });\n                    }\n                },\n                {\n                    icon_class: \"gear\",\n                    title: _l(\"Settings\"),\n                    on_click: function() {\n                        var view = new config.ConfigSettingCollectionView({\n                            collection: vis.get(\"config\")\n                        });\n                        view.render_in_modal(\"Configure Visualization\");\n                    }\n                },\n                {\n                    icon_class: \"disk--arrow\",\n                    title: _l(\"Save\"),\n                    on_click: function() {\n                        // show saving dialog box\n                        Galaxy.modal.show({\n                            title: _l(\"Saving...\"),\n                            body: \"progress\"\n                        });\n\n                        // send to server\n                        $.ajax({\n                            url: `${Galaxy.root}visualization/save`,\n                            type: \"POST\",\n                            dataType: \"json\",\n                            data: {\n                                id: vis.get(\"vis_id\"),\n                                title: vis.get(\"title\"),\n                                dbkey: vis.get(\"dbkey\"),\n                                type: \"trackster\",\n                                vis_json: JSON.stringify(vis)\n                            }\n                        })\n                            .success(vis_info => {\n                                Galaxy.modal.hide();\n                                vis.set(\"vis_id\", vis_info.vis_id);\n                            })\n                            .error(() => {\n                                // show dialog\n                                Galaxy.modal.show({\n                                    title: _l(\"Could Not Save\"),\n                                    body: \"Could not save visualization. Please try again later.\",\n                                    buttons: {\n                                        Cancel: function() {\n                                            Galaxy.modal.hide();\n                                        }\n                                    }\n                                });\n                            });\n                    }\n                },\n                {\n                    icon_class: \"cross-circle\",\n                    title: _l(\"Close\"),\n                    on_click: function() {\n                        window.location = `${Galaxy.root}visualizations/list`;\n                    }\n                }\n            ],\n            { tooltip_config: { placement: \"bottom\" } }\n        );\n\n        // add menu\n        menu.$el.attr(\"style\", \"float: right\");\n        $(\"#center .unified-panel-header-inner\").append(menu.$el);\n\n        // manual tooltip config because default gravity is S and cannot be changed\n        $(\".menu-button\").tooltip({ placement: \"bottom\" });\n    }\n});\n\n// Module exports.\nexport default {\n    GalaxyApp: Circster\n};\n"]}