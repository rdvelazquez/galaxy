{"version":3,"sources":["viz/bbi-data-manager.js"],"names":["bigwig","BBIDataManager","GenomeDataManager","extend","load_data","region","mode","resolution","extra_params","deferred","$","Deferred","set_data","url","Galaxy","root","get","id","self","promise","when","makeBwg","then","bb","err","readWigData","result","prev","max","Number","MIN_VALUE","data","forEach","d","min","push","score","entry","dataset_type","resolve"],"mappings":";;;;;;;;;QACYA,M;;;;;;;;;;;;;;;;;;;;;;;;;AACZ;;;AAGA,QAAIC,iBAAiB,wBAAcC,iBAAd,CAAgCC,MAAhC,CAAuC;AACxD;;;;;AAKAC,mBAAW,mBAASC,MAAT,EAAiBC,IAAjB,EAAuBC,UAAvB,EAAmCC,YAAnC,EAAiD;AACxD,gBAAIC,WAAWC,EAAEC,QAAF,EAAf;AACA,iBAAKC,QAAL,CAAcP,MAAd,EAAsBI,QAAtB;;AAEA,gBAAII,MAASC,OAAOC,IAAhB,iBAAgC,KAAKC,GAAL,CAAS,SAAT,EAAoBC,EAApD,aAAJ;;AAEA,gBAAIC,OAAO,IAAX;AACA,gBAAIC,UAAU,IAAIT,EAAEC,QAAN,EAAd;AACAD,cAAEU,IAAF,CAAOpB,OAAOqB,OAAP,CAAeR,GAAf,CAAP,EAA4BS,IAA5B,CAAiC,UAACC,EAAD,EAAKC,GAAL,EAAa;AAC1Cd,kBAAEU,IAAF,CAAOG,GAAGE,WAAH,CAAepB,OAAOW,GAAP,CAAW,OAAX,CAAf,EAAoCX,OAAOW,GAAP,CAAW,OAAX,CAApC,EAAyDX,OAAOW,GAAP,CAAW,KAAX,CAAzD,CAAP,EAAoFM,IAApF,CAAyF,gBAAQ;AAC7F;AACA;AACA,wBAAII,SAAS,EAAb;;AAEA,wBAAIC,OAAO,EAAEC,KAAKC,OAAOC,SAAd,EAAX;AACAC,yBAAKC,OAAL,CAAa,aAAK;AACd;AACA;AACA,4BAAIL,KAAKC,GAAL,KAAaK,EAAEC,GAAF,GAAQ,CAAzB,EAA4B;AACxB;AACAR,mCAAOS,IAAP,CAAY,CAACR,KAAKC,GAAL,GAAW,CAAZ,EAAe,CAAf,CAAZ;AACA;AACA;AACAF,mCAAOS,IAAP,CAAY,CAACF,EAAEC,GAAF,GAAQ,CAAT,EAAY,CAAZ,CAAZ;AACH;;AAED;AACA;AACAR,+BAAOS,IAAP,CAAY,CAACF,EAAEC,GAAF,GAAQ,CAAT,EAAYD,EAAEG,KAAd,CAAZ;;AAEA;AACAV,+BAAOS,IAAP,CAAY,CAACF,EAAEL,GAAH,EAAQK,EAAEG,KAAV,CAAZ;;AAEAT,+BAAOM,CAAP;AACH,qBAnBD;;AAqBA,wBAAII,QAAQ;AACRN,8BAAML,MADE;AAERrB,gCAAQA,MAFA;AAGRiC,sCAAc;AAHN,qBAAZ;;AAMApB,yBAAKN,QAAL,CAAcP,MAAd,EAAsBgC,KAAtB;AACA5B,6BAAS8B,OAAT,CAAiBF,KAAjB;AACH,iBAnCD;AAoCH,aArCD;;AAuCA,mBAAO5B,QAAP;AACH;AAtDuD,KAAvC,CAArB;;sBAyDe;AACXR,wBAAgBA;AADL,K","file":"../../scripts/viz/bbi-data-manager.js","sourcesContent":["import visualization from \"viz/visualization\";\nimport * as bigwig from \"libs/bbi/bigwig\";\n/**\n * Data manager for BBI datasets/files, including BigWig and BigBed.\n */\nvar BBIDataManager = visualization.GenomeDataManager.extend({\n    /**\n     * Load data from server and manage data entries. Adds a Deferred to manager\n     * for region; when data becomes available, replaces Deferred with data.\n     * Returns the Deferred that resolves when data is available.\n     */\n    load_data: function(region, mode, resolution, extra_params) {\n        var deferred = $.Deferred();\n        this.set_data(region, deferred);\n\n        var url = `${Galaxy.root}datasets/${this.get(\"dataset\").id}/display`;\n\n        var self = this;\n        var promise = new $.Deferred();\n        $.when(bigwig.makeBwg(url)).then((bb, err) => {\n            $.when(bb.readWigData(region.get(\"chrom\"), region.get(\"start\"), region.get(\"end\"))).then(data => {\n                // Transform data into \"bigwig\" format for LinePainter. \"bigwig\" format is an array of 2-element arrays\n                // where each element is [position, score]; unlike real bigwig format, no gaps are allowed.\n                var result = [];\n\n                var prev = { max: Number.MIN_VALUE };\n                data.forEach(d => {\n                    // If there is a gap between prev and d, fill it with an interval with score 0.\n                    // This is necessary for LinePainter to draw correctly.\n                    if (prev.max !== d.min - 1) {\n                        // +1 to start after previous region.\n                        result.push([prev.max + 1, 0]);\n                        // -2 = -1 for converting from 1-based to 0-based coordinates,\n                        //      -1 for ending before current region.\n                        result.push([d.min - 2, 0]);\n                    }\n\n                    // Add data point for entry start. -1 to convert from wiggle\n                    // 1-based coordinates to 0-based browser coordinates.\n                    result.push([d.min - 1, d.score]);\n\n                    // Add data point for entry end:\n                    result.push([d.max, d.score]);\n\n                    prev = d;\n                });\n\n                var entry = {\n                    data: result,\n                    region: region,\n                    dataset_type: \"bigwig\"\n                };\n\n                self.set_data(region, entry);\n                deferred.resolve(entry);\n            });\n        });\n\n        return deferred;\n    }\n});\n\nexport default {\n    BBIDataManager: BBIDataManager\n};\n"]}