{"version":3,"sources":["viz/sweepster.js"],"names":["_","d3","ToolInputsSettings","Backbone","Model","extend","defaults","inputs","values","ToolParameterTree","tool","tree_data","initialize","options","self","get","each","input","on","set_tree_data","add_param","remove_param","config","find","input_config","name","set","param","get_tree_params","length","index","params_samples","map","samples","get_samples","node_id","create_tree_data","param_samples","param_label","settings","id","setting","value","children","where","in_ptree","sortBy","get_num_leaves","reduce","memo","get_node_settings","target_node","fixed_settings","get_inputs_dict","cur_node","parent","depth","get_settings","node","flatten","c","clone","all_settings","isArray","get_connected_nodes","get_subtree_nodes","a_node","parents","cur_parent","push","get_leaf","find_child","child","toJSON","min","max","num_samples","SweepsterTrack","track","mode","regions","track_config","data_url","Galaxy","root","converted_datasets_state_url","object_from_template","same_settings","a_track","this_settings","other_settings","prop","to_dict","TrackCollection","Collection","model","SweepsterVisualization","Visualization","prototype","dataset","parameter_tree","tracks","default_mode","Dataset","Tool","GenomeRegionCollection","tool_with_samplable_inputs","remove_inputs","tree_config","add_track","add","title","type","dataset_id","tool_id","SweepsterTrackView","View","tagName","TILE_LEN","canvas_manager","render","draw_tiles","settings_td","$","addClass","appendTo","$el","settings_div","hide","append","css","text","run_on_dataset_button","click","toggle","trigger","icon_menu","create_icon_buttons_menu","icon_class","on_click","remove","prepend","html","attr","tile_containers","when","data_manager","data_is_ready","then","region","resolution","w_scale","get_data","canvas","new_canvas","width","height","get_canvas_height","tile_data","draw_tile","getContext","empty","ToolInputValOrSweepView","number_input_template","select_input_template","tool_row","single_input_row","sweep_inputs_row","change","val","IntegerToolParameter","template","SelectToolParameter","option","options_text","join","insertAfter","menu","show","parseFloat","ToolParameterTreeDesignView","className","tool_form_view","ToolFormView","not","i","input_view","at","ToolParameterTreeView","tree_params","cluster","layout","size","diagonal","svg","projection","d","y","x","nodes","param_depths","uniq","pluck","center_left","position","left","vis","select","link","selectAll","data","links","enter","connected_node_ids","filter","undefined","style","SweepsterVisualizationView","helpText","CanvasManager","tool_param_tree_view","track_collection_container","handle_node_clicks","view","ConfigSettingCollection","from_models_and_saved_values","key","label","default_value","tree_design_view","tr","toString","first","tracks_div","help_div","close_button","window","location","tooltip_config","placement","modes","mode_mapping","make_popupmenu","get_base_color","base","get_value","toLowerCase","run_tool_on_dataset","tool_name","set_input_values","rerun","show_modal","Ok","hide_modal","pm_track","param_tree","track_view","hover","settings_leaf","run_jobs_deferred","Deferred","resolve","run_jobs","new_tracks","setTimeout","output","prefs","to_key_value_dict","track_obj","init_for_tool_data"],"mappings":"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","file":"../../scripts/viz/sweepster.js","sourcesContent":["import _l from \"utils/localization\";\n/**\n * Visualization and components for Sweepster, a visualization for exploring a tool's parameter space via\n * genomic visualization.\n */\n\nimport * as _ from \"libs/underscore\";\nimport * as d3 from \"libs/d3\";\nimport util from \"viz/trackster/util\";\nimport visualization from \"viz/visualization\";\nimport tracks from \"viz/trackster/tracks\";\nimport tools from \"mvc/tool/tools\";\nimport data from \"mvc/dataset/data\";\nimport config from \"utils/config\";\nimport mod_icon_btn from \"mvc/ui/icon-button\";\n/**\n * A collection of tool input settings. Object is useful for keeping a list of settings\n * for future use without changing the input's value and for preserving inputs order.\n */\nvar ToolInputsSettings = Backbone.Model.extend({\n    defaults: {\n        inputs: null,\n        values: null\n    }\n});\n\n/**\n * Tree for a tool's parameters.\n */\nvar ToolParameterTree = Backbone.Model.extend({\n    defaults: {\n        tool: null,\n        tree_data: null\n    },\n\n    initialize: function(options) {\n        // Set up tool parameters to work with tree.\n        var self = this;\n        this.get(\"tool\")\n            .get(\"inputs\")\n            .each(input => {\n                // Listen for changes to input's attributes.\n                input.on(\n                    \"change:min change:max change:num_samples\",\n                    input => {\n                        if (input.get(\"in_ptree\")) {\n                            self.set_tree_data();\n                        }\n                    },\n                    self\n                );\n                input.on(\n                    \"change:in_ptree\",\n                    input => {\n                        if (input.get(\"in_ptree\")) {\n                            self.add_param(input);\n                        } else {\n                            self.remove_param(input);\n                        }\n                        self.set_tree_data();\n                    },\n                    self\n                );\n            });\n\n        // If there is a config, use it.\n        if (options.config) {\n            _.each(options.config, input_config => {\n                var input = self\n                    .get(\"tool\")\n                    .get(\"inputs\")\n                    .find(input => input.get(\"name\") === input_config.name);\n                self.add_param(input);\n                input.set(input_config);\n            });\n        }\n    },\n\n    add_param: function(param) {\n        // If parameter already present, do not add it.\n        if (param.get(\"ptree_index\")) {\n            return;\n        }\n\n        param.set(\"in_ptree\", true);\n        param.set(\"ptree_index\", this.get_tree_params().length);\n    },\n\n    remove_param: function(param) {\n        // Remove param from tree.\n        param.set(\"in_ptree\", false);\n        param.set(\"ptree_index\", null);\n\n        // Update ptree indices for remaining params.\n        _(this.get_tree_params()).each((input, index) => {\n            // +1 to use 1-based indexing.\n            input.set(\"ptree_index\", index + 1);\n        });\n    },\n\n    /**\n     * Sets tree data using tool's inputs.\n     */\n    set_tree_data: function() {\n        // Get samples for each parameter.\n        var params_samples = _.map(this.get_tree_params(), param => ({\n            param: param,\n            samples: param.get_samples()\n        }));\n        var node_id = 0;\n\n        var // Creates tree data recursively.\n        create_tree_data = (params_samples, index) => {\n            var param_samples = params_samples[index],\n                param = param_samples.param,\n                param_label = param.get(\"label\"),\n                settings = param_samples.samples;\n\n            // Create leaves when last parameter setting is reached.\n            if (params_samples.length - 1 === index) {\n                return _.map(settings, setting => ({\n                    id: node_id++,\n                    name: setting,\n                    param: param,\n                    value: setting\n                }));\n            }\n\n            // Recurse to handle other parameters.\n            return _.map(settings, setting => ({\n                id: node_id++,\n                name: setting,\n                param: param,\n                value: setting,\n                children: create_tree_data(params_samples, index + 1)\n            }));\n        };\n\n        this.set(\"tree_data\", {\n            name: \"Root\",\n            id: node_id++,\n            children: params_samples.length !== 0 ? create_tree_data(params_samples, 0) : null\n        });\n    },\n\n    get_tree_params: function() {\n        // Filter and sort parameters to get list in tree.\n        return _(\n            this.get(\"tool\")\n                .get(\"inputs\")\n                .where({ in_ptree: true })\n        ).sortBy(input => input.get(\"ptree_index\"));\n    },\n\n    /**\n     * Returns number of leaves in tree.\n     */\n    get_num_leaves: function() {\n        return this.get_tree_params().reduce((memo, param) => memo * param.get_samples().length, 1);\n    },\n\n    /**\n     * Returns array of ToolInputsSettings objects based on a node and its subtree.\n     */\n    get_node_settings: function(target_node) {\n        // -- Get fixed settings from tool and parent nodes.\n\n        // Start with tool's settings.\n        var fixed_settings = this.get(\"tool\").get_inputs_dict();\n\n        // Get fixed settings using node's parents.\n        var cur_node = target_node.parent;\n        if (cur_node) {\n            while (cur_node.depth !== 0) {\n                fixed_settings[cur_node.param.get(\"name\")] = cur_node.value;\n                cur_node = cur_node.parent;\n            }\n        }\n\n        // Walk subtree starting at clicked node to get full list of settings.\n        var self = this;\n\n        var get_settings = (node, settings) => {\n            // Add setting for this node. Root node does not have a param,\n            // however.\n            if (node.param) {\n                settings[node.param.get(\"name\")] = node.value;\n            }\n\n            if (!node.children) {\n                // At leaf node, so return settings.\n                return new ToolInputsSettings({\n                    inputs: self.get(\"tool\").get(\"inputs\"),\n                    values: settings\n                });\n            } else {\n                // At interior node: return list of subtree settings.\n                return _.flatten(_.map(node.children, c => get_settings(c, _.clone(settings))));\n            }\n        };\n\n        var all_settings = get_settings(target_node, fixed_settings);\n\n        // If user clicked on leaf, settings is a single dict. Convert to array for simplicity.\n        if (!_.isArray(all_settings)) {\n            all_settings = [all_settings];\n        }\n\n        return all_settings;\n    },\n\n    /**\n     * Returns all nodes connected a particular node; this includes parents and children of the node.\n     */\n    get_connected_nodes: function(node) {\n        var get_subtree_nodes = a_node => {\n            if (!a_node.children) {\n                return a_node;\n            } else {\n                // At interior node: return subtree nodes.\n                return _.flatten([a_node, _.map(a_node.children, c => get_subtree_nodes(c))]);\n            }\n        };\n\n        // Get node's parents.\n        var parents = [];\n\n        var cur_parent = node.parent;\n        while (cur_parent) {\n            parents.push(cur_parent);\n            cur_parent = cur_parent.parent;\n        }\n\n        return _.flatten([parents, get_subtree_nodes(node)]);\n    },\n\n    /**\n     * Returns the leaf that corresponds to a settings collection.\n     */\n    get_leaf: function(settings) {\n        var cur_node = this.get(\"tree_data\");\n\n        var find_child = children => _.find(children, child => settings[child.param.get(\"name\")] === child.value);\n\n        while (cur_node.children) {\n            cur_node = find_child(cur_node.children);\n        }\n        return cur_node;\n    },\n\n    /**\n     * Returns a list of parameters used in tree.\n     */\n    toJSON: function() {\n        // FIXME: returning and jsonifying complete param causes trouble on the server side,\n        // so just use essential attributes for now.\n        return this.get_tree_params().map(param => ({\n            name: param.get(\"name\"),\n            min: param.get(\"min\"),\n            max: param.get(\"max\"),\n            num_samples: param.get(\"num_samples\")\n        }));\n    }\n});\n\nvar SweepsterTrack = Backbone.Model.extend({\n    defaults: {\n        track: null,\n        mode: \"Pack\",\n        settings: null,\n        regions: null\n    },\n\n    initialize: function(options) {\n        this.set(\"regions\", options.regions);\n        if (options.track) {\n            // FIXME: find a better way to deal with needed URLs:\n            var track_config = _.extend(\n                {\n                    data_url: `${Galaxy.root}dummy1`,\n                    converted_datasets_state_url: `${Galaxy.root}dummy2`\n                },\n                options.track\n            );\n            this.set(\"track\", tracks.object_from_template(track_config, {}, null));\n        }\n    },\n\n    same_settings: function(a_track) {\n        var this_settings = this.get(\"settings\");\n        var other_settings = a_track.get(\"settings\");\n        for (var prop in this_settings) {\n            if (!other_settings[prop] || this_settings[prop] !== other_settings[prop]) {\n                return false;\n            }\n        }\n        return true;\n    },\n\n    toJSON: function() {\n        return {\n            track: this.get(\"track\").to_dict(),\n            settings: this.get(\"settings\"),\n            regions: this.get(\"regions\")\n        };\n    }\n});\n\nvar TrackCollection = Backbone.Collection.extend({\n    model: SweepsterTrack\n});\n\n/**\n * Sweepster visualization model.\n */\nvar SweepsterVisualization = visualization.Visualization.extend({\n    defaults: _.extend({}, visualization.Visualization.prototype.defaults, {\n        dataset: null,\n        tool: null,\n        parameter_tree: null,\n        regions: null,\n        tracks: null,\n        default_mode: \"Pack\"\n    }),\n\n    initialize: function(options) {\n        this.set(\"dataset\", new data.Dataset(options.dataset));\n        this.set(\"tool\", new tools.Tool(options.tool));\n        this.set(\"regions\", new visualization.GenomeRegionCollection(options.regions));\n        this.set(\"tracks\", new TrackCollection(options.tracks));\n\n        var tool_with_samplable_inputs = this.get(\"tool\");\n        this.set(\"tool_with_samplable_inputs\", tool_with_samplable_inputs);\n        // Remove complex parameters for now.\n        tool_with_samplable_inputs.remove_inputs([\"data\", \"hidden_data\", \"conditional\", \"text\"]);\n\n        this.set(\n            \"parameter_tree\",\n            new ToolParameterTree({\n                tool: tool_with_samplable_inputs,\n                config: options.tree_config\n            })\n        );\n    },\n\n    add_track: function(track) {\n        this.get(\"tracks\").add(track);\n    },\n\n    toJSON: function() {\n        return {\n            id: this.get(\"id\"),\n            title: `Parameter exploration for dataset '${this.get(\"dataset\").get(\"name\")}'`,\n            type: \"sweepster\",\n            dataset_id: this.get(\"dataset\").id,\n            tool_id: this.get(\"tool\").id,\n            regions: this.get(\"regions\").toJSON(),\n            tree_config: this.get(\"parameter_tree\").toJSON(),\n            tracks: this.get(\"tracks\").toJSON()\n        };\n    }\n});\n\n/**\n * --- Views ---\n */\n\n/**\n * Sweepster track view.\n */\nvar SweepsterTrackView = Backbone.View.extend({\n    tagName: \"tr\",\n\n    TILE_LEN: 250,\n\n    initialize: function(options) {\n        this.canvas_manager = options.canvas_manager;\n        this.render();\n        this.model.on(\"change:track change:mode\", this.draw_tiles, this);\n    },\n\n    render: function() {\n        // Render settings icon and popup.\n        // TODO: use template.\n        var settings = this.model.get(\"settings\");\n\n        var values = settings.get(\"values\");\n\n        var settings_td = $(\"<td/>\")\n            .addClass(\"settings\")\n            .appendTo(this.$el);\n\n        var settings_div = $(\"<div/>\")\n            .addClass(\"track-info\")\n            .hide()\n            .appendTo(settings_td);\n\n        settings_div.append(\n            $(\"<div/>\")\n                .css(\"font-weight\", \"bold\")\n                .text(\"Track Settings\")\n        );\n        settings.get(\"inputs\").each(input => {\n            settings_div.append(`${input.get(\"label\")}: ${values[input.get(\"name\")]}<br/>`);\n        });\n        var self = this;\n\n        var run_on_dataset_button = $(\"<button/>\")\n            .appendTo(settings_div)\n            .text(\"Run on complete dataset\")\n            .click(() => {\n                settings_div.toggle();\n                self.trigger(\"run_on_dataset\", settings);\n            });\n\n        var icon_menu = mod_icon_btn.create_icon_buttons_menu([\n            {\n                title: _l(\"Settings\"),\n                icon_class: \"gear track-settings\",\n                on_click: function() {\n                    settings_div.toggle();\n                }\n            },\n            {\n                title: _l(\"Remove\"),\n                icon_class: \"cross-circle\",\n                on_click: function() {\n                    self.$el.remove();\n                    $(\".tooltip\").remove();\n                    // TODO: remove track from viz collection.\n                }\n            }\n        ]);\n        settings_td.prepend(icon_menu.$el);\n\n        // Render tile placeholders.\n        this.model.get(\"regions\").each(() => {\n            self.$el.append(\n                $(\"<td/>\")\n                    .addClass(\"tile\")\n                    .html($(\"<img/>\").attr(\"src\", `${Galaxy.root}images/loading_large_white_bg.gif`))\n            );\n        });\n\n        if (this.model.get(\"track\")) {\n            this.draw_tiles();\n        }\n    },\n\n    /**\n     * Draw tiles for regions.\n     */\n    draw_tiles: function() {\n        var self = this;\n        var track = this.model.get(\"track\");\n        var regions = this.model.get(\"regions\");\n        var tile_containers = this.$el.find(\"td.tile\");\n\n        // Do nothing if track is not defined.\n        if (!track) {\n            return;\n        }\n\n        // When data is ready, draw tiles.\n        $.when(track.data_manager.data_is_ready()).then(data_ok => {\n            // Draw tile for each region.\n            regions.each((region, index) => {\n                var resolution = region.length() / self.TILE_LEN;\n                var w_scale = 1 / resolution;\n                var mode = self.model.get(\"mode\");\n                $.when(track.data_manager.get_data(region, mode, resolution, {})).then(tile_data => {\n                    var canvas = self.canvas_manager.new_canvas();\n                    canvas.width = self.TILE_LEN;\n                    canvas.height = track.get_canvas_height(tile_data, mode, w_scale, canvas.width);\n                    track.draw_tile(tile_data, canvas.getContext(\"2d\"), mode, region, w_scale);\n                    $(tile_containers[index])\n                        .empty()\n                        .append(canvas);\n                });\n            });\n        });\n    }\n});\n\n/**\n * Tool input (parameter) that enables both value and sweeping inputs. View is unusual as\n * it augments an existing input form row rather than creates a completely new HTML element.\n */\nvar ToolInputValOrSweepView = Backbone.View.extend({\n    // Template for rendering sweep inputs:\n    number_input_template:\n        '<div class=\"form-row-input sweep\">' +\n        '<input class=\"min\" type=\"text\" size=\"6\" value=\"<%= min %>\"> - ' +\n        '<input class=\"max\" type=\"text\" size=\"6\" value=\"<%= max %>\">' +\n        ' samples: <input class=\"num_samples\" type=\"text\" size=\"1\" value=\"<%= num_samples %>\">' +\n        \"</div>\",\n\n    select_input_template: '<div class=\"form-row-input sweep\"><%= options %></div>',\n\n    initialize: function(options) {\n        this.$el = options.tool_row;\n        this.render();\n    },\n\n    render: function() {\n        var input = this.model;\n        var type = input.get(\"type\");\n        var single_input_row = this.$el.find(\".form-row-input\");\n        var sweep_inputs_row = null;\n\n        // Update tool inputs as single input changes.\n        single_input_row.find(\":input\").change(function() {\n            input.set(\"value\", $(this).val());\n        });\n\n        // Add row for parameter sweep inputs.\n        if (input instanceof tools.IntegerToolParameter) {\n            sweep_inputs_row = $(_.template(this.number_input_template)(this.model.toJSON()));\n        } else if (input instanceof tools.SelectToolParameter) {\n            var options = _.map(this.$el.find(\"select option\"), option => $(option).val());\n\n            var options_text = options.join(\", \");\n            sweep_inputs_row = $(\n                _.template(this.select_input_template)({\n                    options: options_text\n                })\n            );\n        }\n        sweep_inputs_row.insertAfter(single_input_row);\n\n        // Add buttons for adding/removing parameter.\n        var self = this;\n\n        var menu = mod_icon_btn.create_icon_buttons_menu(\n            [\n                {\n                    title: _l(\"Add parameter to tree\"),\n                    icon_class: \"plus-button\",\n                    on_click: function() {\n                        input.set(\"in_ptree\", true);\n                        single_input_row.hide();\n                        sweep_inputs_row.show();\n                        $(this).hide();\n                        self.$el.find(\".icon-button.toggle\").show();\n                    }\n                },\n                {\n                    title: _l(\"Remove parameter from tree\"),\n                    icon_class: \"toggle\",\n                    on_click: function() {\n                        // Remove parameter from tree params where name matches clicked paramter.\n                        input.set(\"in_ptree\", false);\n                        sweep_inputs_row.hide();\n                        single_input_row.show();\n                        $(this).hide();\n                        self.$el.find(\".icon-button.plus-button\").show();\n                    }\n                }\n            ],\n            {}\n        );\n\n        this.$el.prepend(menu.$el);\n\n        // Show/hide input rows and icons depending on whether parameter is in the tree.\n        if (input.get(\"in_ptree\")) {\n            single_input_row.hide();\n            self.$el.find(\".icon-button.plus-button\").hide();\n        } else {\n            self.$el.find(\".icon-button.toggle\").hide();\n            sweep_inputs_row.hide();\n        }\n\n        // Update input's min, max, number of samples as values change.\n        _.each([\"min\", \"max\", \"num_samples\"], attr => {\n            sweep_inputs_row.find(`.${attr}`).change(function() {\n                input.set(attr, parseFloat($(this).val()));\n            });\n        });\n    }\n});\n\nvar ToolParameterTreeDesignView = Backbone.View.extend({\n    className: \"tree-design\",\n\n    initialize: function(options) {\n        this.render();\n    },\n\n    render: function() {\n        // Start with tool form view.\n        var tool_form_view = new tools.ToolFormView({\n            model: this.model.get(\"tool\")\n        });\n        tool_form_view.render();\n        this.$el.append(tool_form_view.$el);\n\n        // Set up views for each tool input.\n        var self = this;\n\n        var inputs = self.model.get(\"tool\").get(\"inputs\");\n        this.$el\n            .find(\".form-row\")\n            .not(\".form-actions\")\n            .each(function(i) {\n                var input_view = new ToolInputValOrSweepView({\n                    model: inputs.at(i),\n                    tool_row: $(this)\n                });\n            });\n    }\n});\n\n/**\n * Displays and updates parameter tree.\n */\nvar ToolParameterTreeView = Backbone.View.extend({\n    className: \"tool-parameter-tree\",\n\n    initialize: function(options) {\n        // When tree data changes, re-render.\n        this.model.on(\"change:tree_data\", this.render, this);\n    },\n\n    render: function() {\n        // Start fresh.\n        this.$el.children().remove();\n\n        var tree_params = this.model.get_tree_params();\n        if (!tree_params.length) {\n            return;\n        }\n\n        // Set width, height based on params and samples.\n        this.width = 100 * (2 + tree_params.length);\n        this.height = 15 * this.model.get_num_leaves();\n\n        var self = this;\n\n        // Layout tree.\n        var cluster = d3.layout.cluster().size([this.height, this.width - 160]);\n\n        var diagonal = d3.svg.diagonal().projection(d => [d.y, d.x]);\n\n        // Layout nodes.\n        var nodes = cluster.nodes(this.model.get(\"tree_data\"));\n\n        // Setup and add labels for tree levels.\n        var param_depths = _.uniq(_.pluck(nodes, \"y\"));\n        _.each(tree_params, (param, index) => {\n            var x = param_depths[index + 1];\n            var center_left = $(\"#center\").position().left;\n            self.$el.append(\n                $(\"<div>\")\n                    .addClass(\"label\")\n                    .text(param.get(\"label\"))\n                    .css(\"left\", x + center_left)\n            );\n        });\n\n        // Set up vis element.\n        var vis = d3\n            .select(this.$el[0])\n            .append(\"svg\")\n            .attr(\"width\", this.width)\n            .attr(\"height\", this.height + 30)\n            .append(\"g\")\n            .attr(\"transform\", \"translate(40, 20)\");\n\n        // Draw links.\n        var link = vis\n            .selectAll(\"path.link\")\n            .data(cluster.links(nodes))\n            .enter()\n            .append(\"path\")\n            .attr(\"class\", \"link\")\n            .attr(\"d\", diagonal);\n\n        // Draw nodes.\n        var node = vis\n            .selectAll(\"g.node\")\n            .data(nodes)\n            .enter()\n            .append(\"g\")\n            .attr(\"class\", \"node\")\n            .attr(\"transform\", d => `translate(${d.y},${d.x})`)\n            .on(\"mouseover\", a_node => {\n                var connected_node_ids = _.pluck(self.model.get_connected_nodes(a_node), \"id\");\n                // TODO: probably can use enter() to do this more easily.\n                node.filter(d => _.find(connected_node_ids, id => id === d.id) !== undefined).style(\"fill\", \"#f00\");\n            })\n            .on(\"mouseout\", () => {\n                node.style(\"fill\", \"#000\");\n            });\n\n        node.append(\"circle\").attr(\"r\", 9);\n\n        node\n            .append(\"text\")\n            .attr(\"dx\", d => (d.children ? -12 : 12))\n            .attr(\"dy\", 3)\n            .attr(\"text-anchor\", d => (d.children ? \"end\" : \"start\"))\n            .text(d => d.name);\n    }\n});\n\n/**\n * Sweepster visualization view. View requires rendering in 3-panel setup for now.\n */\nvar SweepsterVisualizationView = Backbone.View.extend({\n    className: \"Sweepster\",\n\n    helpText:\n        \"<div><h4>Getting Started</h4>\" +\n        \"<ol><li>Create a parameter tree by using the icons next to the tool's parameter names to add or remove parameters.\" +\n        \"<li>Adjust the tree by using parameter inputs to select min, max, and number of samples\" +\n        \"<li>Run the tool with different settings by clicking on tree nodes\" +\n        \"</ol></div>\",\n\n    initialize: function(options) {\n        this.canvas_manager = new visualization.CanvasManager(this.$el.parents(\"body\"));\n        this.tool_param_tree_view = new ToolParameterTreeView({\n            model: this.model.get(\"parameter_tree\")\n        });\n        this.track_collection_container = $(\"<table/>\").addClass(\"tracks\");\n\n        // Handle node clicks for tree data.\n        this.model.get(\"parameter_tree\").on(\"change:tree_data\", this.handle_node_clicks, this);\n\n        // Each track must have a view so it has a canvas manager.\n        var self = this;\n        this.model.get(\"tracks\").each(track => {\n            track.get(\"track\").view = self;\n        });\n\n        // Set block, reverse strand block colors; these colors will be used for all tracks.\n        this.config = config.ConfigSettingCollection.from_models_and_saved_values(\n            [\n                {\n                    key: \"name\",\n                    label: \"Name\",\n                    type: \"text\",\n                    default_value: \"\"\n                },\n                {\n                    key: \"a_color\",\n                    label: \"A Color\",\n                    type: \"color\",\n                    default_value: \"#FF0000\"\n                },\n                {\n                    key: \"c_color\",\n                    label: \"C Color\",\n                    type: \"color\",\n                    default_value: \"#00FF00\"\n                },\n                {\n                    key: \"g_color\",\n                    label: \"G Color\",\n                    type: \"color\",\n                    default_value: \"#0000FF\"\n                },\n                {\n                    key: \"t_color\",\n                    label: \"T Color\",\n                    type: \"color\",\n                    default_value: \"#FF00FF\"\n                },\n                {\n                    key: \"n_color\",\n                    label: \"N Color\",\n                    type: \"color\",\n                    default_value: \"#AAAAAA\"\n                },\n                {\n                    key: \"block_color\",\n                    label: \"Block color\",\n                    type: \"color\"\n                },\n                {\n                    key: \"reverse_strand_color\",\n                    label: \"Antisense strand color\",\n                    type: \"color\"\n                }\n            ],\n            {}\n        );\n    },\n\n    render: function() {\n        // Render tree design view in left panel.\n        var tree_design_view = new ToolParameterTreeDesignView({\n            model: this.model.get(\"parameter_tree\")\n        });\n\n        $(\"#left\").append(tree_design_view.$el);\n\n        // Render track collection container/view in right panel.\n        var self = this;\n\n        var regions = self.model.get(\"regions\");\n        var tr = $(\"<tr/>\").appendTo(this.track_collection_container);\n\n        regions.each(region => {\n            tr.append($(\"<th>\").text(region.toString()));\n        });\n        tr\n            .children()\n            .first()\n            .attr(\"colspan\", 2);\n\n        var tracks_div = $(\"<div>\").addClass(\"tiles\");\n        $(\"#right\").append(tracks_div.append(this.track_collection_container));\n\n        self.model.get(\"tracks\").each(track => {\n            self.add_track(track);\n        });\n\n        // -- Render help and tool parameter tree in center panel. --\n\n        // Help includes text and a close button.\n        var help_div = $(this.helpText).addClass(\"help\");\n\n        var close_button = mod_icon_btn.create_icon_buttons_menu([\n            {\n                title: _l(\"Close\"),\n                icon_class: \"cross-circle\",\n                on_click: function() {\n                    $(\".tooltip\").remove();\n                    help_div.remove();\n                }\n            }\n        ]);\n\n        help_div.prepend(close_button.$el.css(\"float\", \"right\"));\n        $(\"#center\").append(help_div);\n\n        // Parameter tree:\n        this.tool_param_tree_view.render();\n        $(\"#center\").append(this.tool_param_tree_view.$el);\n\n        // Set up handler for tree node clicks.\n        this.handle_node_clicks();\n\n        // Set up visualization menu.\n        var menu = mod_icon_btn.create_icon_buttons_menu(\n            [\n                // Save.\n                /*\n                { icon_class: 'disk--arrow', title: 'Save', on_click: function() {\n                    // Show saving dialog box\n                    show_modal(\"Saving...\", \"progress\");\n\n                    viz.save().success(function(vis_info) {\n                        hide_modal();\n                        viz.set({\n                            'id': vis_info.vis_id,\n                            'has_changes': false\n                        });\n                    })\n                    .error(function() {\n                        show_modal( \"Could Not Save\", \"Could not save visualization. Please try again later.\",\n                                    { \"Close\" : hide_modal } );\n                    });\n                } },\n                */\n                // Change track modes.\n                {\n                    icon_class: \"chevron-expand\",\n                    title: \"Set display mode\"\n                },\n                // Close viz.\n                {\n                    icon_class: \"cross-circle\",\n                    title: _l(\"Close\"),\n                    on_click: function() {\n                        window.location = \"${h.url_for( controller='visualization', action='list' )}\";\n                    }\n                }\n            ],\n            {\n                tooltip_config: { placement: \"bottom\" }\n            }\n        );\n\n        // Create mode selection popup. Mode selection changes default mode and mode for all tracks.\n        var modes = [\"Squish\", \"Pack\"];\n\n        var mode_mapping = {};\n        _.each(modes, mode => {\n            mode_mapping[mode] = () => {\n                self.model.set(\"default_mode\", mode);\n                self.model.get(\"tracks\").each(track => {\n                    track.set(\"mode\", mode);\n                });\n            };\n        });\n\n        make_popupmenu(menu.$el.find(\".chevron-expand\"), mode_mapping);\n\n        menu.$el.attr(\"style\", \"float: right\");\n        $(\"#right .unified-panel-header-inner\").append(menu.$el);\n    },\n\n    get_base_color: function(base) {\n        return this.config.get_value(`${base.toLowerCase()}_color`) || this.config.get_value(\"n_color\");\n    },\n\n    run_tool_on_dataset: function(settings) {\n        var tool = this.model.get(\"tool\");\n        var tool_name = tool.get(\"name\");\n        var dataset = this.model.get(\"dataset\");\n        tool.set_input_values(settings.get(\"values\"));\n        $.when(tool.rerun(dataset)).then(outputs => {\n            // TODO.\n        });\n\n        show_modal(\n            `Running ${tool_name} on complete dataset`,\n            `${tool_name} is running on dataset '${dataset.get(\"name\")}'. Outputs are in the dataset's history.`,\n            {\n                Ok: function() {\n                    hide_modal();\n                }\n            }\n        );\n    },\n\n    /**\n     * Add track to model and view.\n     */\n    add_track: function(pm_track) {\n        var self = this;\n        var param_tree = this.model.get(\"parameter_tree\");\n\n        // Add track to model.\n        self.model.add_track(pm_track);\n\n        var track_view = new SweepsterTrackView({\n            model: pm_track,\n            canvas_manager: self.canvas_manager\n        });\n        track_view.on(\"run_on_dataset\", self.run_tool_on_dataset, self);\n        self.track_collection_container.append(track_view.$el);\n        track_view.$el.hover(\n            () => {\n                var settings_leaf = param_tree.get_leaf(pm_track.get(\"settings\").get(\"values\"));\n                var connected_node_ids = _.pluck(param_tree.get_connected_nodes(settings_leaf), \"id\");\n\n                // TODO: can do faster with enter?\n                d3\n                    .select(self.tool_param_tree_view.$el[0])\n                    .selectAll(\"g.node\")\n                    .filter(d => _.find(connected_node_ids, id => id === d.id) !== undefined)\n                    .style(\"fill\", \"#f00\");\n            },\n            () => {\n                d3\n                    .select(self.tool_param_tree_view.$el[0])\n                    .selectAll(\"g.node\")\n                    .style(\"fill\", \"#000\");\n            }\n        );\n        return pm_track;\n    },\n\n    /**\n     * Sets up handling when tree nodes are clicked. When a node is clicked, the tool is run for each of\n     * the settings defined by the node's subtree and tracks are added for each run.\n     */\n    handle_node_clicks: function() {\n        // When node clicked in tree, run tool and add tracks to model.\n        var self = this;\n\n        var param_tree = this.model.get(\"parameter_tree\");\n        var regions = this.model.get(\"regions\");\n\n        var node = d3.select(this.tool_param_tree_view.$el[0]).selectAll(\"g.node\");\n\n        node.on(\"click\", (d, i) => {\n            // Get all settings corresponding to node.\n            var tool = self.model.get(\"tool\");\n\n            var dataset = self.model.get(\"dataset\");\n            var all_settings = param_tree.get_node_settings(d);\n            var run_jobs_deferred = $.Deferred();\n\n            // Do not allow 10+ jobs to be run.\n            if (all_settings.length >= 10) {\n                show_modal(\n                    \"Whoa there cowboy!\",\n                    `You clicked on a node to try ${self.model.get(\"tool\").get(\"name\")} with ${\n                        all_settings.length\n                    } different combinations of settings. You can only run 10 jobs at a time.`,\n                    {\n                        Ok: function() {\n                            hide_modal();\n                            run_jobs_deferred.resolve(false);\n                        }\n                    }\n                );\n            } else {\n                run_jobs_deferred.resolve(true);\n            }\n\n            // Take action when deferred resolves.\n            $.when(run_jobs_deferred).then(run_jobs => {\n                if (!run_jobs) {\n                    return;\n                }\n\n                // Create and add tracks for each settings group.\n                var new_tracks = _.map(all_settings, settings => {\n                    var pm_track = new SweepsterTrack({\n                        settings: settings,\n                        regions: regions,\n                        mode: self.model.get(\"default_mode\")\n                    });\n                    self.add_track(pm_track);\n                    return pm_track;\n                });\n\n                // For each track, run tool using track's settings and update track.\n                _.each(new_tracks, (pm_track, index) => {\n                    setTimeout(() => {\n                        // Set inputs and run tool.\n                        tool.set_input_values(pm_track.get(\"settings\").get(\"values\"));\n                        $.when(tool.rerun(dataset, regions)).then(output => {\n                            // HACKish: output is an HDA with track config attribute. To create a track\n                            // that works correctly with Backbone relational, it is necessary to\n                            // use a modified version of the track config.\n                            var dataset = output.first();\n\n                            var track_config = dataset.get(\"track_config\");\n                            // Set dataset to be the tool's output.\n                            track_config.dataset = dataset;\n                            // Set tool to null so that it is not unpacked; unpacking it messes with\n                            // the tool parameters and parameter tree.\n                            track_config.tool = null;\n\n                            track_config.prefs = self.config.to_key_value_dict();\n\n                            // Create and add track for output dataset.\n                            var track_obj = tracks.object_from_template(track_config, self, null);\n                            track_obj.init_for_tool_data();\n\n                            pm_track.set(\"track\", track_obj);\n                        });\n                    }, index * 10000);\n                });\n            });\n        });\n    }\n});\n\nexport default {\n    SweepsterVisualization: SweepsterVisualization,\n    SweepsterVisualizationView: SweepsterVisualizationView\n};\n"]}