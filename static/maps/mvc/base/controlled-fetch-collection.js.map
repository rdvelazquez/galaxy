{"version":3,"sources":["mvc/base/controlled-fetch-collection.js"],"names":["_","Backbone","ControlledFetchCollection","Collection","extend","initialize","models","options","prototype","call","setOrder","order","silent","_setUpListeners","on","sort","fetch","_buildFetchOptions","Galaxy","debug","clone","traditional","data","_buildFetchData","filters","_buildFetchFilters","isEmpty","_fetchFiltersToAjaxData","defaults","pick","_fetchParams","filterMap","q","qv","each","v","k","undefined","push","reset","allFetched","comparators","update_time","buildComparator","ascending","create_time","collection","comparator","isUndefined","Error","trigger","PaginatedCollection","limitPerPage","currentPage","getTotalItemCount","length","shouldPaginate","getLastPage","Math","floor","getPageCount","getPageLimitOffset","pageNum","constrainPageNum","limit","offset","max","min","fetchPage","self","always","fetchCurrentPage","fetchPrevPage","fetchNextPage","InfinitelyScrollingCollection","limitOnFirstFetch","limitPerFetch","lastFetched","remove","fetchFirst","fetchMore","jQuery","when","done","_postFetchMore","fetchedData","numFetched","isArray","fetchAll"],"mappings":"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","file":"../../../scripts/mvc/base/controlled-fetch-collection.js","sourcesContent":["import * as _ from \"libs/underscore\";\nimport * as Backbone from \"libs/backbone\";\nimport BASE_MVC from \"mvc/base-mvc\";\n\n/* global Galaxy */\n/* global jQuery */\n\n//=============================================================================\n/**\n * A Collection that can be limited/offset/re-ordered/filtered.\n * @type {Backbone.Collection}\n */\nvar ControlledFetchCollection = Backbone.Collection.extend({\n    /** call setOrder on initialization to build the comparator based on options */\n    initialize: function(models, options) {\n        Backbone.Collection.prototype.initialize.call(this, models, options);\n        this.setOrder(options.order || this.order, { silent: true });\n    },\n\n    /** set up to track order changes and re-sort when changed */\n    _setUpListeners: function() {\n        return this.on({\n            \"changed-order\": this.sort\n        });\n    },\n\n    /** override to provide order and offsets based on instance vars, set limit if passed,\n     *  and set allFetched/fire 'all-fetched' when xhr returns\n     */\n    fetch: function(options) {\n        options = this._buildFetchOptions(options);\n        Galaxy.debug(\"fetch options:\", options);\n        return Backbone.Collection.prototype.fetch.call(this, options);\n    },\n\n    /** build ajax data/parameters from options */\n    _buildFetchOptions: function(options) {\n        // note: we normally want options passed in to override the defaults built here\n        // so most of these fns will generate defaults\n        options = _.clone(options) || {};\n\n        // jquery ajax option; allows multiple q/qv for filters (instead of 'q[]')\n        options.traditional = true;\n\n        // options.data\n        // we keep limit, offset, etc. in options *as well as move it into data* because:\n        // - it makes fetch calling convenient to add it to a single options map (instead of as mult. args)\n        // - it allows the std. event handlers (for fetch, etc.) to have access\n        //   to the pagination options too\n        //      (i.e. this.on( 'sync', function( options ){ if( options.limit ){ ... } }))\n        // however, when we send to xhr/jquery we copy them to data also so that they become API query params\n        options.data = options.data || this._buildFetchData(options);\n        Galaxy.debug(\"data:\", options.data);\n\n        // options.data.filters --> options.data.q, options.data.qv\n        var filters = this._buildFetchFilters(options);\n        Galaxy.debug(\"filters:\", filters);\n        if (!_.isEmpty(filters)) {\n            _.extend(options.data, this._fetchFiltersToAjaxData(filters));\n        }\n        Galaxy.debug(\"data:\", options.data);\n        return options;\n    },\n\n    /** Build the dictionary to send to fetch's XHR as data */\n    _buildFetchData: function(options) {\n        var defaults = {};\n        if (this.order) {\n            defaults.order = this.order;\n        }\n        return _.defaults(_.pick(options, this._fetchParams), defaults);\n    },\n\n    /** These attribute keys are valid params to fetch/API-index */\n    _fetchParams: [\n        /** model dependent string to control the order of models returned */\n        \"order\",\n        /** limit the number of models returned from a fetch */\n        \"limit\",\n        /** skip this number of models when fetching */\n        \"offset\",\n        /** what series of attributes to return (model dependent) */\n        \"view\",\n        /** individual keys to return for the models (see api/histories.index) */\n        \"keys\"\n    ],\n\n    /** add any needed filters here based on collection state */\n    _buildFetchFilters: function(options) {\n        // override\n        return _.clone(options.filters || {});\n    },\n\n    /** Convert dictionary filters to qqv style arrays */\n    _fetchFiltersToAjaxData: function(filters) {\n        // return as a map so ajax.data can extend from it\n        var filterMap = {\n            q: [],\n            qv: []\n        };\n        _.each(filters, (v, k) => {\n            // don't send if filter value is empty\n            if (v === undefined || v === \"\") {\n                return;\n            }\n            // json to python\n            if (v === true) {\n                v = \"True\";\n            }\n            if (v === false) {\n                v = \"False\";\n            }\n            if (v === null) {\n                v = \"None\";\n            }\n            // map to k/v arrays (q/qv)\n            filterMap.q.push(k);\n            filterMap.qv.push(v);\n        });\n        return filterMap;\n    },\n\n    /** override to reset allFetched flag to false */\n    reset: function(models, options) {\n        this.allFetched = false;\n        return Backbone.Collection.prototype.reset.call(this, models, options);\n    },\n\n    // ........................................................................ order\n    order: null,\n\n    /** @type {Object} map of collection available sorting orders containing comparator fns */\n    comparators: {\n        update_time: BASE_MVC.buildComparator(\"update_time\", {\n            ascending: false\n        }),\n        \"update_time-asc\": BASE_MVC.buildComparator(\"update_time\", {\n            ascending: true\n        }),\n        create_time: BASE_MVC.buildComparator(\"create_time\", {\n            ascending: false\n        }),\n        \"create_time-asc\": BASE_MVC.buildComparator(\"create_time\", {\n            ascending: true\n        })\n    },\n\n    /** set the order and comparator for this collection then sort with the new order\n     *  @event 'changed-order' passed the new order and the collection\n     */\n    setOrder: function(order, options) {\n        options = options || {};\n        var collection = this;\n        var comparator = collection.comparators[order];\n        if (_.isUndefined(comparator)) {\n            throw new Error(`unknown order: ${order}`);\n        }\n        // if( _.isUndefined( comparator ) ){ return; }\n        if (comparator === collection.comparator) {\n            return;\n        }\n\n        collection.order = order;\n        collection.comparator = comparator;\n\n        if (!options.silent) {\n            collection.trigger(\"changed-order\", options);\n        }\n        return collection;\n    }\n});\n\n//=============================================================================\n/**\n *\n */\nvar PaginatedCollection = ControlledFetchCollection.extend({\n    /** @type {Number} limit used for each page's fetch */\n    limitPerPage: 500,\n\n    initialize: function(models, options) {\n        ControlledFetchCollection.prototype.initialize.call(this, models, options);\n        this.currentPage = options.currentPage || 0;\n    },\n\n    getTotalItemCount: function() {\n        return this.length;\n    },\n\n    shouldPaginate: function() {\n        return this.getTotalItemCount() >= this.limitPerPage;\n    },\n\n    getLastPage: function() {\n        return Math.floor(this.getTotalItemCount() / this.limitPerPage);\n    },\n\n    getPageCount: function() {\n        return this.getLastPage() + 1;\n    },\n\n    getPageLimitOffset: function(pageNum) {\n        pageNum = this.constrainPageNum(pageNum);\n        return {\n            limit: this.limitPerPage,\n            offset: pageNum * this.limitPerPage\n        };\n    },\n\n    constrainPageNum: function(pageNum) {\n        return Math.max(0, Math.min(pageNum, this.getLastPage()));\n    },\n\n    /** fetch the next page of data */\n    fetchPage: function(pageNum, options) {\n        var self = this;\n        pageNum = self.constrainPageNum(pageNum);\n        self.currentPage = pageNum;\n        options = _.defaults(options || {}, self.getPageLimitOffset(pageNum));\n\n        self.trigger(\"fetching-more\");\n        return self.fetch(options).always(() => {\n            self.trigger(\"fetching-more-done\");\n        });\n    },\n\n    fetchCurrentPage: function(options) {\n        return this.fetchPage(this.currentPage, options);\n    },\n\n    fetchPrevPage: function(options) {\n        return this.fetchPage(this.currentPage - 1, options);\n    },\n\n    fetchNextPage: function(options) {\n        return this.fetchPage(this.currentPage + 1, options);\n    }\n});\n\n//=============================================================================\n/**\n * A Collection that will load more elements without reseting.\n */\nvar InfinitelyScrollingCollection = ControlledFetchCollection.extend({\n    /** @type {Number} limit used for the first fetch (or a reset) */\n    limitOnFirstFetch: null,\n    /** @type {Number} limit used for each subsequent fetch */\n    limitPerFetch: 100,\n\n    initialize: function(models, options) {\n        ControlledFetchCollection.prototype.initialize.call(this, models, options);\n        /** @type {Integer} number of contents to return from the first fetch */\n        this.limitOnFirstFetch = options.limitOnFirstFetch || this.limitOnFirstFetch;\n        /** @type {Integer} limit for every fetch after the first */\n        this.limitPerFetch = options.limitPerFetch || this.limitPerFetch;\n        /** @type {Boolean} are all contents fetched? */\n        this.allFetched = false;\n        /** @type {Integer} what was the offset of the last content returned */\n        this.lastFetched = options.lastFetched || 0;\n    },\n\n    /** build ajax data/parameters from options */\n    _buildFetchOptions: function(options) {\n        // options (options for backbone.fetch and jquery.ajax generally)\n        // backbone option; false here to make fetching an addititive process\n        options.remove = options.remove || false;\n        return ControlledFetchCollection.prototype._buildFetchOptions.call(this, options);\n    },\n\n    /** fetch the first 'page' of data */\n    fetchFirst: function(options) {\n        Galaxy.debug(\"ControlledFetchCollection.fetchFirst:\", options);\n        options = options ? _.clone(options) : {};\n        this.allFetched = false;\n        this.lastFetched = 0;\n        return this.fetchMore(\n            _.defaults(options, {\n                reset: true,\n                limit: this.limitOnFirstFetch\n            })\n        );\n    },\n\n    /** fetch the next page of data */\n    fetchMore: function(options) {\n        Galaxy.debug(\"ControlledFetchCollection.fetchMore:\", options);\n        options = _.clone(options || {});\n        var collection = this;\n\n        Galaxy.debug(\"fetchMore, options.reset:\", options.reset);\n        if (!options.reset && collection.allFetched) {\n            return jQuery.when();\n        }\n\n        // TODO: this fails in the edge case where\n        //  the first fetch offset === limit (limit 4, offset 4, collection.length 4)\n        if (options.reset) {\n            options.offset = 0;\n        } else if (options.offset === undefined) {\n            options.offset = collection.lastFetched;\n        }\n        var limit = (options.limit = options.limit || collection.limitPerFetch || null);\n        Galaxy.debug(\"fetchMore, limit:\", limit, \"offset:\", options.offset);\n\n        collection.trigger(\"fetching-more\");\n        return (\n            collection\n                .fetch(options)\n                .always(() => {\n                    collection.trigger(\"fetching-more-done\");\n                })\n                // maintain allFetched flag and trigger if all were fetched this time\n                .done(function _postFetchMore(fetchedData) {\n                    var numFetched = _.isArray(fetchedData) ? fetchedData.length : 0;\n                    collection.lastFetched += numFetched;\n                    Galaxy.debug(\"fetchMore, lastFetched:\", collection.lastFetched);\n                    // anything less than a full page means we got all there is to get\n                    if (!limit || numFetched < limit) {\n                        collection.allFetched = true;\n                        collection.trigger(\"all-fetched\", this);\n                    }\n                })\n        );\n    },\n\n    /** fetch all the collection */\n    fetchAll: function(options) {\n        // whitelist options to prevent allowing limit/offset/filters\n        // (use vanilla fetch instead)\n        options = options || {};\n        var self = this;\n        options = _.pick(options, \"silent\");\n        options.filters = {};\n        return self.fetch(options).done(() => {\n            self.allFetched = true;\n            self.trigger(\"all-fetched\", self);\n        });\n    }\n});\n\n//==============================================================================\nexport default {\n    ControlledFetchCollection: ControlledFetchCollection,\n    PaginatedCollection: PaginatedCollection,\n    InfinitelyScrollingCollection: InfinitelyScrollingCollection\n};\n"]}