{"version":3,"sources":["mvc/collection/collection-view-edit.js"],"names":["_super","CollectionView","CollectionViewEdit","extend","DatasetDCEViewClass","DatasetDCEListItemEdit","NestedDCDCEViewClass","NestedDCDCEListItemEdit","getNestedDCDCEViewClass","foldoutPanelClass","initialize","attributes","prototype","call","_setUpBehaviors","$where","$el","model","Galaxy","user","isAnonymous","tagsEditorShown","panel","nameSelector","find","attr","tooltip","placement","make_text_editable","on_finish","newName","previousName","get","text","save","name","fail","previous","tagsEditor","TagsEditor","el","onshowFirstTime","render","usePrompt","toggle","toString"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AASA;;;;AAIA;;AAEA,QAAIA,SAAS,yBAAQC,cAArB;AACA,QAAIC,qBAAqBF,OAAOG,MAAP;AACrB,0CAAuC;AACnC;;AAEA;AACA;;AAEA;AACAC,6BAAqB,2BAAQC,sBAPM;AAQnC;AACAC,8BAAsB,2BAAQC,uBATK;;AAWnCC,iCAAyB,mCAAW;AAChC,mBAAO,2BAAQD,uBAAR,CAAgCJ,MAAhC,CAAuC;AAC1CM,mCAAmBP;AADuB,aAAvC,CAAP;AAGH,SAfkC;;AAiBnC;AACA;;;AAGAQ,oBAAY,oBAASC,UAAT,EAAqB;AAC7BX,mBAAOY,SAAP,CAAiBF,UAAjB,CAA4BG,IAA5B,CAAiC,IAAjC,EAAuCF,UAAvC;AACH,SAvBkC;;AAyBnC;;AAEAG,yBAAiB,yBAASC,MAAT,EAAiB;AAC9BA,qBAASA,UAAU,KAAKC,GAAxB;AACAhB,mBAAOY,SAAP,CAAiBE,eAAjB,CAAiCD,IAAjC,CAAsC,IAAtC,EAA4CE,MAA5C;AACA,gBAAI,CAAC,KAAKE,KAAV,EAAiB;AACb;AACH;;AAED;AACA,gBAAI,CAACC,OAAOC,IAAR,IAAgBD,OAAOC,IAAP,CAAYC,WAAZ,EAApB,EAA+C;AAC3C;AACH;;AAED,iBAAKC,eAAL,GAAuB,IAAvB;;AAEA;AACA,gBAAIC,QAAQ,IAAZ;;AAEA,gBAAIC,eAAe,mBAAnB;AACAR,mBACKS,IADL,CACUD,YADV,EAEKE,IAFL,CAEU,OAFV,EAEmB,4BAAG,4BAAH,CAFnB,EAGKC,OAHL,CAGa,EAAEC,WAAW,QAAb,EAHb,EAIKC,kBAJL,CAIwB;AAChBC,2BAAW,mBAASC,OAAT,EAAkB;AACzB,wBAAIC,eAAeT,MAAML,KAAN,CAAYe,GAAZ,CAAgB,MAAhB,CAAnB;AACA,wBAAIF,WAAWA,YAAYC,YAA3B,EAAyC;AACrCT,8BAAMN,GAAN,CAAUQ,IAAV,CAAeD,YAAf,EAA6BU,IAA7B,CAAkCH,OAAlC;AACAR,8BAAML,KAAN,CAAYiB,IAAZ,CAAiB,EAAEC,MAAML,OAAR,EAAjB,EAAoCM,IAApC,CAAyC,YAAM;AAC3Cd,kCAAMN,GAAN,CAAUQ,IAAV,CAAeD,YAAf,EAA6BU,IAA7B,CAAkCX,MAAML,KAAN,CAAYoB,QAAZ,CAAqB,MAArB,CAAlC;AACH,yBAFD;AAGH,qBALD,MAKO;AACHf,8BAAMN,GAAN,CAAUQ,IAAV,CAAeD,YAAf,EAA6BU,IAA7B,CAAkCF,YAAlC;AACH;AACJ;AAXe,aAJxB;AAiBA,iBAAKO,UAAL,GAAkB,IAAI,cAAKC,UAAT,CAAoB;AAClCtB,uBAAO,KAAKA,KADsB;AAElCuB,oBAAIzB,OAAOS,IAAP,CAAY,eAAZ,CAF8B;AAGlCiB,iCAAiB,2BAAW;AACxB,yBAAKC,MAAL;AACH,iBALiC;AAMlCC,2BAAW;AANuB,aAApB,CAAlB;AAQA,iBAAKL,UAAL,CAAgBM,MAAhB,CAAuB,IAAvB;AACH,SAvEkC;;AAyEnC;AACA;AACAC,kBAAU,oBAAW;AACjB,4CAA6B,KAAK5B,KAAL,GAAa,KAAKA,KAAL,CAAWe,GAAX,CAAe,MAAf,CAAb,GAAsC,EAAnE;AACH;AA7EkC,KADlB,CAAzB;;AAkFA;sBACe;AACX9B,4BAAoBA;AADT,K","file":"../../../scripts/mvc/collection/collection-view-edit.js","sourcesContent":["import DC_VIEW from \"mvc/collection/collection-view\";\nimport DC_MODEL from \"mvc/collection/collection-model\";\nimport DC_EDIT from \"mvc/collection/collection-li-edit\";\nimport BASE_MVC from \"mvc/base-mvc\";\nimport TAGS from \"mvc/tag\";\nimport faIconButton from \"ui/fa-icon-button\";\nimport _l from \"utils/localization\";\nimport \"ui/editable-text\";\n\n/* =============================================================================\nTODO:\n\n============================================================================= */\n/** @class editable View/Controller for a dataset collection.\n */\nvar _super = DC_VIEW.CollectionView;\nvar CollectionViewEdit = _super.extend(\n    /** @lends CollectionView.prototype */ {\n        //MODEL is either a DatasetCollection (or subclass) or a DatasetCollectionElement (list of pairs)\n\n        /** logger used to record this.log messages, commonly set to console */\n        //logger              : console,\n\n        /** sub view class used for datasets */\n        DatasetDCEViewClass: DC_EDIT.DatasetDCEListItemEdit,\n        /** sub view class used for nested collections */\n        NestedDCDCEViewClass: DC_EDIT.NestedDCDCEListItemEdit,\n\n        getNestedDCDCEViewClass: function() {\n            return DC_EDIT.NestedDCDCEListItemEdit.extend({\n                foldoutPanelClass: CollectionViewEdit\n            });\n        },\n\n        // ......................................................................... SET UP\n        /** Set up the view, set up storage, bind listeners to HistoryContents events\n         *  @param {Object} attributes optional settings for the panel\n         */\n        initialize: function(attributes) {\n            _super.prototype.initialize.call(this, attributes);\n        },\n\n        /** In this override, make the collection name editable\n         */\n        _setUpBehaviors: function($where) {\n            $where = $where || this.$el;\n            _super.prototype._setUpBehaviors.call(this, $where);\n            if (!this.model) {\n                return;\n            }\n\n            // anon users shouldn't have access to any of the following\n            if (!Galaxy.user || Galaxy.user.isAnonymous()) {\n                return;\n            }\n\n            this.tagsEditorShown = true;\n\n            //TODO: extract\n            var panel = this;\n\n            var nameSelector = \"> .controls .name\";\n            $where\n                .find(nameSelector)\n                .attr(\"title\", _l(\"Click to rename collection\"))\n                .tooltip({ placement: \"bottom\" })\n                .make_text_editable({\n                    on_finish: function(newName) {\n                        var previousName = panel.model.get(\"name\");\n                        if (newName && newName !== previousName) {\n                            panel.$el.find(nameSelector).text(newName);\n                            panel.model.save({ name: newName }).fail(() => {\n                                panel.$el.find(nameSelector).text(panel.model.previous(\"name\"));\n                            });\n                        } else {\n                            panel.$el.find(nameSelector).text(previousName);\n                        }\n                    }\n                });\n            this.tagsEditor = new TAGS.TagsEditor({\n                model: this.model,\n                el: $where.find(\".tags-display\"),\n                onshowFirstTime: function() {\n                    this.render();\n                },\n                usePrompt: false\n            });\n            this.tagsEditor.toggle(true);\n        },\n\n        // ........................................................................ misc\n        /** string rep */\n        toString: function() {\n            return `CollectionViewEdit(${this.model ? this.model.get(\"name\") : \"\"})`;\n        }\n    }\n);\n\n//==============================================================================\nexport default {\n    CollectionViewEdit: CollectionViewEdit\n};\n"]}