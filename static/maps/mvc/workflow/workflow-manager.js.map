{"version":3,"sources":["mvc/workflow/workflow-manager.js"],"names":["Toastr","Workflow","app","canvas_container","id_counter","nodes","name","has_changes","active_form_has_changes","workflowOutputLabels","$","extend","prototype","canLabelOutputWith","label","registerOutputLabel","unregisterOutputLabel","updateOutputLabel","fromLabel","toLabel","warning","attemptUpdateOutputLabel","node","outputName","labelWorkflowOutput","nodeView","redrawWorkflowOutputs","create_node","type","title_text","content_id","prebuildNode","add_node","fit_canvas_to_nodes","canvas_manager","draw_overview","activate_node","id","element","attr","workflow","remove_node","active_node","clear_active_node","remove_all","wf","each","k","v","destroy","rectify_workflow_outputs","using_workflow_outputs","has_existing_pjas","workflow_outputs","length","post_job_actions","pja_id","pja","action_type","self","node_changed","pjas_to_rem","push","i","pja_name","output_terminals","ot_id","ot","create_pja","isWorkflowOutput","output_name","action_arguments","reload_active_node","to_simple","input_connections","input_terminals","t","cons","connectors","c","handle1","con_dict","input_subworkflow_step_id","attributes","input","undefined","act","node_data","tool_version","config_form","version","tool_state","errors","position","annotation","uuid","steps","from_simple","data","initialImport_","initialImport","offset","Object","keys","max_id","step","workflow_output","init_field_data","css","top","left","parseInt","Math","max","isArray","l","x","other_node","connect","redraw","addWorkflowOutput","callout","find","Galaxy","root","check_changes_in_active_form","submit","make_inactive","document","activeElement","blur","showAttributes","showForm","make_active","force","showWorkflowParameters","layout","n_pred","successors","j","other","node_ids_by_level","level_parents","pred_k","sk","all_nodes","h_pad","v_pad","ids","sort","a","b","max_width","width","height","_","bounds_for_all_nodes","xmin","Infinity","xmax","ymin","ymax","p","e","min","round_up","n","ceil","fix_delta","new_pos","bounds","parent","xmin_delta","ymin_delta","children"],"mappings":"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","file":"../../../scripts/mvc/workflow/workflow-manager.js","sourcesContent":["import Connector from \"mvc/workflow/workflow-connector\";\nimport * as Toastr from \"libs/toastr\";\nfunction Workflow(app, canvas_container) {\n    this.app = app;\n    this.canvas_container = canvas_container;\n    this.id_counter = 0;\n    this.nodes = {};\n    this.name = null;\n    this.has_changes = false;\n    this.active_form_has_changes = false;\n    this.workflowOutputLabels = {};\n}\n$.extend(Workflow.prototype, {\n    canLabelOutputWith: function(label) {\n        if (label) {\n            return !(label in this.workflowOutputLabels);\n        } else {\n            // empty labels are non-exclusive, so allow this one.\n            return true;\n        }\n    },\n    registerOutputLabel: function(label) {\n        if (label) {\n            this.workflowOutputLabels[label] = true;\n        }\n    },\n    unregisterOutputLabel: function(label) {\n        if (label) {\n            delete this.workflowOutputLabels[label];\n        }\n    },\n    updateOutputLabel: function(fromLabel, toLabel) {\n        if (fromLabel) {\n            this.unregisterOutputLabel(fromLabel);\n        }\n        if (!this.canLabelOutputWith(toLabel)) {\n            Toastr.warning(\n                `Workflow contains duplicate workflow output labels ${toLabel}. This must be fixed before it can be saved.`\n            );\n        }\n        if (toLabel) {\n            this.registerOutputLabel(toLabel);\n        }\n    },\n    attemptUpdateOutputLabel: function(node, outputName, label) {\n        if (this.canLabelOutputWith(label)) {\n            node.labelWorkflowOutput(outputName, label);\n            node.nodeView.redrawWorkflowOutputs();\n            return true;\n        } else {\n            return false;\n        }\n    },\n    create_node: function(type, title_text, content_id) {\n        var node = this.app.prebuildNode(type, title_text, content_id);\n        this.add_node(node);\n        this.fit_canvas_to_nodes();\n        this.app.canvas_manager.draw_overview();\n        this.activate_node(node);\n        return node;\n    },\n    add_node: function(node) {\n        node.id = this.id_counter;\n        node.element.attr(\"id\", `wf-node-step-${node.id}`);\n        this.id_counter++;\n        this.nodes[node.id] = node;\n        this.has_changes = true;\n        node.workflow = this;\n    },\n    remove_node: function(node) {\n        if (this.active_node == node) {\n            this.clear_active_node();\n        }\n        delete this.nodes[node.id];\n        this.has_changes = true;\n    },\n    remove_all: function() {\n        var wf = this;\n        $.each(this.nodes, (k, v) => {\n            v.destroy();\n            wf.remove_node(v);\n        });\n    },\n    rectify_workflow_outputs: function() {\n        // Find out if we're using workflow_outputs or not.\n        var using_workflow_outputs = false;\n        var has_existing_pjas = false;\n        $.each(this.nodes, (k, node) => {\n            if (node.workflow_outputs && node.workflow_outputs.length > 0) {\n                using_workflow_outputs = true;\n            }\n            $.each(node.post_job_actions, (pja_id, pja) => {\n                if (pja.action_type === \"HideDatasetAction\") {\n                    has_existing_pjas = true;\n                }\n            });\n        });\n        if (using_workflow_outputs !== false || has_existing_pjas !== false) {\n            // Using workflow outputs, or has existing pjas.  Remove all PJAs and recreate based on outputs.\n            var self = this;\n            $.each(this.nodes, (k, node) => {\n                if (node.type === \"tool\") {\n                    var node_changed = false;\n                    if (node.post_job_actions === null) {\n                        node.post_job_actions = {};\n                        node_changed = true;\n                    }\n                    var pjas_to_rem = [];\n                    $.each(node.post_job_actions, (pja_id, pja) => {\n                        if (pja.action_type == \"HideDatasetAction\") {\n                            pjas_to_rem.push(pja_id);\n                        }\n                    });\n                    if (pjas_to_rem.length > 0) {\n                        $.each(pjas_to_rem, (i, pja_name) => {\n                            node_changed = true;\n                            delete node.post_job_actions[pja_name];\n                        });\n                    }\n                    if (using_workflow_outputs) {\n                        $.each(node.output_terminals, (ot_id, ot) => {\n                            var create_pja = !node.isWorkflowOutput(ot.name);\n                            if (create_pja === true) {\n                                node_changed = true;\n                                var pja = {\n                                    action_type: \"HideDatasetAction\",\n                                    output_name: ot.name,\n                                    action_arguments: {}\n                                };\n                                node.post_job_actions[`HideDatasetAction${ot.name}`] = null;\n                                node.post_job_actions[`HideDatasetAction${ot.name}`] = pja;\n                            }\n                        });\n                    }\n                    // lastly, if this is the active node, and we made changes, reload the display at right.\n                    if (self.active_node == node && node_changed === true) {\n                        self.reload_active_node();\n                    }\n                }\n            });\n        }\n    },\n    to_simple: function() {\n        var nodes = {};\n        $.each(this.nodes, (i, node) => {\n            var input_connections = {};\n            $.each(node.input_terminals, (k, t) => {\n                input_connections[t.name] = null;\n                // There should only be 0 or 1 connectors, so this is\n                // really a sneaky if statement\n                var cons = [];\n                $.each(t.connectors, (i, c) => {\n                    if (c.handle1) {\n                        var con_dict = {\n                            id: c.handle1.node.id,\n                            output_name: c.handle1.name\n                        };\n                        var input_subworkflow_step_id = t.attributes.input.input_subworkflow_step_id;\n                        if (input_subworkflow_step_id !== undefined) {\n                            con_dict[\"input_subworkflow_step_id\"] = input_subworkflow_step_id;\n                        }\n                        cons[i] = con_dict;\n                        input_connections[t.name] = cons;\n                    }\n                });\n            });\n            var post_job_actions = {};\n            if (node.post_job_actions) {\n                $.each(node.post_job_actions, (i, act) => {\n                    var pja = {\n                        action_type: act.action_type,\n                        output_name: act.output_name,\n                        action_arguments: act.action_arguments\n                    };\n                    post_job_actions[act.action_type + act.output_name] = null;\n                    post_job_actions[act.action_type + act.output_name] = pja;\n                });\n            }\n            if (!node.workflow_outputs) {\n                node.workflow_outputs = [];\n                // Just in case.\n            }\n            var node_data = {\n                id: node.id,\n                type: node.type,\n                content_id: node.content_id,\n                tool_version: node.config_form.version,\n                tool_state: node.tool_state,\n                errors: node.errors,\n                input_connections: input_connections,\n                position: $(node.element).position(),\n                annotation: node.annotation,\n                post_job_actions: node.post_job_actions,\n                uuid: node.uuid,\n                label: node.label,\n                workflow_outputs: node.workflow_outputs\n            };\n            nodes[node.id] = node_data;\n        });\n        return { steps: nodes };\n    },\n    from_simple: function(data, initialImport_) {\n        var initialImport = initialImport_ === undefined ? true : initialImport_;\n        var wf = this;\n        var offset = 0;\n        if (initialImport) {\n            wf.name = data.name;\n        } else {\n            offset = Object.keys(wf.nodes).length;\n        }\n        var max_id = offset;\n        // First pass, nodes\n        var using_workflow_outputs = false;\n        $.each(data.steps, (id, step) => {\n            var node = wf.app.prebuildNode(step.type, step.name, step.content_id);\n            // If workflow being copied into another, wipe UUID and let\n            // Galaxy assign new ones.\n            if (!initialImport) {\n                step.uuid = null;\n                $.each(step.workflow_outputs, (name, workflow_output) => {\n                    workflow_output.uuid = null;\n                });\n            }\n            node.init_field_data(step);\n            if (step.position) {\n                node.element.css({\n                    top: step.position.top,\n                    left: step.position.left\n                });\n            }\n            node.id = parseInt(step.id) + offset;\n            wf.nodes[node.id] = node;\n            max_id = Math.max(max_id, parseInt(id) + offset);\n            // For older workflows, it's possible to have HideDataset PJAs, but not WorkflowOutputs.\n            // Check for either, and then add outputs in the next pass.\n            if (!using_workflow_outputs) {\n                if (node.workflow_outputs.length > 0) {\n                    using_workflow_outputs = true;\n                } else {\n                    $.each(node.post_job_actions || [], (pja_id, pja) => {\n                        if (pja.action_type === \"HideDatasetAction\") {\n                            using_workflow_outputs = true;\n                        }\n                    });\n                }\n            }\n        });\n        wf.id_counter = max_id + 1;\n        // Second pass, connections\n        $.each(data.steps, (id, step) => {\n            var node = wf.nodes[parseInt(id) + offset];\n            $.each(step.input_connections, (k, v) => {\n                if (v) {\n                    if (!$.isArray(v)) {\n                        v = [v];\n                    }\n                    $.each(v, (l, x) => {\n                        var other_node = wf.nodes[parseInt(x.id) + offset];\n                        var c = new Connector();\n                        c.connect(other_node.output_terminals[x.output_name], node.input_terminals[k]);\n                        c.redraw();\n                    });\n                }\n            });\n            if (using_workflow_outputs) {\n                // Ensure that every output terminal has a WorkflowOutput or HideDatasetAction.\n                $.each(node.output_terminals, (ot_id, ot) => {\n                    if (node.post_job_actions[`HideDatasetAction${ot.name}`] === undefined) {\n                        node.addWorkflowOutput(ot.name);\n                        var callout = $(node.element).find(`.callout.${ot.name}`);\n                        callout.find(\"img\").attr(\"src\", `${Galaxy.root}static/images/fugue/asterisk-small.png`);\n                        wf.has_changes = true;\n                    }\n                });\n            }\n        });\n    },\n    check_changes_in_active_form: function() {\n        // If active form has changed, save it\n        if (this.active_form_has_changes) {\n            this.has_changes = true;\n            // Submit form.\n            $(\"#right-content\")\n                .find(\"form\")\n                .submit();\n            this.active_form_has_changes = false;\n        }\n    },\n    reload_active_node: function() {\n        if (this.active_node) {\n            var node = this.active_node;\n            this.clear_active_node();\n            this.activate_node(node);\n        }\n    },\n    clear_active_node: function() {\n        if (this.active_node) {\n            this.active_node.make_inactive();\n            this.active_node = null;\n        }\n        document.activeElement.blur();\n        this.app.showAttributes();\n    },\n    activate_node: function(node) {\n        if (this.active_node != node) {\n            this.check_changes_in_active_form();\n            this.clear_active_node();\n            this.app.showForm(node.config_form, node);\n            node.make_active();\n            this.active_node = node;\n        }\n    },\n    node_changed: function(node, force) {\n        this.has_changes = true;\n        if (this.active_node == node && force) {\n            // Force changes to be saved even on new connection (previously dumped)\n            this.check_changes_in_active_form();\n            this.app.showForm(node.config_form, node);\n        }\n        this.app.showWorkflowParameters();\n    },\n    layout: function() {\n        this.check_changes_in_active_form();\n        this.has_changes = true;\n        // Prepare predecessor / successor tracking\n        var n_pred = {};\n        var successors = {};\n        // First pass to initialize arrays even for nodes with no connections\n        $.each(this.nodes, (id, node) => {\n            if (n_pred[id] === undefined) {\n                n_pred[id] = 0;\n            }\n            if (successors[id] === undefined) {\n                successors[id] = [];\n            }\n        });\n        // Second pass to count predecessors and successors\n        $.each(this.nodes, (id, node) => {\n            $.each(node.input_terminals, (j, t) => {\n                $.each(t.connectors, (k, c) => {\n                    // A connection exists from `other` to `node`\n                    var other = c.handle1.node;\n                    // node gains a predecessor\n                    n_pred[node.id] += 1;\n                    // other gains a successor\n                    successors[other.id].push(node.id);\n                });\n            });\n        });\n        // Assemble order, tracking levels\n        var node_ids_by_level = [];\n        while (true) {\n            // Everything without a predecessor\n            var level_parents = [];\n            for (var pred_k in n_pred) {\n                if (n_pred[pred_k] === 0) {\n                    level_parents.push(pred_k);\n                }\n            }\n            if (level_parents.length === 0) {\n                break;\n            }\n            node_ids_by_level.push(level_parents);\n            // Remove the parents from this level, and decrement the number\n            // of predecessors for each successor\n            for (var k in level_parents) {\n                var v = level_parents[k];\n                delete n_pred[v];\n                for (var sk in successors[v]) {\n                    n_pred[successors[v][sk]] -= 1;\n                }\n            }\n        }\n        if (n_pred.length) {\n            // ERROR: CYCLE! Currently we do nothing\n            return;\n        }\n        // Layout each level\n        var all_nodes = this.nodes;\n        var h_pad = 80;\n        var v_pad = 30;\n        var left = h_pad;\n        $.each(node_ids_by_level, (i, ids) => {\n            // We keep nodes in the same order in a level to give the user\n            // some control over ordering\n            ids.sort((a, b) => $(all_nodes[a].element).position().top - $(all_nodes[b].element).position().top);\n            // Position each node\n            var max_width = 0;\n            var top = v_pad;\n            $.each(ids, (j, id) => {\n                var node = all_nodes[id];\n                var element = $(node.element);\n                $(element).css({ top: top, left: left });\n                max_width = Math.max(max_width, $(element).width());\n                top += $(element).height() + v_pad;\n            });\n            left += max_width + h_pad;\n        });\n        // Need to redraw all connectors\n        $.each(all_nodes, (_, node) => {\n            node.redraw();\n        });\n    },\n    bounds_for_all_nodes: function() {\n        var xmin = Infinity;\n        var xmax = -Infinity;\n        var ymin = Infinity;\n        var ymax = -Infinity;\n        var p;\n        $.each(this.nodes, (id, node) => {\n            var e = $(node.element);\n            p = e.position();\n            xmin = Math.min(xmin, p.left);\n            xmax = Math.max(xmax, p.left + e.width());\n            ymin = Math.min(ymin, p.top);\n            ymax = Math.max(ymax, p.top + e.width());\n        });\n        return { xmin: xmin, xmax: xmax, ymin: ymin, ymax: ymax };\n    },\n    fit_canvas_to_nodes: function() {\n        // Math utils\n        function round_up(x, n) {\n            return Math.ceil(x / n) * n;\n        }\n        function fix_delta(x, n) {\n            if (x < n || x > 3 * n) {\n                var new_pos = (Math.ceil((x % n) / n) + 1) * n;\n                return -(x - new_pos);\n            }\n            return 0;\n        }\n        // Span of all elements\n        var bounds = this.bounds_for_all_nodes();\n        var position = this.canvas_container.position();\n        var parent = this.canvas_container.parent();\n        // Determine amount we need to expand on top/left\n        var xmin_delta = fix_delta(bounds.xmin, 100);\n        var ymin_delta = fix_delta(bounds.ymin, 100);\n        // May need to expand farther to fill viewport\n        xmin_delta = Math.max(xmin_delta, position.left);\n        ymin_delta = Math.max(ymin_delta, position.top);\n        var left = position.left - xmin_delta;\n        var top = position.top - ymin_delta;\n        // Same for width/height\n        var width = round_up(bounds.xmax + 100, 100) + xmin_delta;\n        var height = round_up(bounds.ymax + 100, 100) + ymin_delta;\n        width = Math.max(width, -left + parent.width());\n        height = Math.max(height, -top + parent.height());\n        // Grow the canvas container\n        this.canvas_container.css({\n            left: left,\n            top: top,\n            width: width,\n            height: height\n        });\n        // Move elements back if needed\n        this.canvas_container.children().each(function() {\n            var p = $(this).position();\n            $(this).css(\"left\", p.left + xmin_delta);\n            $(this).css(\"top\", p.top + ymin_delta);\n        });\n    }\n});\nexport default Workflow;\n"]}