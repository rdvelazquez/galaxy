{"version":3,"sources":["mvc/dataset/data.js"],"names":["DatasetMetadata","Backbone","Model","extend","Dataset","defaults","id","type","name","hda_ldda","metadata","initialize","get","_set_metadata","on","_","each","keys","attributes","k","indexOf","new_key","split","set","silent","get_metadata","attribute","urlRoot","Galaxy","root","TabularDataset","prototype","chunk_url","first_data_chunk","offset","at_eof","options","call","url_viz","get_next_chunk","self","next_chunk","$","Deferred","getJSON","success","rval","chunk","ck_data","resolve","DatasetCollection","Collection","model","TabularDatasetChunkedView","View","row_count","loading_chunk","TabularButtonTracksterView","$el","expand_to_container","height","scroll_elt","attempt_to_fetch","func","scrolled_to_bottom","loading_indicator","show","when","then","result","_renderChunk","hide","render","attr","append","data_table","cellpadding","column_names","header_container","appendTo","header_row","join","j","first_chunk","scroll","_renderCell","cell_contents","index","colspan","$cell","text","column_types","undefined","addClass","length","_renderRow","line","cells","row","num_columns","slice","range","find","TopLevelTabularDatasetChunkedView","parents","p","css","window","scrollTop","EmbeddedTabularDatasetChunkedView","position","overflow","innerHeight","el","scrollHeight","col","chrom","start","end","dataset_id","genome_build","file_ext","parent","modal","frame","console","log","search","str","array","match","btn_viz","IconButtonView","IconButton","title","icon_class","setElement","events","mouseleave","e","is_numeric","n","isNaN","parseFloat","isFinite","target","children","eq","html","btn_viz_pars","gene_region","left","top","off","click","add","url","param","createModelAndView","view","model_config","parent_elt","a_view","createTabularDatasetChunkedView","dataset_config","embedded"],"mappings":"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","file":"../../../scripts/mvc/dataset/data.js","sourcesContent":["import _l from \"utils/localization\";\nimport mod_icon_btn from \"mvc/ui/icon-button\";\n// Additional dependencies: jQuery, underscore.\n/**\n * Dataset metedata.\n */\nvar DatasetMetadata = Backbone.Model.extend({});\n\n/**\n * A dataset. In Galaxy, datasets are associated with a history, so\n * this object is also known as a HistoryDatasetAssociation.\n */\nvar Dataset = Backbone.Model.extend({\n    defaults: {\n        id: \"\",\n        type: \"\",\n        name: \"\",\n        hda_ldda: \"hda\",\n        metadata: null\n    },\n\n    initialize: function() {\n        // Metadata can be passed in as a model or a set of attributes; if it's\n        // already a model, there's no need to set metadata.\n        if (!this.get(\"metadata\")) {\n            this._set_metadata();\n        }\n\n        // Update metadata on change.\n        this.on(\"change\", this._set_metadata, this);\n    },\n\n    _set_metadata: function() {\n        var metadata = new DatasetMetadata();\n\n        // Move metadata from dataset attributes to metadata object.\n        _.each(\n            _.keys(this.attributes),\n            function(k) {\n                if (k.indexOf(\"metadata_\") === 0) {\n                    // Found metadata.\n                    var new_key = k.split(\"metadata_\")[1];\n                    metadata.set(new_key, this.attributes[k]);\n                    delete this.attributes[k];\n                }\n            },\n            this\n        );\n\n        // Because this is an internal change, silence it.\n        this.set(\"metadata\", metadata, { silent: true });\n    },\n\n    /**\n     * Returns dataset metadata for a given attribute.\n     */\n    get_metadata: function(attribute) {\n        return this.attributes.metadata.get(attribute);\n    },\n\n    urlRoot: `${Galaxy.root}api/datasets`\n});\n\n/**\n * A tabular dataset. This object extends dataset to provide incremental chunked data.\n */\nvar TabularDataset = Dataset.extend({\n    defaults: _.extend({}, Dataset.prototype.defaults, {\n        chunk_url: null,\n        first_data_chunk: null,\n        offset: 0,\n        at_eof: false\n    }),\n\n    initialize: function(options) {\n        Dataset.prototype.initialize.call(this);\n\n        // If first data chunk is available, next chunk is 1.\n        if (this.attributes.first_data_chunk) {\n            this.attributes.offset = this.attributes.first_data_chunk.offset;\n        }\n        this.attributes.chunk_url = `${Galaxy.root}dataset/display?dataset_id=${this.id}`;\n        this.attributes.url_viz = `${Galaxy.root}visualization`;\n    },\n\n    /**\n     * Returns a jQuery Deferred object that resolves to the next data chunk or null if at EOF.\n     */\n    get_next_chunk: function() {\n        // If already at end of file, do nothing.\n        if (this.attributes.at_eof) {\n            return null;\n        }\n\n        // Get next chunk.\n        var self = this;\n\n        var next_chunk = $.Deferred();\n        $.getJSON(this.attributes.chunk_url, {\n            offset: self.attributes.offset\n        }).success(chunk => {\n            var rval;\n            if (chunk.ck_data !== \"\") {\n                // Found chunk.\n                rval = chunk;\n                self.attributes.offset = chunk.offset;\n            } else {\n                // At EOF.\n                self.attributes.at_eof = true;\n                rval = null;\n            }\n            next_chunk.resolve(rval);\n        });\n\n        return next_chunk;\n    }\n});\n\nvar DatasetCollection = Backbone.Collection.extend({\n    model: Dataset\n});\n\n/**\n * Provides a base for table-based, dynamic view of a tabular dataset.\n * Do not instantiate directly; use either TopLevelTabularDatasetChunkedView\n * or EmbeddedTabularDatasetChunkedView.\n */\nvar TabularDatasetChunkedView = Backbone.View.extend({\n    /**\n     * Initialize view and, importantly, set a scroll element.\n     */\n    initialize: function(options) {\n        // Row count for rendering.\n        this.row_count = 0;\n        this.loading_chunk = false;\n\n        // load trackster button\n        new TabularButtonTracksterView({\n            model: options.model,\n            $el: this.$el\n        });\n    },\n\n    expand_to_container: function() {\n        if (this.$el.height() < this.scroll_elt.height()) {\n            this.attempt_to_fetch();\n        }\n    },\n\n    attempt_to_fetch: function(func) {\n        var self = this;\n        if (!this.loading_chunk && this.scrolled_to_bottom()) {\n            this.loading_chunk = true;\n            this.loading_indicator.show();\n            $.when(self.model.get_next_chunk()).then(result => {\n                if (result) {\n                    self._renderChunk(result);\n                    self.loading_chunk = false;\n                }\n                self.loading_indicator.hide();\n                self.expand_to_container();\n            });\n        }\n    },\n\n    render: function() {\n        // Add loading indicator.\n        this.loading_indicator = $(\"<div/>\").attr(\"id\", \"loading_indicator\");\n        this.$el.append(this.loading_indicator);\n\n        // Add data table and header.\n        var data_table = $(\"<table/>\").attr({\n            id: \"content_table\",\n            cellpadding: 0\n        });\n        this.$el.append(data_table);\n        var column_names = this.model.get_metadata(\"column_names\");\n        var header_container = $(\"<thead/>\").appendTo(data_table);\n        var header_row = $(\"<tr/>\").appendTo(header_container);\n        if (column_names) {\n            header_row.append(`<th>${column_names.join(\"</th><th>\")}</th>`);\n        } else {\n            for (var j = 1; j <= this.model.get_metadata(\"columns\"); j++) {\n                header_row.append(`<th>${j}</th>`);\n            }\n        }\n\n        // Render first chunk.\n        var self = this;\n\n        var first_chunk = this.model.get(\"first_data_chunk\");\n        if (first_chunk) {\n            // First chunk is bootstrapped, so render now.\n            this._renderChunk(first_chunk);\n        } else {\n            // No bootstrapping, so get first chunk and then render.\n            $.when(self.model.get_next_chunk()).then(result => {\n                self._renderChunk(result);\n            });\n        }\n\n        // -- Show new chunks during scrolling. --\n\n        // Set up chunk loading when scrolling using the scrolling element.\n        this.scroll_elt.scroll(() => {\n            self.attempt_to_fetch();\n        });\n    },\n\n    /**\n     * Returns true if user has scrolled to the bottom of the view.\n     */\n    scrolled_to_bottom: function() {\n        return false;\n    },\n\n    // -- Helper functions. --\n\n    _renderCell: function(cell_contents, index, colspan) {\n        var $cell = $(\"<td>\").text(cell_contents);\n        var column_types = this.model.get_metadata(\"column_types\");\n        if (colspan !== undefined) {\n            $cell.attr(\"colspan\", colspan).addClass(\"stringalign\");\n        } else if (column_types) {\n            if (index < column_types.length) {\n                if (column_types[index] === \"str\" || column_types[index] === \"list\") {\n                    /* Left align all str columns, right align the rest */\n                    $cell.addClass(\"stringalign\");\n                }\n            }\n        }\n        return $cell;\n    },\n\n    _renderRow: function(line) {\n        // Check length of cells to ensure this is a complete row.\n        var cells = line.split(\"\\t\");\n\n        var row = $(\"<tr>\");\n        var num_columns = this.model.get_metadata(\"columns\");\n\n        if (this.row_count % 2 !== 0) {\n            row.addClass(\"dark_row\");\n        }\n\n        if (cells.length === num_columns) {\n            _.each(\n                cells,\n                function(cell_contents, index) {\n                    row.append(this._renderCell(cell_contents, index));\n                },\n                this\n            );\n        } else if (cells.length > num_columns) {\n            // SAM file or like format with optional metadata included.\n            _.each(\n                cells.slice(0, num_columns - 1),\n                function(cell_contents, index) {\n                    row.append(this._renderCell(cell_contents, index));\n                },\n                this\n            );\n            row.append(this._renderCell(cells.slice(num_columns - 1).join(\"\\t\"), num_columns - 1));\n        } else if (cells.length === 1) {\n            // Comment line, just return the one cell.\n            row.append(this._renderCell(line, 0, num_columns));\n        } else {\n            // cells.length is greater than one, but less than num_columns.  Render cells and pad tds.\n            // Possibly a SAM file or like format with optional metadata missing.\n            // Could also be a tabular file with a line with missing columns.\n            _.each(\n                cells,\n                function(cell_contents, index) {\n                    row.append(this._renderCell(cell_contents, index));\n                },\n                this\n            );\n            _.each(_.range(num_columns - cells.length), () => {\n                row.append($(\"<td>\"));\n            });\n        }\n\n        this.row_count++;\n        return row;\n    },\n\n    _renderChunk: function(chunk) {\n        var data_table = this.$el.find(\"table\");\n        _.each(\n            chunk.ck_data.split(\"\\n\"),\n            function(line, index) {\n                if (line !== \"\") {\n                    data_table.append(this._renderRow(line));\n                }\n            },\n            this\n        );\n    }\n});\n\n/**\n * Tabular view that is placed at the top level of page. Scrolling occurs\n * view top-level elements outside of view.\n */\nvar TopLevelTabularDatasetChunkedView = TabularDatasetChunkedView.extend({\n    initialize: function(options) {\n        TabularDatasetChunkedView.prototype.initialize.call(this, options);\n\n        // Scrolling happens in top-level elements.\n        var scroll_elt = _.find(this.$el.parents(), p => $(p).css(\"overflow\") === \"auto\");\n\n        // If no scrolling element found, use window.\n        if (!scroll_elt) {\n            scroll_elt = window;\n        }\n\n        // Wrap scrolling element for easy access.\n        this.scroll_elt = $(scroll_elt);\n    },\n\n    /**\n     * Returns true if user has scrolled to the bottom of the view.\n     */\n    scrolled_to_bottom: function() {\n        return this.$el.height() - this.scroll_elt.scrollTop() - this.scroll_elt.height() <= 0;\n    }\n});\n\n/**\n * Tabular view tnat is embedded in a page. Scrolling occurs in view's el.\n */\nvar EmbeddedTabularDatasetChunkedView = TabularDatasetChunkedView.extend({\n    initialize: function(options) {\n        TabularDatasetChunkedView.prototype.initialize.call(this, options);\n\n        // Because view is embedded, set up div to do scrolling.\n        this.scroll_elt = this.$el.css({\n            position: \"relative\",\n            overflow: \"scroll\",\n            height: options.height || \"500px\"\n        });\n    },\n\n    /**\n     * Returns true if user has scrolled to the bottom of the view.\n     */\n    scrolled_to_bottom: function() {\n        return this.$el.scrollTop() + this.$el.innerHeight() >= this.el.scrollHeight;\n    }\n});\n\n/** Button for trackster visualization */\nvar TabularButtonTracksterView = Backbone.View.extend({\n    // gene region columns\n    col: {\n        chrom: null,\n        start: null,\n        end: null\n    },\n\n    // url for trackster\n    url_viz: null,\n\n    // dataset id\n    dataset_id: null,\n\n    // database key\n    genome_build: null,\n\n    // data type\n    file_ext: null,\n\n    // backbone initialize\n    initialize: function(options) {\n        // check if environment is available\n        var Galaxy = parent.Galaxy;\n\n        // link galaxy modal or create one\n        if (Galaxy && Galaxy.modal) {\n            this.modal = Galaxy.modal;\n        }\n\n        // link galaxy frames\n        if (Galaxy && Galaxy.frame) {\n            this.frame = Galaxy.frame;\n        }\n\n        // check\n        if (!this.modal || !this.frame) {\n            return;\n        }\n\n        // model/metadata\n        var model = options.model;\n        var metadata = model.get(\"metadata\");\n\n        // check for datatype\n        if (!model.get(\"file_ext\")) {\n            return;\n        }\n\n        // get data type\n        this.file_ext = model.get(\"file_ext\");\n\n        // check for bed-file format\n        if (this.file_ext == \"bed\") {\n            // verify that metadata exists\n            if (metadata.get(\"chromCol\") && metadata.get(\"startCol\") && metadata.get(\"endCol\")) {\n                // read in columns\n                this.col.chrom = metadata.get(\"chromCol\") - 1;\n                this.col.start = metadata.get(\"startCol\") - 1;\n                this.col.end = metadata.get(\"endCol\") - 1;\n            } else {\n                console.log(\"TabularButtonTrackster : Bed-file metadata incomplete.\");\n                return;\n            }\n        }\n\n        // check for vcf-file format\n        if (this.file_ext == \"vcf\") {\n            // search array\n            function search(str, array) {\n                for (var j = 0; j < array.length; j++) if (array[j].match(str)) return j;\n                return -1;\n            }\n\n            // load\n            this.col.chrom = search(\"Chrom\", metadata.get(\"column_names\"));\n            this.col.start = search(\"Pos\", metadata.get(\"column_names\"));\n            this.col.end = null;\n\n            // verify that metadata exists\n            if (this.col.chrom == -1 || this.col.start == -1) {\n                console.log(\"TabularButtonTrackster : VCF-file metadata incomplete.\");\n                return;\n            }\n        }\n\n        // check\n        if (this.col.chrom === undefined) {\n            return;\n        }\n\n        // get dataset id\n        if (model.id) {\n            this.dataset_id = model.id;\n        } else {\n            console.log(\"TabularButtonTrackster : Dataset identification is missing.\");\n            return;\n        }\n\n        // get url\n        if (model.get(\"url_viz\")) {\n            this.url_viz = model.get(\"url_viz\");\n        } else {\n            console.log(\"TabularButtonTrackster : Url for visualization controller is missing.\");\n            return;\n        }\n\n        // get genome_build / database key\n        if (model.get(\"genome_build\")) {\n            this.genome_build = model.get(\"genome_build\");\n        }\n\n        // create the icon\n        var btn_viz = new mod_icon_btn.IconButtonView({\n            model: new mod_icon_btn.IconButton({\n                title: _l(\"Visualize\"),\n                icon_class: \"chart_curve\",\n                id: \"btn_viz\"\n            })\n        });\n\n        // set element\n        this.setElement(options.$el);\n\n        // add to element\n        this.$el.append(btn_viz.render().$el);\n\n        // hide the button\n        this.hide();\n    },\n\n    /** Add event handlers */\n    events: {\n        \"mouseover tr\": \"show\",\n        mouseleave: \"hide\"\n    },\n\n    // show button\n    show: function(e) {\n        var self = this;\n\n        // is numeric\n        function is_numeric(n) {\n            return !isNaN(parseFloat(n)) && isFinite(n);\n        }\n\n        // check\n        if (this.col.chrom === null) return;\n\n        // get selected data line\n        var row = $(e.target).parent();\n\n        // verify that location has been found\n        var chrom = row\n            .children()\n            .eq(this.col.chrom)\n            .html();\n        var start = row\n            .children()\n            .eq(this.col.start)\n            .html();\n\n        // end is optional\n        var end = this.col.end\n            ? row\n                  .children()\n                  .eq(this.col.end)\n                  .html()\n            : start;\n\n        // double check location\n        if (!chrom.match(\"^#\") && chrom !== \"\" && is_numeric(start)) {\n            // get target gene region\n            var btn_viz_pars = {\n                dataset_id: this.dataset_id,\n                gene_region: `${chrom}:${start}-${end}`\n            };\n\n            // get button position\n            var offset = row.offset();\n            var left = offset.left - 10;\n            var top = offset.top - $(window).scrollTop() + 3;\n\n            // update css\n            $(\"#btn_viz\").css({\n                position: \"fixed\",\n                top: `${top}px`,\n                left: `${left}px`\n            });\n            $(\"#btn_viz\").off(\"click\");\n            $(\"#btn_viz\").click(() => {\n                self.frame.add({\n                    title: _l(\"Trackster\"),\n                    url: `${self.url_viz}/trackster?${$.param(btn_viz_pars)}`\n                });\n            });\n\n            // show the button\n            $(\"#btn_viz\").show();\n        } else {\n            // hide the button\n            $(\"#btn_viz\").hide();\n        }\n    },\n\n    /** hide button */\n    hide: function() {\n        this.$(\"#btn_viz\").hide();\n    }\n});\n\n// -- Utility functions. --\n\n/**\n * Create a model, attach it to a view, render view, and attach it to a parent element.\n */\nvar createModelAndView = (model, view, model_config, parent_elt) => {\n    // Create model, view.\n    var a_view = new view({\n        model: new model(model_config)\n    });\n\n    // Render view and add to parent element.\n    a_view.render();\n    if (parent_elt) {\n        parent_elt.append(a_view.$el);\n    }\n\n    return a_view;\n};\n\n/**\n * Create a tabular dataset chunked view (and requisite tabular dataset model)\n * and appends to parent_elt.\n */\nvar createTabularDatasetChunkedView = options => {\n    // If no model, create and set model from dataset config.\n    if (!options.model) {\n        options.model = new TabularDataset(options.dataset_config);\n    }\n\n    var parent_elt = options.parent_elt;\n    var embedded = options.embedded;\n\n    // Clean up options so that only needed options are passed to view.\n    delete options.embedded;\n    delete options.parent_elt;\n    delete options.dataset_config;\n\n    // Create and set up view.\n    var view = embedded\n        ? new EmbeddedTabularDatasetChunkedView(options)\n        : new TopLevelTabularDatasetChunkedView(options);\n    view.render();\n\n    if (parent_elt) {\n        parent_elt.append(view.$el);\n        // If we're sticking this in another element, once it's appended check\n        // to make sure we've filled enough space.\n        // Without this, the scroll elements don't work.\n        view.expand_to_container();\n    }\n\n    return view;\n};\n\nexport default {\n    Dataset: Dataset,\n    TabularDataset: TabularDataset,\n    DatasetCollection: DatasetCollection,\n    TabularDatasetChunkedView: TabularDatasetChunkedView,\n    createTabularDatasetChunkedView: createTabularDatasetChunkedView\n};\n"]}