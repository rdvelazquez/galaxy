{"version":3,"sources":["mvc/dataset/dataset-model.js"],"names":["logNamespace","searchableMixin","SearchableModelMixin","DatasetAssociation","Backbone","Model","extend","LoggableMixin","mixin","_logNamespace","defaults","state","NEW","deleted","purged","name","accessible","data_type","file_ext","file_size","meta_files","misc_blurb","misc_info","tags","initialize","attributes","options","debug","get","set","NOT_VIEWABLE","urls","_generateUrls","_setUpListeners","id","purge","display","edit","download","_downloadQueryParameters","report_error","rerun","show_params","visualization","meta_download","_","each","value","key","Galaxy","root","on","currModel","newState","log","inReadyState","trigger","previous","toJSON","json","prototype","call","isDeletedOrPurged","ready","contains","READY_STATES","hasDetails","has","hasData","fetch","dataset","always","parse","response","parsed","create_time","Date","update_time","save","attrs","wait","isUndefined","delete","jQuery","when","undelete","_purge","url","hda","xhr","ajax","done","message","status","responseObj","fail","error","messageBuriedInUnfortunatelyFormattedError","responseJSON","responseText","indexOf","searchAttributes","searchAliases","title","format","database","blurb","description","info","tag","toString","nameAndId","DatasetAssociationCollection","Collection","model","urlRoot","ids","map","item","notReady","filter","content","haveDetails","all","ajaxQueue","ajaxFn","deferred","Deferred","startingLength","length","responses","resolve","ajaxFns","chain","reverse","i","notify","curr","total","push","shift","matches","matchesWhat","join"],"mappings":"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","file":"../../../scripts/mvc/dataset/dataset-model.js","sourcesContent":["import STATES from \"mvc/dataset/states\";\nimport BASE_MVC from \"mvc/base-mvc\";\nimport _l from \"utils/localization\";\n\nvar logNamespace = \"dataset\";\n//==============================================================================\nvar searchableMixin = BASE_MVC.SearchableModelMixin;\n/** @class base model for any DatasetAssociation (HDAs, LDDAs, DatasetCollectionDAs).\n *      No knowledge of what type (HDA/LDDA/DCDA) should be needed here.\n *  The DA's are made searchable (by attribute) by mixing in SearchableModelMixin.\n */\nvar DatasetAssociation = Backbone.Model.extend(BASE_MVC.LoggableMixin).extend(\n    BASE_MVC.mixin(\n        searchableMixin,\n        /** @lends DatasetAssociation.prototype */ {\n            _logNamespace: logNamespace,\n\n            /** default attributes for a model */\n            defaults: {\n                state: STATES.NEW,\n                deleted: false,\n                purged: false,\n                name: \"(unnamed dataset)\",\n                accessible: true,\n                // sniffed datatype (sam, tabular, bed, etc.)\n                data_type: \"\",\n                file_ext: \"\",\n                file_size: 0,\n\n                // array of associated file types (eg. [ 'bam_index', ... ])\n                meta_files: [],\n\n                misc_blurb: \"\",\n                misc_info: \"\",\n\n                tags: []\n                // do NOT default on annotation, as this default is valid and will be passed on 'save'\n                //  which is incorrect behavior when the model is only partially fetched (annos are not passed in summary data)\n                //annotation          : ''\n            },\n\n            /** instance vars and listeners */\n            initialize: function(attributes, options) {\n                this.debug(`${this}(Dataset).initialize`, attributes, options);\n\n                //!! this state is not in trans.app.model.Dataset.states - set it here -\n                if (!this.get(\"accessible\")) {\n                    this.set(\"state\", STATES.NOT_VIEWABLE);\n                }\n\n                /** Datasets rely/use some web controllers - have the model generate those URLs on startup */\n                this.urls = this._generateUrls();\n\n                this._setUpListeners();\n            },\n\n            /** returns misc. web urls for rendering things like re-run, display, etc. */\n            _generateUrls: function() {\n                var id = this.get(\"id\");\n                if (!id) {\n                    return {};\n                }\n                var urls = {\n                    purge: `datasets/${id}/purge_async`,\n                    display: `datasets/${id}/display/?preview=True`,\n                    edit: `datasets/edit?dataset_id=${id}`,\n                    download: `datasets/${id}/display${this._downloadQueryParameters()}`,\n                    report_error: `dataset/errors?id=${id}`,\n                    rerun: `tool_runner/rerun?id=${id}`,\n                    show_params: `datasets/${id}/show_params`,\n                    visualization: \"visualization\",\n                    meta_download: `dataset/get_metadata_file?hda_id=${id}&metadata_name=`\n                };\n                _.each(urls, (value, key) => {\n                    urls[key] = Galaxy.root + value;\n                });\n                this.urls = urls;\n                return urls;\n            },\n\n            _downloadQueryParameters: function() {\n                return `?to_ext=${this.get(\"file_ext\")}`;\n            },\n\n            /** set up any event listeners\n             *  event: state:ready  fired when this DA moves into/is already in a ready state\n             */\n            _setUpListeners: function() {\n                // if the state has changed and the new state is a ready state, fire an event\n                this.on(\"change:state\", function(currModel, newState) {\n                    this.log(`${this} has changed state:`, currModel, newState);\n                    if (this.inReadyState()) {\n                        this.trigger(\"state:ready\", currModel, newState, this.previous(\"state\"));\n                    }\n                });\n                // the download url (currently) relies on having a correct file extension\n                this.on(\"change:id change:file_ext\", function(currModel) {\n                    this._generateUrls();\n                });\n            },\n\n            // ........................................................................ common queries\n            /** override to add urls */\n            toJSON: function() {\n                var json = Backbone.Model.prototype.toJSON.call(this);\n                //console.warn( 'returning json?' );\n                //return json;\n                return _.extend(json, {\n                    urls: this.urls\n                });\n            },\n\n            /** Is this dataset deleted or purged? */\n            isDeletedOrPurged: function() {\n                return this.get(\"deleted\") || this.get(\"purged\");\n            },\n\n            /** Is this dataset in a 'ready' state; where 'Ready' states are states where no\n             *      processing (for the ds) is left to do on the server.\n             */\n            inReadyState: function() {\n                var ready = _.contains(STATES.READY_STATES, this.get(\"state\"));\n                return this.isDeletedOrPurged() || ready;\n            },\n\n            /** Does this model already contain detailed data (as opposed to just summary level data)? */\n            hasDetails: function() {\n                // if it's inaccessible assume it has everything it needs\n                if (!this.get(\"accessible\")) {\n                    return true;\n                }\n                return this.has(\"annotation\");\n            },\n\n            /** Convenience function to match dataset.has_data. */\n            hasData: function() {\n                return this.get(\"file_size\") > 0;\n            },\n\n            // ........................................................................ ajax\n            fetch: function(options) {\n                var dataset = this;\n                return Backbone.Model.prototype.fetch.call(this, options).always(() => {\n                    dataset._generateUrls();\n                });\n            },\n\n            /** override to use actual Dates objects for create/update times */\n            parse: function(response, options) {\n                var parsed = Backbone.Model.prototype.parse.call(this, response, options);\n                if (parsed.create_time) {\n                    parsed.create_time = new Date(parsed.create_time);\n                }\n                if (parsed.update_time) {\n                    parsed.update_time = new Date(parsed.update_time);\n                }\n                return parsed;\n            },\n\n            /** override to wait by default */\n            save: function(attrs, options) {\n                options = options || {};\n                options.wait = _.isUndefined(options.wait) ? true : options.wait;\n                return Backbone.Model.prototype.save.call(this, attrs, options);\n            },\n\n            //NOTE: subclasses of DA's will need to implement url and urlRoot in order to have these work properly\n            /** save this dataset, _Mark_ing it as deleted (just a flag) */\n            delete: function(options) {\n                if (this.get(\"deleted\")) {\n                    return jQuery.when();\n                }\n                return this.save({ deleted: true }, options);\n            },\n            /** save this dataset, _Mark_ing it as undeleted */\n            undelete: function(options) {\n                if (!this.get(\"deleted\") || this.get(\"purged\")) {\n                    return jQuery.when();\n                }\n                return this.save({ deleted: false }, options);\n            },\n\n            /** remove the file behind this dataset from the filesystem (if permitted) */\n            purge: function _purge(options) {\n                //TODO: use, override model.destroy, HDA.delete({ purge: true })\n                if (this.get(\"purged\")) {\n                    return jQuery.when();\n                }\n                options = options || {};\n                options.url = this.urls.purge;\n\n                //TODO: ideally this would be a DELETE call to the api\n                //  using purge async for now\n                var hda = this;\n\n                var xhr = jQuery.ajax(options);\n                xhr.done((message, status, responseObj) => {\n                    hda.set({ deleted: true, purged: true });\n                });\n                xhr.fail((xhr, status, message) => {\n                    // Exception messages are hidden within error page including:  '...not allowed in this Galaxy instance.'\n                    // unbury and re-add to xhr\n                    var error = _l(\"Unable to purge dataset\");\n                    var messageBuriedInUnfortunatelyFormattedError =\n                        \"Removal of datasets by users \" + \"is not allowed in this Galaxy instance\";\n                    if (xhr.responseJSON && xhr.responseJSON.error) {\n                        error = xhr.responseJSON.error;\n                    } else if (xhr.responseText.indexOf(messageBuriedInUnfortunatelyFormattedError) !== -1) {\n                        error = messageBuriedInUnfortunatelyFormattedError;\n                    }\n                    xhr.responseText = error;\n                    hda.trigger(\"error\", hda, xhr, options, _l(error), {\n                        error: error\n                    });\n                });\n                return xhr;\n            },\n\n            // ........................................................................ searching\n            /** what attributes of an HDA will be used in a text search */\n            searchAttributes: [\"name\", \"file_ext\", \"genome_build\", \"misc_blurb\", \"misc_info\", \"annotation\", \"tags\"],\n\n            /** our attr keys don't often match the labels we display to the user - so, when using\n             *      attribute specifiers ('name=\"bler\"') in a term, allow passing in aliases for the\n             *      following attr keys.\n             */\n            searchAliases: {\n                title: \"name\",\n                format: \"file_ext\",\n                database: \"genome_build\",\n                blurb: \"misc_blurb\",\n                description: \"misc_blurb\",\n                info: \"misc_info\",\n                tag: \"tags\"\n            },\n\n            // ........................................................................ misc\n            /** String representation */\n            toString: function() {\n                var nameAndId = this.get(\"id\") || \"\";\n                if (this.get(\"name\")) {\n                    nameAndId = `\"${this.get(\"name\")}\",${nameAndId}`;\n                }\n                return `Dataset(${nameAndId})`;\n            }\n        }\n    )\n);\n\n//==============================================================================\n/** @class Backbone collection for dataset associations.\n */\nvar DatasetAssociationCollection = Backbone.Collection.extend(BASE_MVC.LoggableMixin).extend(\n    /** @lends HistoryContents.prototype */ {\n        _logNamespace: logNamespace,\n\n        model: DatasetAssociation,\n\n        /** root api url */\n        urlRoot: `${Galaxy.root}api/datasets`,\n\n        /** url fn */\n        url: function() {\n            return this.urlRoot;\n        },\n\n        // ........................................................................ common queries\n        /** Get the ids of every item in this collection\n         *  @returns array of encoded ids\n         */\n        ids: function() {\n            return this.map(item => item.get(\"id\"));\n        },\n\n        /** Get contents that are not ready\n         *  @returns array of content models\n         */\n        notReady: function() {\n            return this.filter(content => !content.inReadyState());\n        },\n\n        /** return true if any datasets don't have details */\n        haveDetails: function() {\n            return this.all(dataset => dataset.hasDetails());\n        },\n\n        // ........................................................................ ajax\n        /** using a queue, perform ajaxFn on each of the models in this collection */\n        ajaxQueue: function(ajaxFn, options) {\n            var deferred = jQuery.Deferred();\n            var startingLength = this.length;\n            var responses = [];\n\n            if (!startingLength) {\n                deferred.resolve([]);\n                return deferred;\n            }\n\n            // use reverse order (stylistic choice)\n            var ajaxFns = this.chain()\n                .reverse()\n                .map((dataset, i) => () => {\n                    var xhr = ajaxFn.call(dataset, options);\n                    // if successful, notify using the deferred to allow tracking progress\n                    xhr.done(response => {\n                        deferred.notify({\n                            curr: i,\n                            total: startingLength,\n                            response: response,\n                            model: dataset\n                        });\n                    });\n                    // (regardless of previous error or success) if not last ajax call, shift and call the next\n                    //  if last fn, resolve deferred\n                    xhr.always(response => {\n                        responses.push(response);\n                        if (ajaxFns.length) {\n                            ajaxFns.shift()();\n                        } else {\n                            deferred.resolve(responses);\n                        }\n                    });\n                })\n                .value();\n            // start the queue\n            ajaxFns.shift()();\n\n            return deferred;\n        },\n\n        // ........................................................................ sorting/filtering\n        /** return a new collection of datasets whose attributes contain the substring matchesWhat */\n        matches: function(matchesWhat) {\n            return this.filter(dataset => dataset.matches(matchesWhat));\n        },\n\n        /** String representation. */\n        toString: function() {\n            return [\"DatasetAssociationCollection(\", this.length, \")\"].join(\"\");\n        }\n    }\n);\n\n//==============================================================================\nexport default {\n    DatasetAssociation: DatasetAssociation,\n    DatasetAssociationCollection: DatasetAssociationCollection\n};\n"]}