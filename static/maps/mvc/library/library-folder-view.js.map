{"version":3,"sources":["mvc/library/library-folder-view.js"],"names":["FolderView","Backbone","View","extend","el","model","options","events","initialize","_","id","fetchFolder","FolderAsModel","that","fetch","success","show_permissions","showPermissions","error","response","responseJSON","err_msg","onclick","Galaxy","libraries","library_router","back","$","remove","is_admin","user","isAdmin","template","templateFolderPermissions","$el","html","folder","self","get","root","done","prepareSelectBoxes","fetched_permissions","fail","tooltip","css","_serializeRoles","role_list","selected_roles","i","length","push","selected_add_item_roles","add_library_item_role_list","selected_manage_folder_roles","manage_folder_role_list","selected_modify_folder_roles","modify_folder_role_list","addSelectObject","_createSelectOptions","manageSelectObject","modifySelectObject","init_data","select_options","minimumInputLength","multiple","placeholder","container","find","ajax","url","dataType","quietMillis","data","term","page","q","page_limit","results","more","total","roles","formatResult","roleFormatResult","role","name","type","formatSelection","roleFormatSelection","initSelection","element","callback","val","split","each","item","initialData","join","dropdownCssClass","_extractIds","roles_list","ids_list","savePermissions","event","add_ids","select2","manage_ids","modify_ids","post"],"mappings":"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","file":"../../../scripts/mvc/library/library-folder-view.js","sourcesContent":["import mod_toastr from \"libs/toastr\";\nimport mod_library_model from \"mvc/library/library-model\";\nimport mod_select from \"mvc/ui/ui-select\";\nvar FolderView = Backbone.View.extend({\n    el: \"#center\",\n\n    model: null,\n\n    options: {},\n\n    events: {\n        \"click .toolbtn_save_permissions\": \"savePermissions\"\n    },\n\n    initialize: function(options) {\n        this.options = _.extend(this.options, options);\n        if (this.options.id) {\n            this.fetchFolder();\n        }\n    },\n\n    fetchFolder: function(options) {\n        this.options = _.extend(this.options, options);\n        this.model = new mod_library_model.FolderAsModel({\n            id: this.options.id\n        });\n        var that = this;\n        this.model.fetch({\n            success: function() {\n                if (that.options.show_permissions) {\n                    that.showPermissions();\n                }\n            },\n            error: function(model, response) {\n                if (typeof response.responseJSON !== \"undefined\") {\n                    mod_toastr.error(`${response.responseJSON.err_msg} Click this to go back.`, \"\", {\n                        onclick: function() {\n                            Galaxy.libraries.library_router.back();\n                        }\n                    });\n                } else {\n                    mod_toastr.error(\"An error occurred. Click this to go back.\", \"\", {\n                        onclick: function() {\n                            Galaxy.libraries.library_router.back();\n                        }\n                    });\n                }\n            }\n        });\n    },\n\n    showPermissions: function(options) {\n        this.options = _.extend(this.options, options);\n        $(\".tooltip\").remove();\n\n        var is_admin = false;\n        if (Galaxy.user) {\n            is_admin = Galaxy.user.isAdmin();\n        }\n        var template = this.templateFolderPermissions();\n        this.$el.html(template({ folder: this.model, is_admin: is_admin }));\n\n        var self = this;\n        $.get(`${Galaxy.root}api/folders/${self.id}/permissions?scope=current`)\n            .done(fetched_permissions => {\n                self.prepareSelectBoxes({\n                    fetched_permissions: fetched_permissions\n                });\n            })\n            .fail(() => {\n                mod_toastr.error(\"An error occurred while attempting to fetch folder permissions.\");\n            });\n\n        $(\"#center [data-toggle]\").tooltip();\n        //hack to show scrollbars\n        $(\"#center\").css(\"overflow\", \"auto\");\n    },\n\n    _serializeRoles: function(role_list) {\n        var selected_roles = [];\n        for (var i = 0; i < role_list.length; i++) {\n            selected_roles.push(`${role_list[i][1]}:${role_list[i][0]}`);\n        }\n        return selected_roles;\n    },\n\n    prepareSelectBoxes: function(options) {\n        this.options = _.extend(this.options, options);\n        var fetched_permissions = this.options.fetched_permissions;\n        var self = this;\n\n        var selected_add_item_roles = this._serializeRoles(fetched_permissions.add_library_item_role_list);\n        var selected_manage_folder_roles = this._serializeRoles(fetched_permissions.manage_folder_role_list);\n        var selected_modify_folder_roles = this._serializeRoles(fetched_permissions.modify_folder_role_list);\n\n        self.addSelectObject = new mod_select.View(\n            this._createSelectOptions(this, \"add_perm\", selected_add_item_roles, false)\n        );\n        self.manageSelectObject = new mod_select.View(\n            this._createSelectOptions(this, \"manage_perm\", selected_manage_folder_roles, false)\n        );\n        self.modifySelectObject = new mod_select.View(\n            this._createSelectOptions(this, \"modify_perm\", selected_modify_folder_roles, false)\n        );\n    },\n\n    _createSelectOptions: function(self, id, init_data) {\n        var select_options = {\n            minimumInputLength: 0,\n            css: id,\n            multiple: true,\n            placeholder: \"Click to select a role\",\n            container: self.$el.find(`#${id}`),\n            ajax: {\n                url: `${Galaxy.root}api/folders/${self.id}/permissions?scope=available`,\n                dataType: \"json\",\n                quietMillis: 100,\n                data: function(term, page) {\n                    // page is the one-based page number tracked by Select2\n                    return {\n                        q: term, //search term\n                        page_limit: 10, // page size\n                        page: page // page number\n                    };\n                },\n                results: function(data, page) {\n                    var more = page * 10 < data.total; // whether or not there are more results available\n                    // notice we return the value of more so Select2 knows if more results can be loaded\n                    return { results: data.roles, more: more };\n                }\n            },\n            formatResult: function roleFormatResult(role) {\n                return `${role.name} type: ${role.type}`;\n            },\n\n            formatSelection: function roleFormatSelection(role) {\n                return role.name;\n            },\n            initSelection: function(element, callback) {\n                // the input tag has a value attribute preloaded that points to a preselected role's id\n                // this function resolves that id attribute to an object that select2 can render\n                // using its formatResult renderer - that way the role name is shown preselected\n                var data = [];\n                $(element.val().split(\",\")).each(function() {\n                    var item = this.split(\":\");\n                    data.push({\n                        id: item[0],\n                        name: item[1]\n                    });\n                });\n                callback(data);\n            },\n            initialData: init_data.join(\",\"),\n            dropdownCssClass: \"bigdrop\" // apply css that makes the dropdown taller\n        };\n\n        return select_options;\n    },\n\n    /**\n     * Extract the role ids from Select2 elements's 'data'\n     */\n    _extractIds: function(roles_list) {\n        var ids_list = [];\n        for (var i = roles_list.length - 1; i >= 0; i--) {\n            ids_list.push(roles_list[i].id);\n        }\n        return ids_list;\n    },\n\n    /**\n     * Save the permissions for roles entered in the select boxes.\n     */\n    savePermissions: function(event) {\n        var self = this;\n        var add_ids = this._extractIds(this.addSelectObject.$el.select2(\"data\"));\n        var manage_ids = this._extractIds(this.manageSelectObject.$el.select2(\"data\"));\n        var modify_ids = this._extractIds(this.modifySelectObject.$el.select2(\"data\"));\n        $.post(`${Galaxy.root}api/folders/${self.id}/permissions?action=set_permissions`, {\n            \"add_ids[]\": add_ids,\n            \"manage_ids[]\": manage_ids,\n            \"modify_ids[]\": modify_ids\n        })\n            .done(fetched_permissions => {\n                self.showPermissions({\n                    fetched_permissions: fetched_permissions\n                });\n                mod_toastr.success(\"Permissions saved.\");\n            })\n            .fail(() => {\n                mod_toastr.error(\"An error occurred while attempting to set folder permissions.\");\n            });\n    },\n\n    templateFolderPermissions: function() {\n        return _.template(\n            [\n                '<div class=\"library_style_container\">',\n                '<div id=\"library_toolbar\">',\n                '<a href=\"#/folders/<%= folder.get(\"parent_id\") %>\">',\n                '<button data-toggle=\"tooltip\" data-placement=\"top\" title=\"Go back to the parent folder\" class=\"btn btn-default primary-button\" type=\"button\">',\n                '<span class=\"fa fa-caret-left fa-lg\"/>',\n                \"&nbsp;Parent folder\",\n                \"</button>\",\n                \"</a>\",\n                \"</div>\",\n                \"<h1>\",\n                'Folder: <%= _.escape(folder.get(\"name\")) %>',\n                \"</h1>\",\n                '<div class=\"alert alert-warning\">',\n                \"<% if (is_admin) { %>\",\n                \"You are logged in as an <strong>administrator</strong> therefore you can manage any folder on this Galaxy instance. Please make sure you understand the consequences.\",\n                \"<% } else { %>\",\n                \"You can assign any number of roles to any of the following permission types. However please read carefully the implications of such actions.\",\n                \"<% }%>\",\n                \"</div>\",\n                '<div class=\"dataset_table\">',\n                \"<h2>Folder permissions</h2>\",\n                \"<h4>\",\n                \"Roles that can manage permissions on this folder\",\n                \"</h4>\",\n                '<div id=\"manage_perm\" class=\"manage_perm roles-selection\"/>',\n                '<div class=\"alert alert-info roles-selection\">',\n                \"User with <strong>any</strong> of these roles can manage permissions on this folder.\",\n                \"</div>\",\n                \"<h4>\",\n                \"Roles that can add items to this folder\",\n                \"</h4>\",\n                '<div id=\"add_perm\" class=\"add_perm roles-selection\"/>',\n                '<div class=\"alert alert-info roles-selection\">',\n                \"User with <strong>any</strong> of these roles can add items to this folder (folders and datasets).\",\n                \"</div>\",\n                \"<h4>\",\n                \"Roles that can modify this folder\",\n                \"</h4>\",\n                '<div id=\"modify_perm\" class=\"modify_perm roles-selection\"/>',\n                '<div class=\"alert alert-info roles-selection\">',\n                \"User with <strong>any</strong> of these roles can modify this folder (name, etc.).\",\n                \"</div>\",\n                '<button data-toggle=\"tooltip\" data-placement=\"top\" title=\"Save modifications\" class=\"btn btn-default toolbtn_save_permissions primary-button\" type=\"button\">',\n                '<span class=\"fa fa-floppy-o\"/>',\n                \"&nbsp;Save\",\n                \"</button>\",\n                \"</div>\",\n                \"</div>\"\n            ].join(\"\")\n        );\n    }\n});\n\nexport default {\n    FolderView: FolderView\n};\n"]}