{"version":3,"sources":["mvc/library/library-util.js"],"names":["generateFolderComparator","sort_key","sort_order","itemA","itemB","get","has","toLowerCase","generateLibraryComparator","libraryA","libraryB"],"mappings":";;;;;;AAAA;;;;;;;;AAQA,QAAIA,2BAA2B,SAA3BA,wBAA2B,CAACC,QAAD,EAAWC,UAAX;AAAA,eAA0B,UAACC,KAAD,EAAQC,KAAR,EAAkB;AACvE,gBAAID,MAAME,GAAN,CAAU,MAAV,MAAsBD,MAAMC,GAAN,CAAU,MAAV,CAA1B,EAA6C;AACzC,oBAAI,CAACF,MAAMG,GAAN,CAAUL,QAAV,CAAD,IAAwB,CAACG,MAAME,GAAN,CAAUL,QAAV,CAA7B,EAAkD;AAC9C,2BAAO,CAAP;AACH,iBAFD,MAEO,IAAI,CAACE,MAAMG,GAAN,CAAUL,QAAV,CAAL,EAA0B;AAC7B,2BAAO,CAAP;AACH,iBAFM,MAEA,IAAI,CAACG,MAAME,GAAN,CAAUL,QAAV,CAAL,EAA0B;AAC7B,2BAAO,CAAC,CAAR;AACH;AACD,oBAAIE,MAAME,GAAN,CAAUJ,QAAV,EAAoBM,WAApB,KAAoCH,MAAMC,GAAN,CAAUJ,QAAV,EAAoBM,WAApB,EAAxC,EAA2E;AACvE,2BAAOL,eAAe,KAAf,GAAuB,CAAvB,GAA2B,CAAC,CAAnC;AACH;AACD,oBAAIE,MAAMC,GAAN,CAAUJ,QAAV,EAAoBM,WAApB,KAAoCJ,MAAME,GAAN,CAAUJ,QAAV,EAAoBM,WAApB,EAAxC,EAA2E;AACvE,2BAAOL,eAAe,KAAf,GAAuB,CAAC,CAAxB,GAA4B,CAAnC;AACH;AACD,uBAAO,CAAP,CAdyC,CAc/B;AACb,aAfD,MAeO;AACH,oBAAIC,MAAME,GAAN,CAAU,MAAV,MAAsB,QAA1B,EAAoC;AAChC,2BAAO,CAAC,CAAR,CADgC,CACrB;AACd;AACD,uBAAO,CAAP;AACH;AACJ,SAtB8B;AAAA,KAA/B;AAuBA;;;;;;AAMA,QAAIG,4BAA4B,SAA5BA,yBAA4B,CAACP,QAAD,EAAWC,UAAX;AAAA,eAA0B,UAACO,QAAD,EAAWC,QAAX,EAAwB;AAC9E,gBAAID,SAASJ,GAAT,CAAaJ,QAAb,EAAuBM,WAAvB,KAAuCG,SAASL,GAAT,CAAaJ,QAAb,EAAuBM,WAAvB,EAA3C,EAAiF;AAC7E,uBAAOL,eAAe,KAAf,GAAuB,CAAvB,GAA2B,CAAC,CAAnC;AACH;AACD,gBAAIQ,SAASL,GAAT,CAAaJ,QAAb,EAAuBM,WAAvB,KAAuCE,SAASJ,GAAT,CAAaJ,QAAb,EAAuBM,WAAvB,EAA3C,EAAiF;AAC7E,uBAAOL,eAAe,KAAf,GAAuB,CAAC,CAAxB,GAA4B,CAAnC;AACH;AACD,mBAAO,CAAP,CAP8E,CAOpE;AACb,SAR+B;AAAA,KAAhC;sBASe;AACXF,kCAA0BA,wBADf;AAEXQ,mCAA2BA;AAFhB,K","file":"../../../scripts/mvc/library/library-util.js","sourcesContent":["/**\n * Create alphabetical based two-argument comparator\n * that takes into account that Folder comes before Dataset.\n * If sort_key is not present it is set to ''.\n * @param  {str} sort_key   key to sort by\n * @param  {str} sort_order order to sort by (asc, desc)\n * @return {function} two-argument comparator function\n */\nvar generateFolderComparator = (sort_key, sort_order) => (itemA, itemB) => {\n    if (itemA.get(\"type\") === itemB.get(\"type\")) {\n        if (!itemA.has(sort_key) && !itemB.has(sort_key)) {\n            return 0;\n        } else if (!itemA.has(sort_key)) {\n            return 1;\n        } else if (!itemB.has(sort_key)) {\n            return -1;\n        }\n        if (itemA.get(sort_key).toLowerCase() > itemB.get(sort_key).toLowerCase()) {\n            return sort_order === \"asc\" ? 1 : -1;\n        }\n        if (itemB.get(sort_key).toLowerCase() > itemA.get(sort_key).toLowerCase()) {\n            return sort_order === \"asc\" ? -1 : 1;\n        }\n        return 0; // equal\n    } else {\n        if (itemA.get(\"type\") === \"folder\") {\n            return -1; // folder is always before dataset\n        }\n        return 1;\n    }\n};\n/**\n * Create alphabetical based two-argument comparator\n * @param  {str} sort_key   key to sort by\n * @param  {str} sort_order order to sort by (asc, desc)\n * @return {function} two-argument comparator function\n */\nvar generateLibraryComparator = (sort_key, sort_order) => (libraryA, libraryB) => {\n    if (libraryA.get(sort_key).toLowerCase() > libraryB.get(sort_key).toLowerCase()) {\n        return sort_order === \"asc\" ? 1 : -1;\n    }\n    if (libraryB.get(sort_key).toLowerCase() > libraryA.get(sort_key).toLowerCase()) {\n        return sort_order === \"asc\" ? -1 : 1;\n    }\n    return 0; // equal\n};\nexport default {\n    generateFolderComparator: generateFolderComparator,\n    generateLibraryComparator: generateLibraryComparator\n};\n"]}