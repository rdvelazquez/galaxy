{"version":3,"sources":["mvc/tool/tool-form.js"],"names":["View","Backbone","extend","initialize","options","self","modal","parent","Galaxy","form","merge","listen_to_history","always_refresh","buildmodel","process","model","attributes","build_url","build_data","job_id","root","id","$","params","version","get","url","data","success","display","window","location","set","_customize","emit","debug","resolve","error","response","status","error_message","err_msg","param","redirect","$el","is","prepend","Message","message","persistent","large","show","title","body","buttons","Close","hide","reject","postchange","current_state","tool_id","tool_version","inputs","create","wait","request","type","update","deferred","setElement","append","execute_button","Button","icon","tooltip","name","cls","wait_cls","onclick","portlet","disable","submit","unwait","enable","execute","job_remap","label","help","push","ignore","value","extra_user_preferences","user","preferences","JSON","parse","use_cached_job","callback","job_def","trigger","validate","action","$f","attr","method","enctype","_","each","key","appendTo","remove","children","_templateSuccess","jobs","length","WebhookApp","WebhookView","toolId","currHistoryPanel","refreshContents","input_found","err_data","error_messages","matchResponse","input_id","highlight","_templateError","job_inputs","batch_n","batch_src","job_input_id","input_value","match","input_field","field_list","input_def","input_list","optional","batch","n","values","src","njobs","njobs_text","$message","addClass","text","outputs","output","hid","stringify"],"mappings":"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","file":"../../../scripts/mvc/tool/tool-form.js","sourcesContent":["import _l from \"utils/localization\";\n/* This is the regular tool form */\nimport Utils from \"utils/utils\";\nimport Ui from \"mvc/ui/ui-misc\";\nimport Modal from \"mvc/ui/ui-modal\";\nimport ToolFormBase from \"mvc/tool/tool-form-base\";\nimport Webhooks from \"mvc/webhooks\";\nvar View = Backbone.View.extend({\n    initialize: function(options) {\n        var self = this;\n        this.modal = parent.Galaxy.modal || new Modal.View();\n        this.form = new ToolFormBase(\n            Utils.merge(\n                {\n                    listen_to_history: true,\n                    always_refresh: false,\n                    buildmodel: function(process, form) {\n                        var options = form.model.attributes;\n\n                        // build request url\n                        var build_url = \"\";\n                        var build_data = {};\n                        var job_id = options.job_id;\n                        if (job_id) {\n                            build_url = `${Galaxy.root}api/jobs/${job_id}/build_for_rerun`;\n                        } else {\n                            build_url = `${Galaxy.root}api/tools/${options.id}/build`;\n                            build_data = $.extend({}, Galaxy.params);\n                            build_data[\"tool_id\"] && delete build_data[\"tool_id\"];\n                        }\n                        options.version && (build_data[\"tool_version\"] = options.version);\n\n                        // get initial model\n                        Utils.get({\n                            url: build_url,\n                            data: build_data,\n                            success: function(data) {\n                                if (!data.display) {\n                                    window.location = Galaxy.root;\n                                    return;\n                                }\n                                form.model.set(data);\n                                self._customize(form);\n                                Galaxy.emit.debug(\"tool-form-base::_buildModel()\", \"Initial tool model ready.\", data);\n                                process.resolve();\n                            },\n                            error: function(response, status) {\n                                var error_message = (response && response.err_msg) || \"Uncaught error.\";\n                                if (status == 401) {\n                                    window.location = `${Galaxy.root}user/login?${$.param({\n                                        redirect: `${Galaxy.root}?tool_id=${options.id}`\n                                    })}`;\n                                } else if (form.$el.is(\":empty\")) {\n                                    form.$el.prepend(\n                                        new Ui.Message({\n                                            message: error_message,\n                                            status: \"danger\",\n                                            persistent: true,\n                                            large: true\n                                        }).$el\n                                    );\n                                } else {\n                                    Galaxy.modal &&\n                                        Galaxy.modal.show({\n                                            title: _l(\"Tool request failed\"),\n                                            body: error_message,\n                                            buttons: {\n                                                Close: function() {\n                                                    Galaxy.modal.hide();\n                                                }\n                                            }\n                                        });\n                                }\n                                Galaxy.emit.debug(\n                                    \"tool-form-base::_buildModel()\",\n                                    \"Initial tool model request failed.\",\n                                    response\n                                );\n                                process.reject();\n                            }\n                        });\n                    },\n                    postchange: function(process, form) {\n                        var current_state = {\n                            tool_id: form.model.get(\"id\"),\n                            tool_version: form.model.get(\"version\"),\n                            inputs: $.extend(true, {}, form.data.create())\n                        };\n                        form.wait(true);\n                        Galaxy.emit.debug(\"tool-form::postchange()\", \"Sending current state.\", current_state);\n                        Utils.request({\n                            type: \"POST\",\n                            url: `${Galaxy.root}api/tools/${form.model.get(\"id\")}/build`,\n                            data: current_state,\n                            success: function(data) {\n                                form.update(data);\n                                form.wait(false);\n                                Galaxy.emit.debug(\"tool-form::postchange()\", \"Received new model.\", data);\n                                process.resolve();\n                            },\n                            error: function(response) {\n                                Galaxy.emit.debug(\"tool-form::postchange()\", \"Refresh request failed.\", response);\n                                process.reject();\n                            }\n                        });\n                    }\n                },\n                options\n            )\n        );\n        this.deferred = this.form.deferred;\n        this.setElement(\"<div/>\");\n        this.$el.append(this.form.$el);\n    },\n\n    _customize: function(form) {\n        var self = this;\n        var options = form.model.attributes;\n        // build execute button\n        var execute_button = new Ui.Button({\n            icon: \"fa-check\",\n            tooltip: `Execute: ${options.name} (${options.version})`,\n            title: _l(\"Execute\"),\n            cls: \"btn btn-primary ui-clear-float\",\n            wait_cls: \"btn btn-info ui-clear-float\",\n            onclick: function() {\n                execute_button.wait();\n                form.portlet.disable();\n                self.submit(options, () => {\n                    execute_button.unwait();\n                    form.portlet.enable();\n                });\n            }\n        });\n        options.buttons = { execute: execute_button };\n\n        // remap feature\n        if (options.job_id && options.job_remap) {\n            if (options.job_remap === \"job_produced_collection_elements\") {\n                var label = \"Replace elements in collection ?\";\n                var help =\n                    \"The previous run of this tool failed. Use this option to replace the failed element(s) in the dataset collectio that were produced during the previous tool run.\";\n            } else {\n                var label = \"Resume dependencies from this job ?\";\n                var help =\n                    \"The previous run of this tool failed and other tools were waiting for it to finish successfully. Use this option to resume those tools using the new output(s) of this tool run.\";\n            }\n            options.inputs.push({\n                label: label,\n                name: \"rerun_remap_job_id\",\n                type: \"select\",\n                display: \"radio\",\n                ignore: \"__ignore__\",\n                value: \"__ignore__\",\n                options: [[\"Yes\", options.job_id], [\"No\", \"__ignore__\"]],\n                help: help\n            });\n        }\n\n        // Job Re-use Options\n        var extra_user_preferences = {};\n        if (Galaxy.user.attributes.preferences && \"extra_user_preferences\" in Galaxy.user.attributes.preferences) {\n            extra_user_preferences = JSON.parse(Galaxy.user.attributes.preferences.extra_user_preferences);\n        }\n        var use_cached_job =\n            \"use_cached_job|use_cached_job_checkbox\" in extra_user_preferences\n                ? extra_user_preferences[\"use_cached_job|use_cached_job_checkbox\"]\n                : false;\n        if (use_cached_job === \"true\") {\n            options.inputs.push({\n                label: \"BETA: Attempt to re-use jobs with identical parameters ?\",\n                help: \"This may skip executing jobs that you have already run\",\n                name: \"use_cached_job\",\n                type: \"select\",\n                display: \"radio\",\n                ignore: \"__ignore__\",\n                value: \"__ignore__\",\n                options: [[\"No\", false], [\"Yes\", true]]\n            });\n        }\n    },\n\n    /** Submit a regular job.\n     * @param{dict}     options   - Specifies tool id and version\n     * @param{function} callback  - Called when request has completed\n     */\n    submit: function(options, callback) {\n        var self = this;\n        var job_def = {\n            tool_id: options.id,\n            tool_version: options.version,\n            inputs: this.form.data.create()\n        };\n        this.form.trigger(\"reset\");\n        if (!self.validate(job_def)) {\n            Galaxy.emit.debug(\"tool-form::submit()\", \"Submission canceled. Validation failed.\");\n            callback && callback();\n            return;\n        }\n        if (options.action !== `${Galaxy.root}tool_runner/index`) {\n            var $f = $(\"<form/>\").attr({\n                action: options.action,\n                method: options.method,\n                enctype: options.enctype\n            });\n            _.each(job_def.inputs, (value, key) => {\n                $f.append($(\"<input/>\").attr({ name: key, value: value }));\n            });\n            $f\n                .hide()\n                .appendTo(\"body\")\n                .submit()\n                .remove();\n            callback && callback();\n            return;\n        }\n        Galaxy.emit.debug(\"tool-form::submit()\", \"Validation complete.\", job_def);\n        Utils.request({\n            type: \"POST\",\n            url: `${Galaxy.root}api/tools`,\n            data: job_def,\n            success: function(response) {\n                callback && callback();\n                self.$el.children().hide();\n                self.$el.append(self._templateSuccess(response));\n                // Show Webhook if job is running\n                if (response.jobs && response.jobs.length > 0) {\n                    self.$el.append($(\"<div/>\", { id: \"webhook-view\" }));\n                    var WebhookApp = new Webhooks.WebhookView({\n                        type: \"tool\",\n                        toolId: job_def.tool_id\n                    });\n                }\n                parent.Galaxy && parent.Galaxy.currHistoryPanel && parent.Galaxy.currHistoryPanel.refreshContents();\n            },\n            error: function(response) {\n                callback && callback();\n                Galaxy.emit.debug(\"tool-form::submit\", \"Submission failed.\", response);\n                var input_found = false;\n                if (response && response.err_data) {\n                    var error_messages = self.form.data.matchResponse(response.err_data);\n                    for (var input_id in error_messages) {\n                        self.form.highlight(input_id, error_messages[input_id]);\n                        input_found = true;\n                        break;\n                    }\n                }\n                if (!input_found) {\n                    self.modal.show({\n                        title: _l(\"Job submission failed\"),\n                        body: self._templateError(job_def, response && response.err_msg),\n                        buttons: {\n                            Close: function() {\n                                self.modal.hide();\n                            }\n                        }\n                    });\n                }\n            }\n        });\n    },\n\n    /** Validate job dictionary.\n     * @param{dict}     job_def   - Job execution dictionary\n     */\n    validate: function(job_def) {\n        var job_inputs = job_def.inputs;\n        var batch_n = -1;\n        var batch_src = null;\n        for (var job_input_id in job_inputs) {\n            var input_value = job_inputs[job_input_id];\n            var input_id = this.form.data.match(job_input_id);\n            var input_field = this.form.field_list[input_id];\n            var input_def = this.form.input_list[input_id];\n            if (!input_id || !input_def || !input_field) {\n                Galaxy.emit.debug(\"tool-form::validate()\", \"Retrieving input objects failed.\");\n                continue;\n            }\n            if (!input_def.optional && input_value == null) {\n                this.form.highlight(input_id);\n                return false;\n            }\n            if (input_value && input_value.batch) {\n                var n = input_value.values.length;\n                var src = n > 0 && input_value.values[0] && input_value.values[0].src;\n                if (src) {\n                    if (batch_src === null) {\n                        batch_src = src;\n                    } else if (batch_src !== src) {\n                        this.form.highlight(\n                            input_id,\n                            \"Please select either dataset or dataset list fields for all batch mode fields.\"\n                        );\n                        return false;\n                    }\n                }\n                if (batch_n === -1) {\n                    batch_n = n;\n                } else if (batch_n !== n) {\n                    this.form.highlight(\n                        input_id,\n                        `Please make sure that you select the same number of inputs for all batch mode fields. This field contains <b>${n}</b> selection(s) while a previous field contains <b>${batch_n}</b>.`\n                    );\n                    return false;\n                }\n            }\n        }\n        return true;\n    },\n\n    _templateSuccess: function(response) {\n        if (response.jobs && response.jobs.length > 0) {\n            var njobs = response.jobs.length;\n            var njobs_text = njobs == 1 ? \"1 job has\" : `${njobs} jobs have`;\n            var $message = $(\"<div/>\")\n                .addClass(\"donemessagelarge\")\n                .append(\n                    $(\"<p/>\").text(\n                        `${njobs_text} been successfully added to the queue - resulting in the following datasets:`\n                    )\n                );\n            _.each(response.outputs, output => {\n                $message.append(\n                    $(\"<p/>\")\n                        .addClass(\"messagerow\")\n                        .append($(\"<b/>\").text(`${output.hid}: ${output.name}`))\n                );\n            });\n            $message.append(\n                $(\"<p/>\")\n                    .append(\"<b/>\")\n                    .text(\n                        \"You can check the status of queued jobs and view the resulting data by refreshing the History pane. When the job has been run the status will change from 'running' to 'finished' if completed successfully or 'error' if problems were encountered.\"\n                    )\n            );\n            return $message;\n        } else {\n            return this._templateError(response, \"Invalid success response. No jobs found.\");\n        }\n    },\n\n    _templateError: function(response, err_msg) {\n        return $(\"<div/>\")\n            .addClass(\"errormessagelarge\")\n            .append(\n                $(\"<p/>\").text(\n                    `The server could not complete the request. Please contact the Galaxy Team if this error persists. ${err_msg ||\n                        \"\"}`\n                )\n            )\n            .append($(\"<pre/>\").text(JSON.stringify(response, null, 4)));\n    }\n});\n\nexport default {\n    View: View\n};\n"]}