{"version":3,"sources":["mvc/annotation.js"],"names":["AnnotationEditor","Backbone","View","extend","LoggableMixin","HiddenUntilActivatedViewMixin","tagName","className","initialize","options","tooltipConfig","placement","listenTo","model","render","hiddenUntilActivated","$activator","view","$el","html","_template","$annotation","make_text_editable","use_textarea","on_finish","newAnnotation","text","save","annotation","silent","fail","previous","get","_","escape","join","find","remove","off","stopListening","prototype","call","toString"],"mappings":";;;;;;;;;;;;;;;;;AAGA;AACA;;AAEA,QAAIA,mBAAmBC,SAASC,IAAT,CAAcC,MAAd,CAAqB,kBAAQC,aAA7B,EAClBD,MADkB,CACX,kBAAQE,6BADG,EAElBF,MAFkB,CAEX;AACJG,iBAAS,KADL;AAEJC,mBAAW,oBAFP;;AAIJ;AACAC,oBAAY,oBAASC,OAAT,EAAkB;AAC1BA,sBAAUA,WAAW,EAArB;AACA,iBAAKC,aAAL,GAAqBD,QAAQC,aAAR,IAAyB;AAC1CC,2BAAW;AAD+B,aAA9C;AAGA;AACA;AACA,iBAAKC,QAAL,CAAc,KAAKC,KAAnB,EAA0B,mBAA1B,EAA+C,YAAW;AACtD,qBAAKC,MAAL;AACH,aAFD;AAGA,iBAAKC,oBAAL,CAA0BN,QAAQO,UAAlC,EAA8CP,OAA9C;AACH,SAhBG;;AAkBJ;AACAK,gBAAQ,kBAAW;AACf,gBAAIG,OAAO,IAAX;AACA,iBAAKC,GAAL,CAASC,IAAT,CAAc,KAAKC,SAAL,EAAd;;AAEA;AACA,iBAAKC,WAAL,GAAmBC,kBAAnB,CAAsC;AAClCC,8BAAc,IADoB;AAElCC,2BAAW,mBAASC,aAAT,EAAwB;AAC/BR,yBAAKI,WAAL,GAAmBK,IAAnB,CAAwBD,aAAxB;AACAR,yBAAKJ,KAAL,CAAWc,IAAX,CAAgB,EAAEC,YAAYH,aAAd,EAAhB,EAA+C,EAAEI,QAAQ,IAAV,EAA/C,EAAiEC,IAAjE,CAAsE,YAAM;AACxEb,6BAAKI,WAAL,GAAmBK,IAAnB,CAAwBT,KAAKJ,KAAL,CAAWkB,QAAX,CAAoB,YAApB,CAAxB;AACH,qBAFD;AAGH;AAPiC,aAAtC;AASA,mBAAO,IAAP;AACH,SAlCG;;AAoCJ;AACAX,mBAAW,qBAAW;AAClB,gBAAIQ,aAAa,KAAKf,KAAL,CAAWmB,GAAX,CAAe,YAAf,CAAjB;AACA,mBAAO;AACH;AACA,oCAFG,EAGH,4BAAG,YAAH,CAHG,EAIH,UAJG;AAKH;AACA,sCANG,EAOHC,EAAEC,MAAF,CAASN,UAAT,CAPG,EAQH,QARG,EASLO,IATK,CASA,EATA,CAAP;AAUH,SAjDG;;AAmDJ;AACAd,qBAAa,uBAAW;AACpB,mBAAO,KAAKH,GAAL,CAASkB,IAAT,CAAc,aAAd,CAAP;AACH,SAtDG;;AAwDJ;AACAC,gBAAQ,kBAAW;AACf,iBAAKhB,WAAL,CAAiBiB,GAAjB;AACA,iBAAKC,aAAL,CAAmB,KAAK1B,KAAxB;AACAZ,qBAASC,IAAT,CAAcsC,SAAd,CAAwBH,MAAxB,CAA+BI,IAA/B,CAAoC,IAApC;AACH,SA7DG;;AA+DJ;AACAC,kBAAU,oBAAW;AACjB,mBAAO,CAAC,mBAAD,OAAyB,KAAK7B,KAA9B,EAAuC,GAAvC,EAA4CsB,IAA5C,CAAiD,EAAjD,CAAP;AACH;AAlEG,KAFW,CAAvB;AAsEA;sBACe;AACXnC,0BAAkBA;AADP,K","file":"../../scripts/mvc/annotation.js","sourcesContent":["import baseMVC from \"mvc/base-mvc\";\nimport _l from \"utils/localization\";\nimport \"ui/editable-text\";\n// =============================================================================\n/** A view on any model that has a 'annotation' attribute\n */\nvar AnnotationEditor = Backbone.View.extend(baseMVC.LoggableMixin)\n    .extend(baseMVC.HiddenUntilActivatedViewMixin)\n    .extend({\n        tagName: \"div\",\n        className: \"annotation-display\",\n\n        /** Set up listeners, parse options */\n        initialize: function(options) {\n            options = options || {};\n            this.tooltipConfig = options.tooltipConfig || {\n                placement: \"bottom\"\n            };\n            //console.debug( this, options );\n            // only listen to the model only for changes to annotations\n            this.listenTo(this.model, \"change:annotation\", function() {\n                this.render();\n            });\n            this.hiddenUntilActivated(options.$activator, options);\n        },\n\n        /** Build the DOM elements, call select to on the created input, and set up behaviors */\n        render: function() {\n            var view = this;\n            this.$el.html(this._template());\n\n            //TODO: handle empties better\n            this.$annotation().make_text_editable({\n                use_textarea: true,\n                on_finish: function(newAnnotation) {\n                    view.$annotation().text(newAnnotation);\n                    view.model.save({ annotation: newAnnotation }, { silent: true }).fail(() => {\n                        view.$annotation().text(view.model.previous(\"annotation\"));\n                    });\n                }\n            });\n            return this;\n        },\n\n        /** @returns {String} the html text used to build the view's DOM */\n        _template: function() {\n            var annotation = this.model.get(\"annotation\");\n            return [\n                //TODO: make prompt optional\n                '<label class=\"prompt\">',\n                _l(\"Annotation\"),\n                \"</label>\",\n                // set up initial tags by adding as CSV to input vals (necc. to init select2)\n                '<div class=\"annotation\">',\n                _.escape(annotation),\n                \"</div>\"\n            ].join(\"\");\n        },\n\n        /** @returns {jQuery} the main element for this view */\n        $annotation: function() {\n            return this.$el.find(\".annotation\");\n        },\n\n        /** shut down event listeners and remove this view's DOM */\n        remove: function() {\n            this.$annotation.off();\n            this.stopListening(this.model);\n            Backbone.View.prototype.remove.call(this);\n        },\n\n        /** string rep */\n        toString: function() {\n            return [\"AnnotationEditor(\", `${this.model}`, \")\"].join(\"\");\n        }\n    });\n// =============================================================================\nexport default {\n    AnnotationEditor: AnnotationEditor\n};\n"]}