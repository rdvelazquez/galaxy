{"version":3,"sources":["mvc/grid/grid-model.js"],"names":["Backbone","Model","extend","defaults","url_base","async","async_ops","categorical_filters","filters","sort_key","show_item_checkboxes","advanced_search","cur_page","num_pages","operation","undefined","item_ids","add_filter","key","value","append","cur_val","attributes","new_val","values","indexOf","push","remove_filter","condition","condition_index","_","get_url_data","url_data","sort","page","id","self","each","pairs","k","get_url","args","get","$","param"],"mappings":"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","file":"../../../scripts/mvc/grid/grid-model.js","sourcesContent":["// dependencies\n\n// grid model\nexport default Backbone.Model.extend({\n    defaults: {\n        url_base: \"\",\n        async: false,\n        async_ops: [],\n        categorical_filters: [],\n        filters: {},\n        sort_key: null,\n        show_item_checkboxes: false,\n        advanced_search: false,\n        cur_page: 1,\n        num_pages: 1,\n        operation: undefined,\n        item_ids: undefined\n    },\n\n    /**\n     * Add filtering criterion.\n     */\n    add_filter: function(key, value, append) {\n        // Update URL arg with new condition.\n        if (append) {\n            // Update or append value.\n            var cur_val = this.attributes.filters[key];\n\n            var new_val;\n            if (cur_val === null || cur_val === undefined) {\n                new_val = value;\n            } else if (typeof cur_val == \"string\") {\n                if (cur_val == \"All\" || cur_val == value) {\n                    new_val = value;\n                } else {\n                    // Replace string with array.\n                    var values = [];\n                    values[0] = cur_val;\n                    values[1] = value;\n                    new_val = values;\n                }\n            } else {\n                // Current value is an array.\n                new_val = cur_val;\n                if (new_val.indexOf(value) === -1) {\n                    new_val.push(value);\n                }\n            }\n            this.attributes.filters[key] = new_val;\n        } else {\n            // Replace value.\n            this.attributes.filters[key] = value;\n        }\n    },\n\n    /**\n     * Remove filtering criterion.\n     */\n    remove_filter: function(key, condition) {\n        var cur_val = this.attributes.filters[key];\n        if (cur_val === null || cur_val === undefined) {\n            return false;\n        }\n\n        if (typeof cur_val === \"string\") {\n            // overwrite/remove condition.\n            this.attributes.filters[key] = \"\";\n        } else {\n            // filter contains an array of conditions.\n            var condition_index = _.indexOf(cur_val, condition);\n            if (condition_index !== -1) {\n                cur_val[condition_index] = \"\";\n            }\n        }\n    },\n\n    /**\n     * Returns URL data for obtaining a new grid.\n     */\n    get_url_data: function() {\n        var url_data = {\n            async: this.attributes.async,\n            sort: this.attributes.sort_key,\n            page: this.attributes.cur_page,\n            show_item_checkboxes: this.attributes.show_item_checkboxes,\n            advanced_search: this.attributes.advanced_search\n        };\n\n        // Add operation, item_ids only if they have values.\n        if (this.attributes.operation) {\n            url_data.operation = this.attributes.operation;\n        }\n        if (this.attributes.item_ids) {\n            url_data.id = this.attributes.item_ids;\n        }\n\n        // Add filter arguments to data, placing \"f-\" in front of all arguments.\n        var self = this;\n        _.each(_.pairs(self.attributes.filters), k => {\n            url_data[`f-${k[0]}`] = k[1];\n        });\n        return url_data;\n    },\n\n    // Return URL for obtaining a new grid\n    get_url: function(args) {\n        return `${this.get(\"url_base\")}?${$.param(this.get_url_data())}&${$.param(args)}`;\n    }\n});\n"]}