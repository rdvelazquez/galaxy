{"version":3,"sources":["mvc/history/job-dag.js"],"names":["_super","Graph","JobDAG","options","self","filters","_jobsData","_historyContentsMap","_toolMap","_outputIdToJobMap","noInputJobs","noOutputJobs","filteredSetMetadata","filteredErroredJobs","dataKeys","call","_","pick","omit","prototype","constructor","init","_init","defaults","excludeSetMetadata","_initFilters","__initFilters","push","filterSetMetadata","jobData","job","tool_id","id","excludeErroredJobs","filterErrored","state","isArray","concat","debug","length","read","_read","data","has","preprocessHistoryContents","historyContents","preprocessTools","tools","preprocessJobs","jobs","createGraph","_filterJobs","_preprocessHistoryContents","info","forEach","content","i","clone","_preprocessTools","each","tool","_preprocessJobs","sort","map","preprocessJob","_sort","cmpCreate","a","b","create_time","_preprocessJob","index","inputs","_processInputs","size","outputs","_processOutputs","__processInputs","inputMap","input","nameInJob","_validateInputOutput","name","__validateInputOutput","inputOutput","Error","JSON","stringify","src","__processOutputs","outputMap","output","__filterJobs","filter","j","_filterJob","_createGraph","jobsData","createVertex","targetId","inputId","sourceId","joblessVertex","createJobLessVertex","createEdge","directed","dataset","toVerticesAndEdges","_createJobLessVertex","contentId","JOBLESS_ID_MANGLER","mangledId","weakComponentGraphArray","dag","weakComponents","component","vertices","aCreateTime","bCreateTime","_jobsDataMap","jobsDataMap"],"mappings":"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","file":"../../../scripts/mvc/history/job-dag.js","sourcesContent":["import GRAPH from \"utils/graph\";\nimport addLogging from \"utils/add-logging\";\n\n// ============================================================================\nvar _super = GRAPH.Graph;\n/** A Directed acyclic Graph built from a history's job data.\n *      Reads in job json, filters and process that json, and builds a graph\n *      using the connections between job inputs and outputs.\n */\nvar JobDAG = function(options) {\n    options = options || {};\n    var self = this;\n    //this.logger = console;\n\n    self.filters = [];\n\n    // instance vars\n    //TODO: needed?\n    self._jobsData = [];\n    self._historyContentsMap = {};\n    self._toolMap = {};\n\n    self._outputIdToJobMap = {};\n    self.noInputJobs = [];\n    self.noOutputJobs = [];\n\n    //TODO: save these?\n    self.filteredSetMetadata = [];\n    self.filteredErroredJobs = [];\n\n    self.dataKeys = [\"jobs\", \"historyContents\", \"tools\"];\n    _super.call(self, true, _.pick(options, self.dataKeys), _.omit(options, self.dataKeys));\n};\nJobDAG.prototype = new GRAPH.Graph();\nJobDAG.prototype.constructor = JobDAG;\n\n// add logging ability - turn off/on using the this.logger statement above\naddLogging(JobDAG);\n\n// ----------------------------------------------------------------------------\n/** process jobs, options, filters, and any history data, then create the graph */\nJobDAG.prototype.init = function _init(options) {\n    options = options || {};\n\n    var self = this;\n    self.options = _.defaults(options, {\n        excludeSetMetadata: false\n    });\n    self.filters = self._initFilters();\n\n    _super.prototype.init.call(self, options);\n    return self;\n};\n\n/** add job filters based on options */\nJobDAG.prototype._initFilters = function __initFilters() {\n    var self = this;\n    var filters = [];\n\n    if (self.options.excludeSetMetadata) {\n        self.filteredSetMetadata = [];\n        filters.push(function filterSetMetadata(jobData) {\n            if (jobData.job.tool_id !== \"__SET_METADATA__\") {\n                return true;\n            }\n            self.filteredSetMetadata.push(jobData.job.id);\n            return false;\n        });\n    }\n\n    if (self.options.excludeErroredJobs) {\n        self.filteredErroredJobs = [];\n        filters.push(function filterErrored(jobData) {\n            if (jobData.job.state !== \"error\") {\n                return true;\n            }\n            self.filteredErroredJobs.push(jobData.job.id);\n            return false;\n        });\n    }\n\n    // all outputs deleted\n    // all outputs hidden\n\n    if (_.isArray(self.options.filters)) {\n        filters = filters.concat(self.options.filters);\n    }\n    self.debug(\"filters len:\", filters.length);\n    return filters;\n};\n\n/**  */\nJobDAG.prototype.read = function _read(data) {\n    var self = this;\n    if (_.has(data, \"historyContents\") && _.has(data, \"jobs\") && _.has(data, \"tools\")) {\n        // a job dag is composed of these three elements:\n        //  clone the 3 data sources into the DAG, processing the jobs finally using the history and tools\n        self\n            .preprocessHistoryContents(data.historyContents || [])\n            .preprocessTools(data.tools || {})\n            .preprocessJobs(data.jobs || []);\n\n        // filter jobs and create the vertices and edges of the job DAG\n        self.createGraph(self._filterJobs());\n        return self;\n    }\n    return _super.prototype.read.call(this, data);\n};\n\n/**  */\nJobDAG.prototype.preprocessHistoryContents = function _preprocessHistoryContents(historyContents) {\n    this.info(\"processing history\");\n    var self = this;\n    self._historyContentsMap = {};\n\n    historyContents.forEach((content, i) => {\n        self._historyContentsMap[content.id] = _.clone(content);\n    });\n    return self;\n};\n\n/**  */\nJobDAG.prototype.preprocessTools = function _preprocessTools(tools) {\n    this.info(\"processing tools\");\n    var self = this;\n    self._toolMap = {};\n\n    _.each(tools, (tool, id) => {\n        self._toolMap[id] = _.clone(tool);\n    });\n    return self;\n};\n\n/** sort the cloned jobs, decorate with tool and history contents info, and store in prop array */\nJobDAG.prototype.preprocessJobs = function _preprocessJobs(jobs) {\n    this.info(\"processing jobs\");\n    var self = this;\n    self._outputIdToJobMap = {};\n\n    self._jobsData = self.sort(jobs).map(job => self.preprocessJob(_.clone(job)));\n    //console.debug( JSON.stringify( self._jobsData, null, '    ' ) );\n    //console.debug( JSON.stringify( self._outputIdToJobMap, null, '    ' ) );\n    return self;\n};\n\n/** sort the jobs based on update time */\nJobDAG.prototype.sort = function _sort(jobs) {\n    function cmpCreate(a, b) {\n        if (a.create_time > b.create_time) {\n            return 1;\n        }\n        if (a.create_time < b.create_time) {\n            return -1;\n        }\n        return 0;\n    }\n    return jobs.sort(cmpCreate);\n};\n\n/** decorate with input/output datasets and tool */\nJobDAG.prototype.preprocessJob = function _preprocessJob(job, index) {\n    //this.info( 'preprocessJob', job, index );\n    var self = this;\n\n    var jobData = { job: job };\n\n    jobData.inputs = self._processInputs(job);\n    if (_.size(jobData.inputs) === 0) {\n        self.noInputJobs.push(job.id);\n    }\n    jobData.outputs = self._processOutputs(job);\n    if (_.size(jobData.outputs) === 0) {\n        self.noOutputJobs.push(job.id);\n    }\n\n    jobData.tool = self._toolMap[job.tool_id];\n\n    //self.info( '\\t jobData:', jobData );\n    return jobData;\n};\n\n/**\n */\nJobDAG.prototype._processInputs = function __processInputs(job) {\n    var self = this;\n    var inputs = job.inputs;\n    var inputMap = {};\n    _.each(inputs, (input, nameInJob) => {\n        input = _.clone(self._validateInputOutput(input));\n        input.name = nameInJob;\n        // since this is a DAG and we're processing in order of create time,\n        //  the inputs for this job will already be listed in _outputIdToJobMap\n        //  TODO: we can possibly exploit this\n        //console.debug( 'input in _outputIdToJobMap', self._outputIdToJobMap[ input.id ] );\n        input.content = self._historyContentsMap[input.id];\n        inputMap[input.id] = input;\n    });\n    return inputMap;\n};\n\n/**\n */\nJobDAG.prototype._validateInputOutput = function __validateInputOutput(inputOutput) {\n    if (!inputOutput.id) {\n        throw new Error(\"No id on job input/output: \", JSON.stringify(inputOutput));\n    }\n    if (!inputOutput.src || inputOutput.src !== \"hda\") {\n        throw new Error(\"Bad src on job input/output: \", JSON.stringify(inputOutput));\n    }\n    return inputOutput;\n};\n\n/**\n */\nJobDAG.prototype._processOutputs = function __processOutputs(job) {\n    var self = this;\n    var outputs = job.outputs;\n    var outputMap = {};\n    _.each(outputs, (output, nameInJob) => {\n        output = _.clone(self._validateInputOutput(output));\n        output.name = nameInJob;\n        // add dataset content to jobData\n        output.content = self._historyContentsMap[output.id];\n        outputMap[output.id] = output;\n\n        self._outputIdToJobMap[output.id] = job.id;\n    });\n    return outputMap;\n};\n\n/**  */\nJobDAG.prototype._filterJobs = function __filterJobs() {\n    var self = this;\n    return self._jobsData.filter((j, i) => self._filterJob(j, i));\n};\n\n/**\n */\nJobDAG.prototype._filterJob = function _filterJob(jobData, index) {\n    // apply filters after processing job allowing access to the additional data above inside the filters\n    var self = this;\n    for (var i = 0; i < self.filters.length; i++) {\n        if (!self.filters[i].call(self, jobData)) {\n            self.debug(\"\\t job\", jobData.job.id, \" has been filtered out by function:\\n\", self.filters[i]);\n            return false;\n        }\n    }\n    return true;\n};\n\n/** Walk all the jobs (vertices), attempting to find connections\n *  between datasets used as both inputs and outputs (edges)\n */\nJobDAG.prototype.createGraph = function _createGraph(jobsData) {\n    var self = this;\n    self.debug(\"connections:\");\n    //console.debug( jobsData );\n\n    _.each(jobsData, jobData => {\n        var id = jobData.job.id;\n        self.debug(\"\\t\", id, jobData);\n        self.createVertex(id, jobData);\n    });\n    _.each(jobsData, jobData => {\n        var targetId = jobData.job.id;\n        _.each(jobData.inputs, (input, inputId) => {\n            //console.debug( '\\t\\t target input:', inputId, input );\n            var sourceId = self._outputIdToJobMap[inputId];\n            //console.debug( '\\t\\t source job id:', sourceId );\n            if (!sourceId) {\n                var joblessVertex = self.createJobLessVertex(inputId);\n                sourceId = joblessVertex.name;\n            }\n            //TODO:?? no checking here whether sourceId is actually in the vertex map\n            //console.debug( '\\t\\t creating edge, source:', sourceId, self.vertices[ sourceId ] );\n            //console.debug( '\\t\\t creating edge, target:', targetId, self.vertices[ targetId ] );\n            self.createEdge(sourceId, targetId, self.directed, {\n                dataset: inputId\n            });\n        });\n    });\n    //console.debug( self.toVerticesAndEdges().edges );\n\n    self.debug(\"final graph: \", JSON.stringify(self.toVerticesAndEdges(), null, \"  \"));\n    return self;\n};\n\n/** Return a 'mangled' version of history contents id to prevent contents <-> job id collision */\nJobDAG.prototype.createJobLessVertex = function _createJobLessVertex(contentId) {\n    // currently, copied contents are the only history contents without jobs (that I know of)\n    //note: following needed to prevent id collision btwn content and jobs in vertex map\n    var JOBLESS_ID_MANGLER = \"copy-\";\n\n    var mangledId = JOBLESS_ID_MANGLER + contentId;\n    return this.createVertex(mangledId, this._historyContentsMap[contentId]);\n};\n\n/** Override to re-sort (ugh) jobs in each component by update time */\nJobDAG.prototype.weakComponentGraphArray = function() {\n    var dag = this;\n    return this.weakComponents().map(component => {\n        //TODO: this seems to belong above (in sort) - why isn't it preserved?\n        // note: using create_time (as opposed to update_time)\n        //  since update_time for jobless/copied datasets is changes more often\n        component.vertices.sort(function cmpCreate(a, b) {\n            var aCreateTime = a.data.job ? a.data.job.create_time : a.data.create_time;\n\n            var bCreateTime = b.data.job ? b.data.job.create_time : b.data.create_time;\n\n            if (aCreateTime > bCreateTime) {\n                return 1;\n            }\n            if (aCreateTime < bCreateTime) {\n                return -1;\n            }\n            return 0;\n        });\n        return new Graph(dag.directed, component);\n    });\n};\n\nJobDAG.prototype._jobsDataMap = function() {\n    var jobsDataMap = {};\n    this._jobsData.forEach(jobData => {\n        jobsDataMap[jobData.job.id] = jobData;\n    });\n    return jobsDataMap;\n};\n\n// ============================================================================\nexport default JobDAG;\n"]}