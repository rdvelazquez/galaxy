{"version":3,"sources":["mvc/history/history-list.js"],"names":["HistoryGridView","extend","initialize","grid_config","ajaxQueue","AjaxQueue","prototype","call","init_grid_elements","stop","fetchDetails","$","makeArray","$el","find","map","i","el","historyId","data","url","Galaxy","root","options","type","success","contentsStates","req","stateHtml","state","stateCount","contentsActive","deleted","hidden","html","xhr","jQuery","ajax","forEach","add","fn","start","_showCopyDialog","id","history","History","fetch","fail","alert","done","window","parent","currHistoryPanel","loadCurrentHistory","location","reload","_add_operation","popup","operation","item","self","settings","operation_config","label","onclick","allowed","allow_popup","addItem","href","url_args","target","confirmation_text","confirm","func","e","preventDefault","encode_id","execute","findItemByHtml","View","Backbone","title","markViewAsLoading","model","Model","get","action_id","param","params","response","set","render","grid","attributes","empty","append"],"mappings":"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","file":"../../../scripts/mvc/history/history-list.js","sourcesContent":["import _l from \"utils/localization\";\nimport AjaxQueue from \"utils/ajax-queue\";\nimport Utils from \"utils/utils\";\n/** This class renders the grid list. */\nimport GridView from \"mvc/grid/grid-view\";\nimport HistoryModel from \"mvc/history/history-model\";\nimport historyCopyDialog from \"mvc/history/copy-dialog\";\nimport LoadingIndicator from \"ui/loading-indicator\";\n\nvar HistoryGridView = GridView.extend({\n    initialize: function(grid_config) {\n        this.ajaxQueue = new AjaxQueue.AjaxQueue();\n        GridView.prototype.initialize.call(this, grid_config);\n    },\n\n    init_grid_elements: function() {\n        const ajaxQueue = this.ajaxQueue;\n        ajaxQueue.stop();\n        GridView.prototype.init_grid_elements.call(this);\n        const fetchDetails = $.makeArray(\n            this.$el.find(\".delayed-value-datasets_by_state\").map((i, el) => {\n                return () => {\n                    const historyId = $(el).data(\"history-id\");\n                    const url = `${\n                        Galaxy.root\n                    }api/histories/${historyId}?keys=nice_size,contents_active,contents_states`;\n                    const options = {};\n                    options.url = url;\n                    options.type = \"GET\";\n                    options.success = req => {\n                        const contentsStates = req[\"contents_states\"];\n                        let stateHtml = \"\";\n                        for (let state of [\"ok\", \"running\", \"queued\", \"new\", \"error\"]) {\n                            const stateCount = contentsStates[state];\n                            if (stateCount) {\n                                stateHtml += `<div class=\"count-box state-color-${state}\" title=\"Datasets in ${state} state\">${stateCount}</div> `;\n                            }\n                        }\n                        const contentsActive = req[\"contents_active\"];\n                        const deleted = contentsActive[\"deleted\"];\n                        if (deleted) {\n                            stateHtml += `<div class=\"count-box state-color-deleted\" title=\"Deleted datasets\">${deleted}</div> `;\n                        }\n                        const hidden = contentsActive[\"hidden\"];\n                        if (hidden) {\n                            stateHtml += `<div class=\"count-box state-color-hidden\" title=\"Hidden datasets\">${hidden}</div> `;\n                        }\n                        $(`.delayed-value-datasets_by_state[data-history-id='${historyId}']`).html(stateHtml);\n                        $(`.delayed-value-disk_size[data-history-id='${historyId}']`).html(req[\"nice_size\"]);\n                    };\n                    var xhr = jQuery.ajax(options);\n                    return xhr;\n                };\n            })\n        );\n        fetchDetails.forEach(fn => ajaxQueue.add(fn));\n        ajaxQueue.start();\n    },\n    _showCopyDialog: function(id) {\n        var history = new HistoryModel.History({ id: id });\n        history\n            .fetch()\n            .fail(() => {\n                alert(\"History could not be fetched. Please contact an administrator\");\n            })\n            .done(() => {\n                historyCopyDialog(history, {}).done(() => {\n                    if (window.parent && window.parent.Galaxy && window.parent.Galaxy.currHistoryPanel) {\n                        window.parent.Galaxy.currHistoryPanel.loadCurrentHistory();\n                    }\n                    window.location.reload(true);\n                });\n            });\n    },\n    /** Add an operation to the items menu */\n    _add_operation: function(popup, operation, item) {\n        var self = this;\n        var settings = item.operation_config[operation.label];\n        if (operation.label == \"Copy\") {\n            operation.onclick = id => {\n                self._showCopyDialog(id);\n            };\n        }\n        if (settings.allowed && operation.allow_popup) {\n            popup.addItem({\n                html: operation.label,\n                href: settings.url_args,\n                target: settings.target,\n                confirmation_text: operation.confirm,\n                func: function(e) {\n                    e.preventDefault();\n                    var label = $(e.target).html();\n                    if (operation.onclick) {\n                        operation.onclick(item.encode_id);\n                    } else {\n                        self.execute(this.findItemByHtml(label));\n                    }\n                }\n            });\n        }\n    }\n});\n\nvar View = Backbone.View.extend({\n    title: _l(\"Histories\"),\n    initialize: function(options) {\n        var self = this;\n        LoadingIndicator.markViewAsLoading(this);\n\n        this.model = new Backbone.Model();\n        Utils.get({\n            url: `${Galaxy.root}history/${options.action_id}?${$.param(Galaxy.params)}`,\n            success: function(response) {\n                self.model.set(response);\n                self.render();\n            }\n        });\n    },\n\n    render: function() {\n        var grid = new HistoryGridView(this.model.attributes);\n        this.$el.empty().append(grid.$el);\n    }\n});\n\nexport default {\n    View: View\n};\n"]}