{"version":3,"sources":["mvc/history/history-preferences.js"],"names":["logNamespace","HistoryPrefs","SessionStorageModel","extend","defaults","expandedIds","show_deleted","show_hidden","addExpanded","model","current","get","id","save","removeExpanded","isExpanded","contentId","_","result","allExpanded","values","clearExpanded","set","includeDeleted","val","isUndefined","includeHidden","toString","storageKeyPrefix","historyStorageKey","historyId","Error","clearAll","key","sessionStorage","indexOf","removeItem"],"mappings":";;;;;;;;;;;;;;;AAEA,QAAIA,eAAe,SAAnB;;AAEA;AACA;AACA,QAAIC,eAAe,kBAASC,mBAAT,CAA6BC,MAA7B;AACf,wCAAqC;AACjC;AACAC,kBAAU;AACN;AACAC,yBAAa,EAFP;AAGNC,0BAAc,KAHR;AAINC,yBAAa;AAJP,SAFuB;;AASjC;AACAC,qBAAa,qBAASC,KAAT,EAAgB;AACzB;AACA,gBAAIC,UAAU,KAAKC,GAAL,CAAS,aAAT,CAAd;AACAD,oBAAQD,MAAMG,EAAd,IAAoBH,MAAME,GAAN,CAAU,IAAV,CAApB;AACA,iBAAKE,IAAL,CAAU,aAAV,EAAyBH,OAAzB;AACH,SAfgC;;AAiBjC;AACAI,wBAAgB,wBAASL,KAAT,EAAgB;AAC5B,gBAAIC,UAAU,KAAKC,GAAL,CAAS,aAAT,CAAd;AACA,mBAAOD,QAAQD,MAAMG,EAAd,CAAP;AACA,iBAAKC,IAAL,CAAU,aAAV,EAAyBH,OAAzB;AACH,SAtBgC;;AAwBjCK,oBAAY,oBAASC,SAAT,EAAoB;AAC5B,mBAAOC,EAAEC,MAAF,CAAS,KAAKP,GAAL,CAAS,aAAT,CAAT,EAAkCK,SAAlC,EAA6C,KAA7C,CAAP;AACH,SA1BgC;;AA4BjCG,qBAAa,uBAAW;AACpB,mBAAOF,EAAEG,MAAF,CAAS,KAAKT,GAAL,CAAS,aAAT,CAAT,CAAP;AACH,SA9BgC;;AAgCjCU,uBAAe,yBAAW;AACtB,iBAAKC,GAAL,CAAS,aAAT,EAAwB,EAAxB;AACH,SAlCgC;;AAoCjCC,wBAAgB,wBAASC,GAAT,EAAc;AAC1B;AACA;AACA,gBAAI,CAACP,EAAEQ,WAAF,CAAcD,GAAd,CAAL,EAAyB;AACrB,qBAAKF,GAAL,CAAS,cAAT,EAAyBE,GAAzB;AACH;AACD,mBAAO,KAAKb,GAAL,CAAS,cAAT,CAAP;AACH,SA3CgC;;AA6CjCe,uBAAe,uBAASF,GAAT,EAAc;AACzB;AACA,gBAAI,CAACP,EAAEQ,WAAF,CAAcD,GAAd,CAAL,EAAyB;AACrB,qBAAKF,GAAL,CAAS,aAAT,EAAwBE,GAAxB;AACH;AACD,mBAAO,KAAKb,GAAL,CAAS,aAAT,CAAP;AACH,SAnDgC;;AAqDjCgB,kBAAU,oBAAW;AACjB,qCAAuB,KAAKf,EAA5B;AACH;AAvDgC,KADtB,EA0Df;AACI;AACA;AACAgB,0BAAkB,UAHtB;;AAKI;AACAC,2BAAmB,SAASA,iBAAT,CAA2BC,SAA3B,EAAsC;AACrD,gBAAI,CAACA,SAAL,EAAgB;AACZ,sBAAM,IAAIC,KAAJ,qDAA4DD,SAA5D,CAAN;AACH;AACD;AACA,mBAAO7B,aAAa2B,gBAAb,GAAgCE,SAAvC;AACH,SAZL;;AAcI;AACAnB,aAAK,SAASA,GAAT,CAAamB,SAAb,EAAwB;AACzB,mBAAO,IAAI7B,YAAJ,CAAiB;AACpBW,oBAAIX,aAAa4B,iBAAb,CAA+BC,SAA/B;AADgB,aAAjB,CAAP;AAGH,SAnBL;;AAqBI;AACAE,kBAAU,SAASA,QAAT,CAAkBF,SAAlB,EAA6B;AACnC,iBAAK,IAAIG,GAAT,IAAgBC,cAAhB,EAAgC;AAC5B,oBAAID,IAAIE,OAAJ,CAAYlC,aAAa2B,gBAAzB,MAA+C,CAAnD,EAAsD;AAClDM,mCAAeE,UAAf,CAA0BH,GAA1B;AACH;AACJ;AACJ;AA5BL,KA1De,CAAnB;;AA0FA;sBACe;AACXhC,sBAAcA;AADH,K","file":"../../../scripts/mvc/history/history-preferences.js","sourcesContent":["import BASE_MVC from \"mvc/base-mvc\";\n\nvar logNamespace = \"history\";\n\n// ============================================================================\n/** session storage for individual history preferences */\nvar HistoryPrefs = BASE_MVC.SessionStorageModel.extend(\n    /** @lends HistoryPrefs.prototype */ {\n        //TODO:?? move to user prefs?\n        defaults: {\n            //TODO:?? expandedIds to array?\n            expandedIds: {},\n            show_deleted: false,\n            show_hidden: false\n        },\n\n        /** add an hda id to the hash of expanded hdas */\n        addExpanded: function(model) {\n            //TODO: use type_id and not model\n            var current = this.get(\"expandedIds\");\n            current[model.id] = model.get(\"id\");\n            this.save(\"expandedIds\", current);\n        },\n\n        /** remove an hda id from the hash of expanded hdas */\n        removeExpanded: function(model) {\n            var current = this.get(\"expandedIds\");\n            delete current[model.id];\n            this.save(\"expandedIds\", current);\n        },\n\n        isExpanded: function(contentId) {\n            return _.result(this.get(\"expandedIds\"), contentId, false);\n        },\n\n        allExpanded: function() {\n            return _.values(this.get(\"expandedIds\"));\n        },\n\n        clearExpanded: function() {\n            this.set(\"expandedIds\", {});\n        },\n\n        includeDeleted: function(val) {\n            // moving the invocation here so other components don't need to know the key\n            // TODO: change this key later\n            if (!_.isUndefined(val)) {\n                this.set(\"show_deleted\", val);\n            }\n            return this.get(\"show_deleted\");\n        },\n\n        includeHidden: function(val) {\n            // TODO: change this key later\n            if (!_.isUndefined(val)) {\n                this.set(\"show_hidden\", val);\n            }\n            return this.get(\"show_hidden\");\n        },\n\n        toString: function() {\n            return `HistoryPrefs(${this.id})`;\n        }\n    },\n    {\n        // ........................................................................ class vars\n        // class lvl for access w/o instantiation\n        storageKeyPrefix: \"history:\",\n\n        /** key string to store each histories settings under */\n        historyStorageKey: function historyStorageKey(historyId) {\n            if (!historyId) {\n                throw new Error(`HistoryPrefs.historyStorageKey needs valid id: ${historyId}`);\n            }\n            // single point of change\n            return HistoryPrefs.storageKeyPrefix + historyId;\n        },\n\n        /** return the existing storage for the history with the given id (or create one if it doesn't exist) */\n        get: function get(historyId) {\n            return new HistoryPrefs({\n                id: HistoryPrefs.historyStorageKey(historyId)\n            });\n        },\n\n        /** clear all history related items in sessionStorage */\n        clearAll: function clearAll(historyId) {\n            for (var key in sessionStorage) {\n                if (key.indexOf(HistoryPrefs.storageKeyPrefix) === 0) {\n                    sessionStorage.removeItem(key);\n                }\n            }\n        }\n    }\n);\n\n//==============================================================================\nexport default {\n    HistoryPrefs: HistoryPrefs\n};\n"]}