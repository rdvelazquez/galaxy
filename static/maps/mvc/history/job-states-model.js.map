{"version":3,"sources":["mvc/history/job-states-model.js"],"names":["Backbone","UPDATE_DELAY","NON_TERMINAL_STATES","ERROR_STATES","FETCH_STATE_ON_ADD","BATCH_FETCH_STATE","JobStatesSummary","Model","extend","url","Galaxy","root","attributes","history_id","collection_id","hasDetails","has","new","get","errored","anyWithStates","states","anyWithState","queryState","queryStates","index","numWithStates","count","numInError","running","terminal","anyNonTerminal","jobCount","toString","JobStatesSummaryCollection","Collection","model","initialize","on","add","fetch","updateTimeoutId","active","nonTerminalModels","models","filter","ids","map","summary","join","types","historyId","monitor","clearUpdateTimeout","_delayThenMonitorAgain","setTimeout","length","updateFunctions","AjaxQueue","done","remove","clearTimeout"],"mappings":"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","file":"../../../scripts/mvc/history/job-states-model.js","sourcesContent":["import * as Backbone from \"libs/backbone\";\nimport AJAX_QUEUE from \"utils/ajax-queue\";\n\n/** ms between fetches when checking running jobs/datasets for updates */\nvar UPDATE_DELAY = 2000;\nvar NON_TERMINAL_STATES = [\"new\", \"queued\", \"running\"];\nvar ERROR_STATES = [\"error\", \"deleted\"];\n/** Fetch state on add or just wait for polling to start. */\nvar FETCH_STATE_ON_ADD = false;\nvar BATCH_FETCH_STATE = true;\n\nvar JobStatesSummary = Backbone.Model.extend({\n    url: function() {\n        return `${Galaxy.root}api/histories/${this.attributes.history_id}/contents/dataset_collections/${\n            this.attributes.collection_id\n        }/jobs_summary`;\n    },\n\n    hasDetails: function() {\n        return this.has(\"populated_state\");\n    },\n\n    new: function() {\n        return !this.hasDetails() || this.get(\"populated_state\") == \"new\";\n    },\n\n    errored: function() {\n        return this.get(\"populated_state\") === \"error\" || this.anyWithStates(ERROR_STATES);\n    },\n\n    states: function() {\n        return this.get(\"states\") || {};\n    },\n\n    anyWithState: function(queryState) {\n        return (this.states()[queryState] || 0) > 0;\n    },\n\n    anyWithStates: function(queryStates) {\n        var states = this.states();\n        for (var index in queryStates) {\n            if ((states[queryStates[index]] || 0) > 0) {\n                return true;\n            }\n        }\n        return false;\n    },\n\n    numWithStates: function(queryStates) {\n        var states = this.states();\n        var count = 0;\n        for (var index in queryStates) {\n            count += states[queryStates[index]] || 0;\n        }\n        return count;\n    },\n\n    numInError: function() {\n        return this.numWithStates(ERROR_STATES);\n    },\n\n    running: function() {\n        return this.anyWithState(\"running\");\n    },\n\n    terminal: function() {\n        if (this.new()) {\n            return false;\n        } else {\n            var anyNonTerminal = this.anyWithStates(NON_TERMINAL_STATES);\n            return !anyNonTerminal;\n        }\n    },\n\n    jobCount: function() {\n        var states = this.states();\n        var count = 0;\n        for (var index in states) {\n            count += states[index];\n        }\n        return count;\n    },\n\n    toString: function() {\n        return `JobStatesSummary(id=${this.get(\"id\")})`;\n    }\n});\n\nvar JobStatesSummaryCollection = Backbone.Collection.extend({\n    model: JobStatesSummary,\n\n    initialize: function() {\n        if (FETCH_STATE_ON_ADD) {\n            this.on({\n                add: model => model.fetch()\n            });\n        }\n\n        /** cached timeout id for the dataset updater */\n        this.updateTimeoutId = null;\n        // this.checkForUpdates();\n        this.active = true;\n    },\n\n    url: function() {\n        var nonTerminalModels = this.models.filter(model => {\n            return !model.terminal();\n        });\n        var ids = nonTerminalModels\n            .map(summary => {\n                return summary.get(\"id\");\n            })\n            .join(\",\");\n        var types = nonTerminalModels\n            .map(summary => {\n                return summary.get(\"model\");\n            })\n            .join(\",\");\n        return `${Galaxy.root}api/histories/${this.historyId}/jobs_summary?ids=${ids}&types=${types}`;\n    },\n\n    monitor: function() {\n        this.clearUpdateTimeout();\n        if (!this.active) {\n            return;\n        }\n\n        var _delayThenMonitorAgain = () => {\n            this.updateTimeoutId = setTimeout(() => {\n                this.monitor();\n            }, UPDATE_DELAY);\n        };\n\n        var nonTerminalModels = this.models.filter(model => {\n            return !model.terminal();\n        });\n\n        if (nonTerminalModels.length > 0 && !BATCH_FETCH_STATE) {\n            // Allow models to fetch their own details.\n            var updateFunctions = nonTerminalModels.map(summary => {\n                return () => {\n                    return summary.fetch();\n                };\n            });\n\n            return new AJAX_QUEUE.AjaxQueue(updateFunctions).done(_delayThenMonitorAgain);\n        } else if (nonTerminalModels.length > 0) {\n            // Batch fetch updated state...\n            this.fetch({ remove: false }).done(_delayThenMonitorAgain);\n        } else {\n            _delayThenMonitorAgain();\n        }\n    },\n\n    /** clear the timeout and the cached timeout id */\n    clearUpdateTimeout: function() {\n        if (this.updateTimeoutId) {\n            clearTimeout(this.updateTimeoutId);\n            this.updateTimeoutId = null;\n        }\n    },\n\n    toString: function() {\n        return `JobStatesSummaryCollection()`;\n    }\n});\n\nexport default { JobStatesSummary, JobStatesSummaryCollection, FETCH_STATE_ON_ADD };\n"]}