{"version":3,"sources":["mvc/history/history-model.js"],"names":["_","Backbone","History","Model","extend","LoggableMixin","mixin","SearchableModelMixin","_logNamespace","UPDATE_DELAY","defaults","model_class","id","name","state","deleted","contents_active","contents_states","urlRoot","Galaxy","root","contentsClass","HistoryContents","searchAttributes","searchAliases","title","tag","initialize","historyJSON","options","logger","log","contents","history","historyId","get","order","_setUpListeners","_setUpCollectionListeners","updateTimeoutId","on","error","model","xhr","msg","details","clearUpdateTimeout","newId","listenTo","trigger","apply","jQuery","makeArray","arguments","contentsShown","contentsActive","shown","active","includeDeleted","includeHidden","hidden","nice_size","size","bytesToString","toJSON","prototype","call","key","ownedByCurrUser","user","isAnonymous","numOfUnfinishedJobs","unfinishedJobIds","length","numOfUnfinishedShownContents","runningAndActive","_fetchContentRelatedAttributes","contentRelatedAttrs","fetch","data","param","keys","join","refresh","lastUpdateTime","allFetched","fetchFn","currentPage","fetchPage","fetchUpdated","done","response","status","serverResponseDatetime","Date","getResponseHeader","err","console","checkForUpdates","delay","_delayThenUpdate","setTimeout","nonReadyContentCount","clearTimeout","stopPolling","parse","parsed","create_time","update_time","fetchWithContents","contentsOptions","self","view","then","getContents","setHistoryId","fetchContents","fetchCurrentPage","_delete","when","save","purge","purged","undelete","copy","current","allDatasets","undefined","Error","postData","history_id","all_datasets","post","newHistory","setAsCurrent","getJSON","toString","_collectionSuper","InfinitelyScrollingCollection","HistoryCollection","limitOnFirstFetch","limitPerFetch","models","currentHistoryId","setUpListeners","url","debug","remove","copied","original","newData","setCurrent","oldCurrentId","_buildFetchData","_buildFetchFilters","superFilters","filters","fetchFirst","silent","limit","offset","fetchMore","comparators","clone","buildComparator","ascending","sort","currentHistory","unshift","create","hdas","historyOptions","xhrOptions","collection"],"mappings":";;;;;;;;;;;;;;;;;QAKYA,C;;QACAC,Q;;;;;;;;;;;;;;;;;;;;;;;;;AAEZ;AACA;;AAEA;AACA;;;;;AAKA,QAAIC,UAAUD,SAASE,KAAT,CAAeC,MAAf,CAAsB,kBAASC,aAA/B,EAA8CD,MAA9C,CACV,kBAASE,KAAT,CACI,kBAASC,oBADb;AAEI,mCAAgC;AAC5BC,uBAAe,SADa;;AAG5B;AACAC,sBAAc,IAJc;;AAM5B;AACAC,kBAAU;AACNC,yBAAa,SADP;AAENC,gBAAI,IAFE;AAGNC,kBAAM,iBAHA;AAINC,mBAAO,KAJD;;AAMNC,qBAAS,KANH;AAONC,6BAAiB,EAPX;AAQNC,6BAAiB;AARX,SAPkB;;AAkB5BC,iBAAYC,OAAOC,IAAnB,kBAlB4B;;AAoB5BC,uBAAe,0BAAiBC,eApBJ;;AAsB5B;AACAC,0BAAkB,CAAC,MAAD,EAAS,YAAT,EAAuB,MAAvB,CAvBU;;AAyB5B;AACAC,uBAAe;AACXC,mBAAO,MADI;AAEXC,iBAAK;AAFM,SA1Ba;;AA+B5B;AACA;;;;AAIAC,oBAAY,oBAASC,WAAT,EAAsBC,OAAtB,EAA+B;AACvCA,sBAAUA,WAAW,EAArB;AACA,iBAAKC,MAAL,GAAcD,QAAQC,MAAR,IAAkB,IAAhC;AACA,iBAAKC,GAAL,CAAY,IAAZ,mBAAgCH,WAAhC,EAA6CC,OAA7C;;AAEA;AACA,iBAAKG,QAAL,GAAgB,IAAI,KAAKX,aAAT,CAAuB,EAAvB,EAA2B;AACvCY,yBAAS,IAD8B;AAEvCC,2BAAW,KAAKC,GAAL,CAAS,IAAT,CAF4B;AAGvCC,uBAAOP,QAAQO;AAHwB,aAA3B,CAAhB;;AAMA,iBAAKC,eAAL;AACA,iBAAKC,yBAAL;;AAEA;AACA,iBAAKC,eAAL,GAAuB,IAAvB;AACH,SArD2B;;AAuD5B;;;AAGAF,yBAAiB,2BAAW;AACxB;AACA,mBAAO,KAAKG,EAAL,CAAQ;AACXC,uBAAO,eAASC,KAAT,EAAgBC,GAAhB,EAAqBd,OAArB,EAA8Be,GAA9B,EAAmCC,OAAnC,EAA4C;AAC/C,yBAAKC,kBAAL;AACH,iBAHU;AAIX,6BAAa,kBAASJ,KAAT,EAAgBK,KAAhB,EAAuB;AAChC,wBAAI,KAAKf,QAAT,EAAmB;AACf,6BAAKA,QAAL,CAAcE,SAAd,GAA0Ba,KAA1B;AACH;AACJ;AARU,aAAR,CAAP;AAUH,SAtE2B;;AAwE5B;AACAT,mCAA2B,qCAAW;AAClC,gBAAI,CAAC,KAAKN,QAAV,EAAoB;AAChB,uBAAO,IAAP;AACH;AACD;AACA,mBAAO,KAAKgB,QAAL,CAAc,KAAKhB,QAAnB,EAA6B;AAChCS,uBAAO,iBAAW;AACd,yBAAKQ,OAAL,CAAaC,KAAb,CAAmB,IAAnB,EAAyBC,OAAOC,SAAP,CAAiBC,SAAjB,CAAzB;AACH;AAH+B,aAA7B,CAAP;AAKH,SAnF2B;;AAqF5B;AACA;AACAC,uBAAe,yBAAW;AACtB,gBAAIC,iBAAiB,KAAKpB,GAAL,CAAS,iBAAT,CAArB;AACA,gBAAIqB,QAAQD,eAAeE,MAAf,IAAyB,CAArC;AACAD,qBAAS,KAAKxB,QAAL,CAAc0B,cAAd,GAA+BH,eAAexC,OAA9C,GAAwD,CAAjE;AACAyC,qBAAS,KAAKxB,QAAL,CAAc2B,aAAd,GAA8BJ,eAAeK,MAA7C,GAAsD,CAA/D;AACA,mBAAOJ,KAAP;AACH,SA7F2B;;AA+F5B;AACAK,mBAAW,qBAAW;AAClB,gBAAIC,OAAO,KAAK3B,GAAL,CAAS,MAAT,CAAX;AACA,mBAAO2B,OAAO,gBAAMC,aAAN,CAAoBD,IAApB,EAA0B,IAA1B,EAAgC,CAAhC,CAAP,GAA4C,4BAAG,SAAH,CAAnD;AACH,SAnG2B;;AAqG5B;AACAE,gBAAQ,kBAAW;AACf,mBAAOhE,EAAEI,MAAF,CAASH,SAASE,KAAT,CAAe8D,SAAf,CAAyBD,MAAzB,CAAgCE,IAAhC,CAAqC,IAArC,CAAT,EAAqD;AACxDL,2BAAW,KAAKA,SAAL;AAD6C,aAArD,CAAP;AAGH,SA1G2B;;AA4G5B;AACA1B,aAAK,aAASgC,GAAT,EAAc;AACf,gBAAIA,QAAQ,WAAZ,EAAyB;AACrB,uBAAO,KAAKN,SAAL,EAAP;AACH;AACD,mBAAO5D,SAASE,KAAT,CAAe8D,SAAf,CAAyB9B,GAAzB,CAA6Be,KAA7B,CAAmC,IAAnC,EAAyCG,SAAzC,CAAP;AACH,SAlH2B;;AAoH5B;AACA;;;AAGAe,yBAAiB,2BAAW;AACxB;AACA,gBAAI,CAACjD,MAAD,IAAW,CAACA,OAAOkD,IAAvB,EAA6B;AACzB,uBAAO,KAAP;AACH;AACD;AACA,gBAAIlD,OAAOkD,IAAP,CAAYC,WAAZ,MAA6BnD,OAAOkD,IAAP,CAAYzD,EAAZ,KAAmB,KAAKuB,GAAL,CAAS,SAAT,CAApD,EAAyE;AACrE,uBAAO,KAAP;AACH;AACD,mBAAO,IAAP;AACH,SAlI2B;;AAoI5B;AACAoC,6BAAqB,+BAAW;AAC5B,gBAAIC,mBAAmB,KAAKrC,GAAL,CAAS,gBAAT,CAAvB;AACA,mBAAOqC,mBAAmBA,iBAAiBC,MAApC,GAA6C,CAApD;AACH,SAxI2B;;AA0I5B;AACAC,sCAA8B,wCAAW;AACrC,mBAAO,KAAK1C,QAAL,CAAc2C,gBAAd,GAAiCF,MAAjC,IAA2C,CAAlD;AACH,SA7I2B;;AA+I5B;AACAG,wCAAgC,0CAAW;AACvC,gBAAIC,sBAAsB,CAAC,MAAD,EAAS,gBAAT,EAA2B,iBAA3B,EAA8C,aAA9C,CAA1B;AACA,mBAAO,KAAKC,KAAL,CAAW;AACdC,sBAAM5B,OAAO6B,KAAP,CAAa;AACfC,0BAAMJ,oBAAoBK,IAApB,CAAyB,GAAzB;AADS,iBAAb;AADQ,aAAX,CAAP;AAKH,SAvJ2B;;AAyJ5B;AACAC,iBAAS,iBAAStD,OAAT,EAAkB;AAAA;;AACvB;AACAA,sBAAUA,WAAW,EAArB;;AAEA;AACA,gBAAIuD,iBAAiB,KAAKA,cAA1B;AACA;AACA,iBAAKpD,QAAL,CAAcqD,UAAd,GAA2B,KAA3B;AACA,gBAAIC,UACA,KAAKtD,QAAL,CAAcuD,WAAd,KAA8B,CAA9B,GACM;AAAA,uBAAM,MAAKvD,QAAL,CAAcwD,SAAd,CAAwB,MAAKxD,QAAL,CAAcuD,WAAtC,CAAN;AAAA,aADN,GAEM;AAAA,uBAAM,MAAKvD,QAAL,CAAcyD,YAAd,CAA2BL,cAA3B,CAAN;AAAA,aAHV;AAIA;AACA,mBAAOE,UAAUI,IAAV,CAAe,UAACC,QAAD,EAAWC,MAAX,EAAmBjD,GAAnB,EAA2B;AAC7C,oBAAIkD,sBAAJ;AACA,oBAAI;AACAA,6CAAyB,IAAIC,IAAJ,CAASnD,IAAIoD,iBAAJ,CAAsB,MAAtB,CAAT,CAAzB;AACH,iBAFD,CAEE,OAAOC,GAAP,EAAY;AACVC,4BAAQxD,KAAR,CAAcuD,GAAd;AACH;AACD,sBAAKZ,cAAL,GAAsBS,0BAA0B,IAAIC,IAAJ,EAAhD;AACA,sBAAKI,eAAL,CAAqBrE,OAArB;AACH,aATM,CAAP;AAUH,SAjL2B;;AAmL5B;AACAqE,yBAAiB,yBAASrE,OAAT,EAAkB;AAAA;;AAC/B;AACAA,sBAAUA,WAAW,EAArB;AACA,gBAAIsE,QAAQ,KAAK1F,YAAjB;AACA,gBAAI,CAAC,KAAKG,EAAV,EAAc;AACV;AACH;;AAED,gBAAIwF,mBAAmB,SAAnBA,gBAAmB,GAAM;AACzB;AACA,uBAAKtD,kBAAL;AACA,uBAAKP,eAAL,GAAuB8D,WAAW,YAAM;AACpC,2BAAKlB,OAAL,CAAatD,OAAb;AACH,iBAFsB,EAEpBsE,KAFoB,CAAvB;AAGH,aAND;;AAQA;AACA,gBAAIG,uBAAuB,KAAK5B,4BAAL,EAA3B;AACA;AACA,gBAAI4B,uBAAuB,CAA3B,EAA8B;AAC1BF;AACH,aAFD,MAEO;AACH;AACA;AACA;AACA,qBAAKxB,8BAAL,GAAsCc,IAAtC,CAA2C,uBAAe;AACtD;AACA,wBAAI,OAAKnB,mBAAL,KAA6B,CAAjC,EAAoC;AAChC6B;AACH,qBAFD,MAEO;AACH;AACA,+BAAKnD,OAAL,CAAa,OAAb;AACH;AACJ,iBARD;AASH;AACJ,SAvN2B;;AAyN5B;AACAH,4BAAoB,8BAAW;AAC3B,gBAAI,KAAKP,eAAT,EAA0B;AACtBgE,6BAAa,KAAKhE,eAAlB;AACA,qBAAKA,eAAL,GAAuB,IAAvB;AACH;AACJ,SA/N2B;;AAiO5BiE,qBAAa,uBAAW;AACpB,iBAAK1D,kBAAL;AACA,gBAAI,KAAKd,QAAT,EAAmB;AACf,qBAAKA,QAAL,CAAcwE,WAAd;AACH;AACJ,SAtO2B;;AAwO5B;AACA;AACAC,eAAO,eAASd,QAAT,EAAmB9D,OAAnB,EAA4B;AAC/B,gBAAI6E,SAASzG,SAASE,KAAT,CAAe8D,SAAf,CAAyBwC,KAAzB,CAA+BvC,IAA/B,CAAoC,IAApC,EAA0CyB,QAA1C,EAAoD9D,OAApD,CAAb;AACA,gBAAI6E,OAAOC,WAAX,EAAwB;AACpBD,uBAAOC,WAAP,GAAqB,IAAIb,IAAJ,CAASY,OAAOC,WAAhB,CAArB;AACH;AACD,gBAAID,OAAOE,WAAX,EAAwB;AACpBF,uBAAOE,WAAP,GAAqB,IAAId,IAAJ,CAASY,OAAOE,WAAhB,CAArB;AACH;AACD,mBAAOF,MAAP;AACH,SAnP2B;;AAqP5B;AACAG,2BAAmB,2BAAShF,OAAT,EAAkBiF,eAAlB,EAAmC;AAClDjF,sBAAUA,WAAW,EAArB;AACA,gBAAIkF,OAAO,IAAX;;AAEA;AACA;AACAlF,oBAAQmF,IAAR,GAAe,cAAf;;AAEA;AACA,mBAAO,KAAKlC,KAAL,CAAWjD,OAAX,EAAoBoF,IAApB,CAAyB,SAASC,WAAT,CAAqBjF,OAArB,EAA8B;AAC1D8E,qBAAK/E,QAAL,CAAcC,OAAd,GAAwB8E,IAAxB;AACAA,qBAAK/E,QAAL,CAAcmF,YAAd,CAA2BlF,QAAQrB,EAAnC;AACA,uBAAOmG,KAAKK,aAAL,CAAmBN,eAAnB,CAAP;AACH,aAJM,CAAP;AAKH,SApQ2B;;AAsQ5B;AACAM,uBAAe,uBAASvF,OAAT,EAAkB;AAC7BA,sBAAUA,WAAW,EAArB;;AAEA;AACA,iBAAKuD,cAAL,GAAsB,IAAIU,IAAJ,EAAtB;AACA,mBAAO,KAAK9D,QAAL,CAAcqF,gBAAd,CAA+BxF,OAA/B,CAAP;AACH,SA7Q2B;;AA+Q5B;AACAyF,iBAAS,iBAASzF,OAAT,EAAkB;AACvB,gBAAI,KAAKM,GAAL,CAAS,SAAT,CAAJ,EAAyB;AACrB,uBAAOgB,OAAOoE,IAAP,EAAP;AACH;AACD,mBAAO,KAAKC,IAAL,CAAU,EAAEzG,SAAS,IAAX,EAAV,EAA6Bc,OAA7B,CAAP;AACH,SArR2B;AAsR5B;AACA4F,eAAO,eAAS5F,OAAT,EAAkB;AACrB,gBAAI,KAAKM,GAAL,CAAS,QAAT,CAAJ,EAAwB;AACpB,uBAAOgB,OAAOoE,IAAP,EAAP;AACH;AACD,mBAAO,KAAKC,IAAL,CAAU,EAAEzG,SAAS,IAAX,EAAiB2G,QAAQ,IAAzB,EAAV,EAA2C7F,OAA3C,CAAP;AACH,SA5R2B;AA6R5B;AACA8F,kBAAU,kBAAS9F,OAAT,EAAkB;AACxB,gBAAI,CAAC,KAAKM,GAAL,CAAS,SAAT,CAAL,EAA0B;AACtB,uBAAOgB,OAAOoE,IAAP,EAAP;AACH;AACD,mBAAO,KAAKC,IAAL,CAAU,EAAEzG,SAAS,KAAX,EAAV,EAA8Bc,OAA9B,CAAP;AACH,SAnS2B;;AAqS5B;;;;;;AAMA+F,cAAM,cAASC,OAAT,EAAkBhH,IAAlB,EAAwBiH,WAAxB,EAAqC;AACvCD,sBAAUA,YAAYE,SAAZ,GAAwBF,OAAxB,GAAkC,IAA5C;AACA,gBAAI,CAAC,KAAKjH,EAAV,EAAc;AACV,sBAAM,IAAIoH,KAAJ,CAAU,gDAAV,CAAN;AACH;;AAED,gBAAIC,WAAW,EAAEC,YAAY,KAAKtH,EAAnB,EAAf;AACA,gBAAIiH,OAAJ,EAAa;AACTI,yBAASJ,OAAT,GAAmB,IAAnB;AACH;AACD,gBAAIhH,IAAJ,EAAU;AACNoH,yBAASpH,IAAT,GAAgBA,IAAhB;AACH;AACD,gBAAI,CAACiH,WAAL,EAAkB;AACdG,yBAASE,YAAT,GAAwB,KAAxB;AACH;AACDF,qBAASjB,IAAT,GAAgB,cAAhB;;AAEA,gBAAI/E,UAAU,IAAd;AACA,gBAAI2F,OAAOzE,OAAOiF,IAAP,CAAY,KAAKlH,OAAjB,EAA0B+G,QAA1B,CAAX;AACA;AACA,gBAAIJ,OAAJ,EAAa;AACT,uBAAOD,KAAKX,IAAL,CAAU,oBAAY;AACzB,wBAAIoB,aAAa,IAAInI,OAAJ,CAAYyF,QAAZ,CAAjB;AACA,2BAAO0C,WAAWC,YAAX,GAA0B5C,IAA1B,CAA+B,YAAM;AACxCzD,gCAAQgB,OAAR,CAAgB,QAAhB,EAA0BhB,OAA1B,EAAmC0D,QAAnC;AACH,qBAFM,CAAP;AAGH,iBALM,CAAP;AAMH;AACD,mBAAOiC,KAAKlC,IAAL,CAAU,oBAAY;AACzBzD,wBAAQgB,OAAR,CAAgB,QAAhB,EAA0BhB,OAA1B,EAAmC0D,QAAnC;AACH,aAFM,CAAP;AAGH,SA3U2B;;AA6U5B2C,sBAAc,wBAAW;AACrB,gBAAIrG,UAAU,IAAd;;AAEA,gBAAIU,MAAMQ,OAAOoF,OAAP,CAAkBpH,OAAOC,IAAzB,kCAA0D,KAAKR,EAA/D,CAAV;;AAEA+B,gBAAI+C,IAAJ,CAAS,YAAM;AACXzD,wBAAQgB,OAAR,CAAgB,gBAAhB,EAAkChB,OAAlC;AACH,aAFD;AAGA,mBAAOU,GAAP;AACH,SAtV2B;;AAwV5B;AACA6F,kBAAU,oBAAW;AACjB,gCAAkB,KAAKrG,GAAL,CAAS,IAAT,CAAlB,SAAoC,KAAKA,GAAL,CAAS,MAAT,CAApC;AACH;AA3V2B,KAFpC,CADU,CAAd;;AAmWA;AACA,QAAIsG,mBAAmB,oCAA4BC,6BAAnD;AACA;;;;AAIA,QAAIC,oBAAoBF,iBAAiBrI,MAAjB,CAAwB,kBAASC,aAAjC,EAAgDD,MAAhD,CAAuD;AAC3EI,uBAAe,SAD4D;;AAG3EkC,eAAOxC,OAHoE;AAI3E;AACAkC,eAAO,aALoE;AAM3E;AACAwG,2BAAmB,EAPwD;AAQ3E;AACAC,uBAAe,EAT4D;;AAW3ElH,oBAAY,oBAASmH,MAAT,EAAiBjH,OAAjB,EAA0B;AAClCA,sBAAUA,WAAW,EAArB;AACA,iBAAKE,GAAL,CAAS,8BAAT,EAAyC+G,MAAzC,EAAiDjH,OAAjD;AACA4G,6BAAiBxE,SAAjB,CAA2BtC,UAA3B,CAAsCuC,IAAtC,CAA2C,IAA3C,EAAiD4E,MAAjD,EAAyDjH,OAAzD;;AAEA;AACA,iBAAK6B,cAAL,GAAsB7B,QAAQ6B,cAAR,IAA0B,KAAhD;;AAEA;AACA,iBAAKqF,gBAAL,GAAwBlH,QAAQkH,gBAAhC;;AAEA,iBAAKC,cAAL;AACA;AACA;AACH,SAzB0E;;AA2B3E9H,iBAAYC,OAAOC,IAAnB,kBA3B2E;AA4B3E6H,aAAK,eAAW;AACZ,mBAAO,KAAK/H,OAAZ;AACH,SA9B0E;;AAgC3E;AACA8H,wBAAgB,SAASA,cAAT,GAA0B;AACtC,mBAAO,KAAKxG,EAAL,CAAQ;AACX;AACA,kCAAkB,uBAASP,OAAT,EAAkB;AAChC;AACA,yBAAKiH,KAAL,CAAW,gBAAX,EAA6B,KAAKxF,cAAlC,EAAkDzB,QAAQE,GAAR,CAAY,SAAZ,CAAlD;AACA,wBAAI,CAAC,KAAKuB,cAAN,IAAwBzB,QAAQE,GAAR,CAAY,SAAZ,CAA5B,EAAoD;AAChD,6BAAKgH,MAAL,CAAYlH,OAAZ;AACH;AACJ,iBARU;AASX;AACAmH,wBAAQ,gBAASC,QAAT,EAAmBC,OAAnB,EAA4B;AAChC,yBAAKC,UAAL,CAAgB,IAAIrJ,OAAJ,CAAYoJ,OAAZ,EAAqB,EAArB,CAAhB;AACH,iBAZU;AAaX;AACA,kCAAkB,sBAASrH,OAAT,EAAkB;AAChC,wBAAIuH,eAAe,KAAKT,gBAAxB;AACA,yBAAK9F,OAAL,CAAa,mBAAb,EAAkCuG,YAAlC;AACA,yBAAKT,gBAAL,GAAwB9G,QAAQrB,EAAhC;AACH;AAlBU,aAAR,CAAP;AAoBH,SAtD0E;;AAwD3E;AACA6I,yBAAiB,yBAAS5H,OAAT,EAAkB;AAC/B,mBAAO7B,EAAEI,MAAF,CAASqI,iBAAiBxE,SAAjB,CAA2BwF,eAA3B,CAA2CvF,IAA3C,CAAgD,IAAhD,EAAsDrC,OAAtD,CAAT,EAAyE;AAC5EmF,sBAAM;AADsE,aAAzE,CAAP;AAGH,SA7D0E;;AA+D3E;AACA0C,4BAAoB,4BAAS7H,OAAT,EAAkB;AAClC,gBAAI8H,eAAelB,iBAAiBxE,SAAjB,CAA2ByF,kBAA3B,CAA8CxF,IAA9C,CAAmD,IAAnD,EAAyDrC,OAAzD,KAAqE,EAAxF;AACA,gBAAI+H,UAAU,EAAd;AACA,gBAAI,KAAKlG,cAAL,KAAwB,IAA5B,EAAkC;AAC9BkG,wBAAQ7I,OAAR,GAAkB,KAAlB;AACA6I,wBAAQlC,MAAR,GAAiB,KAAjB;AACH,aAHD,MAGO;AACH;AACA;AACAkC,wBAAQ7I,OAAR,GAAkB,IAAlB;AACH;AACD,mBAAOf,EAAEU,QAAF,CAAWiJ,YAAX,EAAyBC,OAAzB,CAAP;AACH,SA5E0E;;AA8E3E;AACAC,oBAAY,oBAAShI,OAAT,EAAkB;AAAA;;AAC1B;AACA,gBAAIc,MAAMQ,OAAOoE,IAAP,EAAV;AACA,gBAAI,KAAKwB,gBAAT,EAA2B;AACvBpG,sBAAM8F,iBAAiBxE,SAAjB,CAA2B4F,UAA3B,CAAsC3F,IAAtC,CAA2C,IAA3C,EAAiD;AACnD4F,4BAAQ,IAD2C;AAEnDC,2BAAO,CAF4C;AAGnDH,6BAAS;AACL,yCAAiB,KAAKb,gBADjB;AAEL;AACAhI,iCAAS,IAHJ;AAIL2G,gCAAQ;AAJH;AAH0C,iBAAjD,CAAN;AAUH;AACD,mBAAO/E,IAAIsE,IAAJ,CAAS,YAAM;AAClBpF,0BAAUA,WAAW,EAArB;AACAA,wBAAQmI,MAAR,GAAiB,CAAjB;AACA,uBAAO,OAAKC,SAAL,CAAepI,OAAf,CAAP;AACH,aAJM,CAAP;AAKH,SAnG0E;;AAqG3E;AACAqI,qBAAalK,EAAEI,MAAF,CAASJ,EAAEmK,KAAF,CAAQ1B,iBAAiBxE,SAAjB,CAA2BiG,WAAnC,CAAT,EAA0D;AACnErJ,kBAAM,kBAASuJ,eAAT,CAAyB,MAAzB,EAAiC;AACnCC,2BAAW;AADwB,aAAjC,CAD6D;AAInE,wBAAY,kBAASD,eAAT,CAAyB,MAAzB,EAAiC;AACzCC,2BAAW;AAD8B,aAAjC,CAJuD;AAOnEvG,kBAAM,kBAASsG,eAAT,CAAyB,MAAzB,EAAiC;AACnCC,2BAAW;AADwB,aAAjC,CAP6D;AAUnE,wBAAY,kBAASD,eAAT,CAAyB,MAAzB,EAAiC;AACzCC,2BAAW;AAD8B,aAAjC;AAVuD,SAA1D,CAtG8D;;AAqH3E;AACAC,cAAM,cAASzI,OAAT,EAAkB;AACpBA,sBAAUA,WAAW,EAArB;AACA,gBAAIiI,SAASjI,QAAQiI,MAArB;AACA,gBAAIS,iBAAiB,KAAKpB,MAAL,CAAY,KAAKhH,GAAL,CAAS,KAAK4G,gBAAd,CAAZ,CAArB;AACAN,6BAAiBxE,SAAjB,CAA2BqG,IAA3B,CAAgCpG,IAAhC,CAAqC,IAArC,EAA2ClE,EAAEU,QAAF,CAAW,EAAEoJ,QAAQ,IAAV,EAAX,EAA6BjI,OAA7B,CAA3C;AACA,iBAAK2I,OAAL,CAAaD,cAAb,EAA6B,EAAET,QAAQ,IAAV,EAA7B;AACA,gBAAI,CAACA,MAAL,EAAa;AACT,qBAAK7G,OAAL,CAAa,MAAb,EAAqB,IAArB,EAA2BpB,OAA3B;AACH;AACD,mBAAO,IAAP;AACH,SAhI0E;;AAkI3E;AACA4I,gBAAQ,SAASA,MAAT,CAAgB1F,IAAhB,EAAsB2F,IAAtB,EAA4BC,cAA5B,EAA4CC,UAA5C,EAAwD;AAC5D;AACA,gBAAIC,aAAa,IAAjB;;AAEA,gBAAIlI,MAAMQ,OAAOoF,OAAP,CAAkBpH,OAAOC,IAAzB,gCAAV;AACA,mBAAOuB,IAAI+C,IAAJ,CAAS,mBAAW;AACvBmF,2BAAWtB,UAAX,CAAsB,IAAIrJ,OAAJ,CAAYoJ,OAAZ,EAAqB,EAArB,EAAyBqB,kBAAkB,EAA3C,CAAtB;AACH,aAFM,CAAP;AAGH,SA3I0E;;AA6I3E;;;;AAIApB,oBAAY,oBAAStH,OAAT,EAAkBJ,OAAlB,EAA2B;AACnCA,sBAAUA,WAAW,EAArB;AACA;AACA,iBAAK2I,OAAL,CAAavI,OAAb,EAAsBJ,OAAtB;AACA,iBAAKkH,gBAAL,GAAwB9G,QAAQE,GAAR,CAAY,IAAZ,CAAxB;AACA,gBAAI,CAACN,QAAQiI,MAAb,EAAqB;AACjB,qBAAK7G,OAAL,CAAa,aAAb,EAA4BhB,OAA5B,EAAqC,IAArC;AACH;AACD,mBAAO,IAAP;AACH,SA1J0E;;AA4J3EuG,kBAAU,SAASA,QAAT,GAAoB;AAC1B,0CAA4B,KAAK/D,MAAjC,iBAAmD,KAAKsE,gBAAxD;AACH;AA9J0E,KAAvD,CAAxB;;AAiKA;sBACe;AACX7I,iBAASA,OADE;AAEXyI,2BAAmBA;AAFR,K","file":"../../../scripts/mvc/history/history-model.js","sourcesContent":["import HISTORY_CONTENTS from \"mvc/history/history-contents\";\nimport CONTROLLED_FETCH_COLLECTION from \"mvc/base/controlled-fetch-collection\";\nimport UTILS from \"utils/utils\";\nimport BASE_MVC from \"mvc/base-mvc\";\nimport _l from \"utils/localization\";\nimport * as _ from \"libs/underscore\";\nimport * as Backbone from \"libs/backbone\";\n\n/* global jQuery */\n/* global Galaxy */\n\n//==============================================================================\n/** @class Model for a Galaxy history resource - both a record of user\n *      tool use and a collection of the datasets those tools produced.\n *  @name History\n *  @augments Backbone.Model\n */\nvar History = Backbone.Model.extend(BASE_MVC.LoggableMixin).extend(\n    BASE_MVC.mixin(\n        BASE_MVC.SearchableModelMixin,\n        /** @lends History.prototype */ {\n            _logNamespace: \"history\",\n\n            /** ms between fetches when checking running jobs/datasets for updates */\n            UPDATE_DELAY: 4000,\n\n            // values from api (may need more)\n            defaults: {\n                model_class: \"History\",\n                id: null,\n                name: \"Unnamed History\",\n                state: \"new\",\n\n                deleted: false,\n                contents_active: {},\n                contents_states: {}\n            },\n\n            urlRoot: `${Galaxy.root}api/histories`,\n\n            contentsClass: HISTORY_CONTENTS.HistoryContents,\n\n            /** What model fields to search with */\n            searchAttributes: [\"name\", \"annotation\", \"tags\"],\n\n            /** Adding title and singular tag */\n            searchAliases: {\n                title: \"name\",\n                tag: \"tags\"\n            },\n\n            // ........................................................................ set up/tear down\n            /** Set up the model\n             *  @param {Object} historyJSON model data for this History\n             *  @param {Object} options     any extra settings including logger\n             */\n            initialize: function(historyJSON, options) {\n                options = options || {};\n                this.logger = options.logger || null;\n                this.log(`${this}.initialize:`, historyJSON, options);\n\n                /** HistoryContents collection of the HDAs contained in this history. */\n                this.contents = new this.contentsClass([], {\n                    history: this,\n                    historyId: this.get(\"id\"),\n                    order: options.order\n                });\n\n                this._setUpListeners();\n                this._setUpCollectionListeners();\n\n                /** cached timeout id for the dataset updater */\n                this.updateTimeoutId = null;\n            },\n\n            /** set up any event listeners for this history including those to the contained HDAs\n             *  events: error:contents  if an error occurred with the contents collection\n             */\n            _setUpListeners: function() {\n                // if the model's id changes ('current' or null -> an actual id), update the contents history_id\n                return this.on({\n                    error: function(model, xhr, options, msg, details) {\n                        this.clearUpdateTimeout();\n                    },\n                    \"change:id\": function(model, newId) {\n                        if (this.contents) {\n                            this.contents.historyId = newId;\n                        }\n                    }\n                });\n            },\n\n            /** event handlers for the contents submodels */\n            _setUpCollectionListeners: function() {\n                if (!this.contents) {\n                    return this;\n                }\n                // bubble up errors\n                return this.listenTo(this.contents, {\n                    error: function() {\n                        this.trigger.apply(this, jQuery.makeArray(arguments));\n                    }\n                });\n            },\n\n            // ........................................................................ derived attributes\n            /**  */\n            contentsShown: function() {\n                var contentsActive = this.get(\"contents_active\");\n                var shown = contentsActive.active || 0;\n                shown += this.contents.includeDeleted ? contentsActive.deleted : 0;\n                shown += this.contents.includeHidden ? contentsActive.hidden : 0;\n                return shown;\n            },\n\n            /** convert size in bytes to a more human readable version */\n            nice_size: function() {\n                var size = this.get(\"size\");\n                return size ? UTILS.bytesToString(size, true, 2) : _l(\"(empty)\");\n            },\n\n            /** override to add nice_size */\n            toJSON: function() {\n                return _.extend(Backbone.Model.prototype.toJSON.call(this), {\n                    nice_size: this.nice_size()\n                });\n            },\n\n            /** override to allow getting nice_size */\n            get: function(key) {\n                if (key === \"nice_size\") {\n                    return this.nice_size();\n                }\n                return Backbone.Model.prototype.get.apply(this, arguments);\n            },\n\n            // ........................................................................ common queries\n            /** T/F is this history owned by the current user (Galaxy.user)\n             *      Note: that this will return false for an anon user even if the history is theirs.\n             */\n            ownedByCurrUser: function() {\n                // no currUser\n                if (!Galaxy || !Galaxy.user) {\n                    return false;\n                }\n                // user is anon or history isn't owned\n                if (Galaxy.user.isAnonymous() || Galaxy.user.id !== this.get(\"user_id\")) {\n                    return false;\n                }\n                return true;\n            },\n\n            /** Return the number of running jobs assoc with this history (note: unknown === 0) */\n            numOfUnfinishedJobs: function() {\n                var unfinishedJobIds = this.get(\"non_ready_jobs\");\n                return unfinishedJobIds ? unfinishedJobIds.length : 0;\n            },\n\n            /** Return the number of running hda/hdcas in this history (note: unknown === 0) */\n            numOfUnfinishedShownContents: function() {\n                return this.contents.runningAndActive().length || 0;\n            },\n\n            // ........................................................................ updates\n            _fetchContentRelatedAttributes: function() {\n                var contentRelatedAttrs = [\"size\", \"non_ready_jobs\", \"contents_active\", \"hid_counter\"];\n                return this.fetch({\n                    data: jQuery.param({\n                        keys: contentRelatedAttrs.join(\",\")\n                    })\n                });\n            },\n\n            /** check for any changes since the last time we updated (or fetch all if ) */\n            refresh: function(options) {\n                // console.log( this + '.refresh' );\n                options = options || {};\n\n                // note if there was no previous update time, all summary contents will be fetched\n                var lastUpdateTime = this.lastUpdateTime;\n                // if we don't flip this, then a fully-fetched list will not be re-checked via fetch\n                this.contents.allFetched = false;\n                var fetchFn =\n                    this.contents.currentPage !== 0\n                        ? () => this.contents.fetchPage(this.contents.currentPage)\n                        : () => this.contents.fetchUpdated(lastUpdateTime);\n                // note: if there was no previous update time, all summary contents will be fetched\n                return fetchFn().done((response, status, xhr) => {\n                    var serverResponseDatetime;\n                    try {\n                        serverResponseDatetime = new Date(xhr.getResponseHeader(\"Date\"));\n                    } catch (err) {\n                        console.error(err);\n                    }\n                    this.lastUpdateTime = serverResponseDatetime || new Date();\n                    this.checkForUpdates(options);\n                });\n            },\n\n            /** continuously fetch updated contents every UPDATE_DELAY ms if this history's datasets or jobs are unfinished */\n            checkForUpdates: function(options) {\n                // console.log( this + '.checkForUpdates' );\n                options = options || {};\n                var delay = this.UPDATE_DELAY;\n                if (!this.id) {\n                    return;\n                }\n\n                var _delayThenUpdate = () => {\n                    // prevent buildup of updater timeouts by clearing previous if any, then set new and cache id\n                    this.clearUpdateTimeout();\n                    this.updateTimeoutId = setTimeout(() => {\n                        this.refresh(options);\n                    }, delay);\n                };\n\n                // if there are still datasets in the non-ready state, recurse into this function with the new time\n                var nonReadyContentCount = this.numOfUnfinishedShownContents();\n                // console.log( 'nonReadyContentCount:', nonReadyContentCount );\n                if (nonReadyContentCount > 0) {\n                    _delayThenUpdate();\n                } else {\n                    // no datasets are running, but currently runnning jobs may still produce new datasets\n                    // see if the history has any running jobs and continue to update if so\n                    // (also update the size for the user in either case)\n                    this._fetchContentRelatedAttributes().done(historyData => {\n                        // console.log( 'non_ready_jobs:', historyData.non_ready_jobs );\n                        if (this.numOfUnfinishedJobs() > 0) {\n                            _delayThenUpdate();\n                        } else {\n                            // otherwise, let listeners know that all updates have stopped\n                            this.trigger(\"ready\");\n                        }\n                    });\n                }\n            },\n\n            /** clear the timeout and the cached timeout id */\n            clearUpdateTimeout: function() {\n                if (this.updateTimeoutId) {\n                    clearTimeout(this.updateTimeoutId);\n                    this.updateTimeoutId = null;\n                }\n            },\n\n            stopPolling: function() {\n                this.clearUpdateTimeout();\n                if (this.contents) {\n                    this.contents.stopPolling();\n                }\n            },\n\n            // ........................................................................ ajax\n            /** override to use actual Dates objects for create/update times */\n            parse: function(response, options) {\n                var parsed = Backbone.Model.prototype.parse.call(this, response, options);\n                if (parsed.create_time) {\n                    parsed.create_time = new Date(parsed.create_time);\n                }\n                if (parsed.update_time) {\n                    parsed.update_time = new Date(parsed.update_time);\n                }\n                return parsed;\n            },\n\n            /** fetch this histories data (using options) then it's contents (using contentsOptions) */\n            fetchWithContents: function(options, contentsOptions) {\n                options = options || {};\n                var self = this;\n\n                // console.log( this + '.fetchWithContents' );\n                // TODO: push down to a base class\n                options.view = \"dev-detailed\";\n\n                // fetch history then use history data to fetch (paginated) contents\n                return this.fetch(options).then(function getContents(history) {\n                    self.contents.history = self;\n                    self.contents.setHistoryId(history.id);\n                    return self.fetchContents(contentsOptions);\n                });\n            },\n\n            /** fetch this histories contents, adjusting options based on the stored history preferences */\n            fetchContents: function(options) {\n                options = options || {};\n\n                // we're updating, reset the update time\n                this.lastUpdateTime = new Date();\n                return this.contents.fetchCurrentPage(options);\n            },\n\n            /** save this history, _Mark_ing it as deleted (just a flag) */\n            _delete: function(options) {\n                if (this.get(\"deleted\")) {\n                    return jQuery.when();\n                }\n                return this.save({ deleted: true }, options);\n            },\n            /** purge this history, _Mark_ing it as purged and removing all dataset data from the server */\n            purge: function(options) {\n                if (this.get(\"purged\")) {\n                    return jQuery.when();\n                }\n                return this.save({ deleted: true, purged: true }, options);\n            },\n            /** save this history, _Mark_ing it as undeleted */\n            undelete: function(options) {\n                if (!this.get(\"deleted\")) {\n                    return jQuery.when();\n                }\n                return this.save({ deleted: false }, options);\n            },\n\n            /** Make a copy of this history on the server\n             *  @param {Boolean} current    if true, set the copy as the new current history (default: true)\n             *  @param {String} name        name of new history (default: none - server sets to: Copy of <current name>)\n             *  @fires copied               passed this history and the response JSON from the copy\n             *  @returns {xhr}\n             */\n            copy: function(current, name, allDatasets) {\n                current = current !== undefined ? current : true;\n                if (!this.id) {\n                    throw new Error(\"You must set the history ID before copying it.\");\n                }\n\n                var postData = { history_id: this.id };\n                if (current) {\n                    postData.current = true;\n                }\n                if (name) {\n                    postData.name = name;\n                }\n                if (!allDatasets) {\n                    postData.all_datasets = false;\n                }\n                postData.view = \"dev-detailed\";\n\n                var history = this;\n                var copy = jQuery.post(this.urlRoot, postData);\n                // if current - queue to setAsCurrent before firing 'copied'\n                if (current) {\n                    return copy.then(response => {\n                        var newHistory = new History(response);\n                        return newHistory.setAsCurrent().done(() => {\n                            history.trigger(\"copied\", history, response);\n                        });\n                    });\n                }\n                return copy.done(response => {\n                    history.trigger(\"copied\", history, response);\n                });\n            },\n\n            setAsCurrent: function() {\n                var history = this;\n\n                var xhr = jQuery.getJSON(`${Galaxy.root}history/set_as_current?id=${this.id}`);\n\n                xhr.done(() => {\n                    history.trigger(\"set-as-current\", history);\n                });\n                return xhr;\n            },\n\n            // ........................................................................ misc\n            toString: function() {\n                return `History(${this.get(\"id\")},${this.get(\"name\")})`;\n            }\n        }\n    )\n);\n\n//==============================================================================\nvar _collectionSuper = CONTROLLED_FETCH_COLLECTION.InfinitelyScrollingCollection;\n/** @class A collection of histories (per user)\n *      that maintains the current history as the first in the collection.\n *  New or copied histories become the current history.\n */\nvar HistoryCollection = _collectionSuper.extend(BASE_MVC.LoggableMixin).extend({\n    _logNamespace: \"history\",\n\n    model: History,\n    /** @type {String} initial order used by collection */\n    order: \"update_time\",\n    /** @type {Number} limit used for the first fetch (or a reset) */\n    limitOnFirstFetch: 10,\n    /** @type {Number} limit used for each subsequent fetch */\n    limitPerFetch: 10,\n\n    initialize: function(models, options) {\n        options = options || {};\n        this.log(\"HistoryCollection.initialize\", models, options);\n        _collectionSuper.prototype.initialize.call(this, models, options);\n\n        /** @type {boolean} should deleted histories be included */\n        this.includeDeleted = options.includeDeleted || false;\n\n        /** @type {String} encoded id of the history that's current */\n        this.currentHistoryId = options.currentHistoryId;\n\n        this.setUpListeners();\n        // note: models are sent to reset *after* this fn ends; up to this point\n        // the collection *is empty*\n    },\n\n    urlRoot: `${Galaxy.root}api/histories`,\n    url: function() {\n        return this.urlRoot;\n    },\n\n    /** set up reflexive event handlers */\n    setUpListeners: function setUpListeners() {\n        return this.on({\n            // when a history is deleted, remove it from the collection (if optionally set to do so)\n            \"change:deleted\": function(history) {\n                // TODO: this becomes complicated when more filters are used\n                this.debug(\"change:deleted\", this.includeDeleted, history.get(\"deleted\"));\n                if (!this.includeDeleted && history.get(\"deleted\")) {\n                    this.remove(history);\n                }\n            },\n            // listen for a history copy, setting it to current\n            copied: function(original, newData) {\n                this.setCurrent(new History(newData, []));\n            },\n            // when a history is made current, track the id in the collection\n            \"set-as-current\": function(history) {\n                var oldCurrentId = this.currentHistoryId;\n                this.trigger(\"no-longer-current\", oldCurrentId);\n                this.currentHistoryId = history.id;\n            }\n        });\n    },\n\n    /** override to change view */\n    _buildFetchData: function(options) {\n        return _.extend(_collectionSuper.prototype._buildFetchData.call(this, options), {\n            view: \"dev-detailed\"\n        });\n    },\n\n    /** override to filter out deleted and purged */\n    _buildFetchFilters: function(options) {\n        var superFilters = _collectionSuper.prototype._buildFetchFilters.call(this, options) || {};\n        var filters = {};\n        if (this.includeDeleted !== true) {\n            filters.deleted = false;\n            filters.purged = false;\n        } else {\n            // force API to return both deleted and non\n            //TODO: when the API is updated, remove this\n            filters.deleted = null;\n        }\n        return _.defaults(superFilters, filters);\n    },\n\n    /** override to fetch current as well (as it may be outside the first 10, etc.) */\n    fetchFirst: function(options) {\n        // TODO: batch?\n        var xhr = jQuery.when();\n        if (this.currentHistoryId) {\n            xhr = _collectionSuper.prototype.fetchFirst.call(this, {\n                silent: true,\n                limit: 1,\n                filters: {\n                    \"encoded_id-in\": this.currentHistoryId,\n                    // without these a deleted current history will return [] here and block the other xhr\n                    deleted: null,\n                    purged: \"\"\n                }\n            });\n        }\n        return xhr.then(() => {\n            options = options || {};\n            options.offset = 0;\n            return this.fetchMore(options);\n        });\n    },\n\n    /** @type {Object} map of collection available sorting orders containing comparator fns */\n    comparators: _.extend(_.clone(_collectionSuper.prototype.comparators), {\n        name: BASE_MVC.buildComparator(\"name\", {\n            ascending: true\n        }),\n        \"name-dsc\": BASE_MVC.buildComparator(\"name\", {\n            ascending: false\n        }),\n        size: BASE_MVC.buildComparator(\"size\", {\n            ascending: false\n        }),\n        \"size-asc\": BASE_MVC.buildComparator(\"size\", {\n            ascending: true\n        })\n    }),\n\n    /** override to always have the current history first */\n    sort: function(options) {\n        options = options || {};\n        var silent = options.silent;\n        var currentHistory = this.remove(this.get(this.currentHistoryId));\n        _collectionSuper.prototype.sort.call(this, _.defaults({ silent: true }, options));\n        this.unshift(currentHistory, { silent: true });\n        if (!silent) {\n            this.trigger(\"sort\", this, options);\n        }\n        return this;\n    },\n\n    /** create a new history and by default set it to be the current history */\n    create: function create(data, hdas, historyOptions, xhrOptions) {\n        //TODO: .create is actually a collection function that's overridden here\n        var collection = this;\n\n        var xhr = jQuery.getJSON(`${Galaxy.root}history/create_new_current`);\n        return xhr.done(newData => {\n            collection.setCurrent(new History(newData, [], historyOptions || {}));\n        });\n    },\n\n    /** set the current history to the given history, placing it first in the collection.\n     *  Pass standard bbone options for use in unshift.\n     *  @triggers new-current passed history and this collection\n     */\n    setCurrent: function(history, options) {\n        options = options || {};\n        // new histories go in the front\n        this.unshift(history, options);\n        this.currentHistoryId = history.get(\"id\");\n        if (!options.silent) {\n            this.trigger(\"new-current\", history, this);\n        }\n        return this;\n    },\n\n    toString: function toString() {\n        return `HistoryCollection(${this.length},current:${this.currentHistoryId})`;\n    }\n});\n\n//==============================================================================\nexport default {\n    History: History,\n    HistoryCollection: HistoryCollection\n};\n"]}