{"version":3,"sources":["mvc/history/copy-dialog.js"],"names":["CopyDialog","defaultName","_","template","title","submitLabel","errorMessage","progressive","activeLabel","allLabel","anonWarning","_template","join","_showAjaxIndicator","indicator","modal","$","empty","append","css","dialog","_dialog","history","options","deferred","jQuery","Deferred","defaultCopyNameFn","nameFn","defaultCopyName","name","get","defaultCopyWhat","allDatasets","allowAll","isUndefined","autoClose","checkNameAndCopy","val","show","copyAllDatasets","prop","copy","done","resolve","response","fail","xhr","status","message","ajaxErrorModal","rejectWith","arguments","hide","originalClosingCallback","closing_callback","extend","body","isAnon","Galaxy","user","isAnonymous","copyWhat","buttons","object","height","closing_events","_historyCopyClose","cancelled","reject","focus","select","on","ev","keyCode","preventDefault","ImportDialog","historyCopyDialog","window","parent","View","useImport"],"mappings":"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","file":"../../../scripts/mvc/history/copy-dialog.js","sourcesContent":["import MODAL from \"mvc/ui/ui-modal\";\nimport ERROR_MODAL from \"mvc/ui/error-modal\";\nimport _l from \"utils/localization\";\n\n//==============================================================================\n/**\n * A dialog/modal that allows copying a user history or 'importing' from user\n * another. Generally called via historyCopyDialog below.\n * @type {Object}\n */\nvar CopyDialog = {\n    // language related strings/fns\n    defaultName: _.template(\"Copy of '<%- name %>'\"),\n    title: _.template(`${_l(\"Copying history\")} \"<%- name %>\"`),\n    submitLabel: _l(\"Copy\"),\n    errorMessage: _l(\"History could not be copied.\"),\n    progressive: _l(\"Copying history\"),\n    activeLabel: _l(\"Copy only the active, non-deleted datasets\"),\n    allLabel: _l(\"Copy all datasets including deleted ones\"),\n    anonWarning:\n        _l(\"As an anonymous user, unless you login or register, you will lose your current history \") +\n        _l(\"after copying this history. \"),\n\n    // template for modal body\n    _template: _.template(\n        [\n            //TODO: remove inline styles\n            // show a warning message for losing current to anon users\n            \"<% if( isAnon ){ %>\",\n            '<div class=\"warningmessage\">',\n            \"<%- anonWarning %>\",\n            _l(\"You can\"),\n            ' <a href=\"/user/login\">',\n            _l(\"login here\"),\n            \"</a> \",\n            _l(\"or\"),\n            \" \",\n            ' <a href=\"/user/create\">',\n            _l(\"register here\"),\n            \"</a>.\",\n            \"</div>\",\n            \"<% } %>\",\n            \"<form>\",\n            '<label for=\"copy-modal-title\">',\n            _l(\"Enter a title for the new history\"),\n            \":\",\n            \"</label><br />\",\n            // TODO: could use required here and the form validators\n            // NOTE: use unescaped here if escaped in the modal function below\n            '<input id=\"copy-modal-title\" class=\"form-control\" style=\"width: 100%\" value=\"<%= name %>\" />',\n            '<p class=\"invalid-title bg-danger\" style=\"color: red; margin: 8px 0px 8px 0px; display: none\">',\n            _l(\"Please enter a valid history title\"),\n            \"</p>\",\n            // if allowAll, add the option to copy deleted datasets, too\n            \"<% if( allowAll ){ %>\",\n            \"<br />\",\n            \"<p>\",\n            _l(\"Choose which datasets from the original history to include:\"),\n            \"</p>\",\n            // copy non-deleted is the default\n            '<input name=\"copy-what\" type=\"radio\" id=\"copy-non-deleted\" value=\"copy-non-deleted\" ',\n            '<% if( copyWhat === \"copy-non-deleted\" ){ print( \"checked\" ); } %>/>',\n            '<label for=\"copy-non-deleted\"> <%- activeLabel %></label>',\n            \"<br />\",\n            '<input name=\"copy-what\" type=\"radio\" id=\"copy-all\" value=\"copy-all\" ',\n            '<% if( copyWhat === \"copy-all\" ){ print( \"checked\" ); } %>/>',\n            '<label for=\"copy-all\"> <%- allLabel %></label>',\n            \"<% } %>\",\n            \"</form>\"\n        ].join(\"\")\n    ),\n\n    // empty modal body and let the user know the copy is happening\n    _showAjaxIndicator: function _showAjaxIndicator() {\n        var indicator = `<p><span class=\"fa fa-spinner fa-spin\"></span> ${this.progressive}...</p>`;\n        this.modal\n            .$(\".modal-body\")\n            .empty()\n            .append(indicator)\n            .css({ \"margin-top\": \"8px\" });\n    },\n\n    // (sorta) public interface - display the modal, render the form, and potentially copy the history\n    // returns a jQuery.Deferred done->history copied, fail->user cancelled\n    dialog: function _dialog(modal, history, options) {\n        options = options || {};\n\n        var dialog = this;\n        var deferred = jQuery.Deferred();\n\n        var // TODO: getting a little byzantine here\n        defaultCopyNameFn = options.nameFn || this.defaultName;\n\n        var defaultCopyName = defaultCopyNameFn({\n            name: history.get(\"name\")\n        });\n\n        var // TODO: these two might be simpler as one 3 state option (all,active,no-choice)\n        defaultCopyWhat = options.allDatasets ? \"copy-all\" : \"copy-non-deleted\";\n\n        var allowAll = !_.isUndefined(options.allowAll) ? options.allowAll : true;\n\n        var autoClose = !_.isUndefined(options.autoClose) ? options.autoClose : true;\n\n        this.modal = modal;\n\n        // validate the name and copy if good\n        function checkNameAndCopy() {\n            var name = modal.$(\"#copy-modal-title\").val();\n            if (!name) {\n                modal.$(\".invalid-title\").show();\n                return;\n            }\n            // get further settings, shut down and indicate the ajax call, then hide and resolve/reject\n            var copyAllDatasets = modal.$('input[name=\"copy-what\"]:checked').val() === \"copy-all\";\n            modal.$(\"button\").prop(\"disabled\", true);\n            dialog._showAjaxIndicator();\n            history\n                .copy(true, name, copyAllDatasets)\n                .done(response => {\n                    deferred.resolve(response);\n                })\n                .fail(function(xhr, status, message) {\n                    var options = {\n                        name: name,\n                        copyAllDatasets: copyAllDatasets\n                    };\n                    ERROR_MODAL.ajaxErrorModal(history, xhr, options, dialog.errorMessage);\n                    deferred.rejectWith(deferred, arguments);\n                })\n                .done(() => {\n                    if (autoClose) {\n                        modal.hide();\n                    }\n                });\n        }\n\n        var originalClosingCallback = options.closing_callback;\n        modal.show(\n            _.extend(options, {\n                title: this.title({ name: history.get(\"name\") }),\n                body: $(\n                    dialog._template({\n                        name: defaultCopyName,\n                        isAnon: Galaxy.user.isAnonymous(),\n                        allowAll: allowAll,\n                        copyWhat: defaultCopyWhat,\n                        activeLabel: this.activeLabel,\n                        allLabel: this.allLabel,\n                        anonWarning: this.anonWarning\n                    })\n                ),\n                buttons: _.object([\n                    [\n                        _l(\"Cancel\"),\n                        () => {\n                            modal.hide();\n                        }\n                    ],\n                    [this.submitLabel, checkNameAndCopy]\n                ]),\n                height: \"auto\",\n                closing_events: true,\n                closing_callback: function _historyCopyClose(cancelled) {\n                    if (cancelled) {\n                        deferred.reject({ cancelled: true });\n                    }\n                    if (originalClosingCallback) {\n                        originalClosingCallback(cancelled);\n                    }\n                }\n            })\n        );\n\n        // set the default dataset copy, autofocus the title, and set up for a simple return\n        modal\n            .$(\"#copy-modal-title\")\n            .focus()\n            .select();\n        modal.$(\"#copy-modal-title\").on(\"keydown\", ev => {\n            if (ev.keyCode === 13) {\n                ev.preventDefault();\n                checkNameAndCopy();\n            }\n        });\n\n        return deferred;\n    }\n};\n\n//==============================================================================\n// maintain the (slight) distinction between copy and import\n/**\n * Subclass CopyDialog to use the import language.\n */\nvar ImportDialog = _.extend({}, CopyDialog, {\n    defaultName: _.template(\"imported: <%- name %>\"),\n    title: _.template(`${_l(\"Importing history\")} \"<%- name %>\"`),\n    submitLabel: _l(\"Import\"),\n    errorMessage: _l(\"History could not be imported.\"),\n    progressive: _l(\"Importing history\"),\n    activeLabel: _l(\"Import only the active, non-deleted datasets\"),\n    allLabel: _l(\"Import all datasets including deleted ones\"),\n    anonWarning:\n        _l(\"As an anonymous user, unless you login or register, you will lose your current history \") +\n        _l(\"after importing this history. \")\n});\n\n//==============================================================================\n/**\n * Main interface for both history import and history copy dialogs.\n * @param  {Backbone.Model} history     the history to copy\n * @param  {Object}         options     a hash\n * @return {jQuery.Deferred}            promise that fails on close and succeeds on copy\n *\n * options:\n *     (this object is also passed to the modal used to display the dialog and accepts modal options)\n *     {Function} nameFn    if defined, use this to build the default name shown to the user\n *                          (the fn is passed: {name: <original history's name>})\n *     {bool} useImport     if true, use the 'import' language (instead of Copy)\n *     {bool} allowAll      if true, allow the user to choose between copying all datasets and\n *                          only non-deleted datasets\n *     {String} allDatasets default initial checked radio button: 'copy-all' or 'copy-non-deleted',\n */\nvar historyCopyDialog = (history, options) => {\n    options = options || {};\n    // create our own modal if Galaxy doesn't have one (mako tab without use_panels)\n    var modal = window.parent.Galaxy.modal || new MODAL.View({});\n    return options.useImport\n        ? ImportDialog.dialog(modal, history, options)\n        : CopyDialog.dialog(modal, history, options);\n};\n\n//==============================================================================\nexport default historyCopyDialog;\n"]}