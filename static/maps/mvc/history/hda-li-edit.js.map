{"version":3,"sources":["mvc/history/hda-li-edit.js"],"names":["_super","DatasetListItemEdit","HDAListItemEdit","extend","className","prototype","_fetchModelDetails","view","model","inReadyState","hasDetails","fetch","silent","has","data","keys","join","jQuery","when","events","_","clone","ev","unhide","toString","modelString","templates","warnings","hidden","wrapTemplate","titleBar","HDAListItemView"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAKA;AACA,QAAIA,SAAS,wBAAgBC,mBAA7B;AACA;;AAEA,QAAIC,kBAAkBF,OAAOG,MAAP;AAClB,2CAAwC;AACpCC,mBAAcJ,OAAOK,SAAP,CAAiBD,SAA/B,qBADoC;;AAGpC;;;AAGAE,4BAAoB,8BAAW;AAC3B,gBAAIC,OAAO,IAAX;AACA,gBAAIA,KAAKC,KAAL,CAAWC,YAAX,MAA6B,CAACF,KAAKC,KAAL,CAAWE,UAAX,EAAlC,EAA2D;AACvD,uBAAOH,KAAKC,KAAL,CAAWG,KAAX,CAAiB,EAAEC,QAAQ,IAAV,EAAjB,CAAP;;AAEA;AACA;AACH,aALD,MAKO,IAAI,CAACL,KAAKC,KAAL,CAAWK,GAAX,CAAe,YAAf,CAAL,EAAmC;AACtC,uBAAON,KAAKC,KAAL,CAAWG,KAAX,CAAiB;AACpBC,4BAAQ,IADY;AAEpBE,0BAAM;AACF;AACAC,8BAAM,CAAC,YAAD,EAAe,cAAf,EAA+BC,IAA/B,CAAoC,GAApC;AAFJ;AAFc,iBAAjB,CAAP;AAOH;AACD,mBAAOC,OAAOC,IAAP,EAAP;AACH,SAvBmC;;AAyBpC;AACAC,gBAAQC,EAAEjB,MAAF,CAASiB,EAAEC,KAAF,CAAQrB,OAAOK,SAAP,CAAiBc,MAAzB,CAAT,EAA2C;AAC/C,kCAAsB,yBAASG,EAAT,EAAa;AAC/B,qBAAKd,KAAL,CAAWe,MAAX;AACA,uBAAO,KAAP;AACH;AAJ8C,SAA3C,CA1B4B;;AAiCpC;AACAC,kBAAU,oBAAW;AACjB,gBAAIC,cAAc,KAAKjB,KAAL,QAAgB,KAAKA,KAArB,GAA+B,YAAjD;AACA,wCAA0BiB,WAA1B;AACH;AArCmC,KADtB,CAAtB;;AA0CA;AACA;AACAvB,oBAAgBG,SAAhB,CAA0BqB,SAA1B,GAAuC,YAAM;AACzC,YAAIC,WAAWP,EAAEjB,MAAF,CAAS,EAAT,EAAaH,OAAOK,SAAP,CAAiBqB,SAAjB,CAA2BC,QAAxC,EAAkD;AAC7DC,oBAAQ,kBAASC,YAAT,CACJ,CACI,+BADJ;AAEI;AACA,0DAHJ,EAII,4BAAG,8BAAH,CAJJ,EAKI,4DALJ,EAMI,4BAAG,WAAH,CANJ,EAOI,MAPJ,EAQI,QARJ,EASI,SATJ,CADI,EAYJ,SAZI;AADqD,SAAlD,CAAf;;AAiBA,eAAOT,EAAEjB,MAAF,CAAS,EAAT,EAAaH,OAAOK,SAAP,CAAiBqB,SAA9B,EAAyC;AAC5C;AACAI,sBAAU,gBAAOC,eAAP,CAAuB1B,SAAvB,CAAiCqB,SAAjC,CAA2CI,QAFT;AAG5CH,sBAAUA;AAHkC,SAAzC,CAAP;AAKH,KAvBqC,EAAtC;;AAyBA;sBACe;AACXzB,yBAAiBA;AADN,K","file":"../../../scripts/mvc/history/hda-li-edit.js","sourcesContent":["import DATASET_LI_EDIT from \"mvc/dataset/dataset-li-edit\";\nimport HDA_LI from \"mvc/history/hda-li\";\nimport BASE_MVC from \"mvc/base-mvc\";\nimport _l from \"utils/localization\";\n\n//==============================================================================\nvar _super = DATASET_LI_EDIT.DatasetListItemEdit;\n/** @class Editing view for HistoryDatasetAssociation.\n */\nvar HDAListItemEdit = _super.extend(\n    /** @lends HDAListItemEdit.prototype */ {\n        className: `${_super.prototype.className} history-content`,\n\n        /** In this override, only get details if in the ready state, get rerunnable if in other states.\n         *  Note: fetch with no 'change' event triggering to prevent automatic rendering.\n         */\n        _fetchModelDetails: function() {\n            var view = this;\n            if (view.model.inReadyState() && !view.model.hasDetails()) {\n                return view.model.fetch({ silent: true });\n\n                // special case the need for the rerunnable and creating_job attributes\n                // needed for rendering re-run button on queued, running datasets\n            } else if (!view.model.has(\"rerunnable\")) {\n                return view.model.fetch({\n                    silent: true,\n                    data: {\n                        // only fetch rerunnable and creating_job to keep overhead down\n                        keys: [\"rerunnable\", \"creating_job\"].join(\",\")\n                    }\n                });\n            }\n            return jQuery.when();\n        },\n\n        /** event map */\n        events: _.extend(_.clone(_super.prototype.events), {\n            \"click .unhide-link\": function(ev) {\n                this.model.unhide();\n                return false;\n            }\n        }),\n\n        /** string rep */\n        toString: function() {\n            var modelString = this.model ? `${this.model}` : \"(no model)\";\n            return `HDAListItemEdit(${modelString})`;\n        }\n    }\n);\n\n// ............................................................................ TEMPLATES\n/** underscore templates */\nHDAListItemEdit.prototype.templates = (() => {\n    var warnings = _.extend({}, _super.prototype.templates.warnings, {\n        hidden: BASE_MVC.wrapTemplate(\n            [\n                \"<% if( !dataset.visible ){ %>\",\n                // add a link to unhide a dataset\n                '<div class=\"hidden-msg warningmessagesmall\">',\n                _l(\"This dataset has been hidden\"),\n                '<br /><a class=\"unhide-link\" a href=\"javascript:void(0);\">',\n                _l(\"Unhide it\"),\n                \"</a>\",\n                \"</div>\",\n                \"<% } %>\"\n            ],\n            \"dataset\"\n        )\n    });\n\n    return _.extend({}, _super.prototype.templates, {\n        //NOTE: *steal* the HDAListItemView titleBar\n        titleBar: HDA_LI.HDAListItemView.prototype.templates.titleBar,\n        warnings: warnings\n    });\n})();\n\n//==============================================================================\nexport default {\n    HDAListItemEdit: HDAListItemEdit\n};\n"]}