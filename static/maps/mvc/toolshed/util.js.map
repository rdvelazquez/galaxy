{"version":3,"sources":["mvc/toolshed/util.js"],"names":["searchShed","request","response","that","shed_url","base_url","Galaxy","root","$","get","term","tool_shed_url","result_list","shedParser","data","results","hits","jsondata","each","record","hit","label","repository","name","repo_owner_username","description","result","value","id","push","addToQueue","metadata","substr","length","key","repository_id","changeset_revision","queued_repos","Object","localStorage","repositories","JSON","parse","stringify","queueLength","hasOwnProperty","repo_queue","queue_length","keys"],"mappings":";;;;;;AAAA,QAAIA,aAAa,SAAbA,UAAa,CAASC,OAAT,EAAkBC,QAAlB,EAA4B;AACzC,YAAIC,OAAO,IAAX;AACA,YAAIC,WAAW,KAAKA,QAApB;AACA,YAAIC,WAAcC,OAAOC,IAArB,yBAAJ;AACAC,UAAEC,GAAF,CAAMJ,QAAN,EAAgB,EAAEK,MAAMT,QAAQS,IAAhB,EAAsBC,eAAeP,QAArC,EAAhB,EAAiE,gBAAQ;AACrE,gBAAIQ,cAAcT,KAAKU,UAAL,CAAgBC,IAAhB,CAAlB;AACAZ,qBAASU,WAAT;AACH,SAHD;AAIH,KARD;;AAUA,QAAIC,aAAa,SAAbA,UAAa,WAAY;AACzB,YAAIE,UAAU,EAAd;AACA,YAAIC,OAAOC,SAASD,IAApB;AACAR,UAAEU,IAAF,CAAOF,IAAP,EAAa,eAAO;AAChB,gBAAIG,SAASH,KAAKI,GAAL,CAAb;AACA,gBAAIC,QAAWF,OAAOG,UAAP,CAAkBC,IAA7B,YAAwCJ,OAAOG,UAAP,CAAkBE,mBAA1D,UACAL,OAAOG,UAAP,CAAkBG,WADtB;AAGA,gBAAIC,SAAS,EAAEC,OAAOR,OAAOG,UAAP,CAAkBM,EAA3B,EAA+BP,OAAOA,KAAtC,EAAb;AACAN,oBAAQc,IAAR,CAAaH,MAAb;AACH,SAPD;AAQA,eAAOX,OAAP;AACH,KAZD;;AAcA,QAAIe,aAAa,SAAbA,UAAa,WAAY;AACzB,YAAIC,SAASpB,aAAT,CAAuBqB,MAAvB,CAA8B,CAAC,CAA/B,KAAqC,GAAzC,EAA8C;AAC1CD,qBAASpB,aAAT,GAAyBoB,SAASpB,aAAT,CAAuBqB,MAAvB,CAA8B,CAA9B,EAAiCD,SAASpB,aAAT,CAAuBsB,MAAvB,GAAgC,CAAjE,CAAzB;AACH;AACD,YAAIC,MAASH,SAASpB,aAAlB,SAAmCoB,SAASI,aAA5C,SAA6DJ,SAASK,kBAA1E;AACA,YAAIC,eAAe,IAAIC,MAAJ,EAAnB;AACA,YAAIC,aAAaC,YAAjB,EAA+B;AAC3BH,2BAAeI,KAAKC,KAAL,CAAWH,aAAaC,YAAxB,CAAf;AACH;AACDH,qBAAaH,GAAb,IAAoBH,QAApB;AACAQ,qBAAaC,YAAb,GAA4BC,KAAKE,SAAL,CAAeN,YAAf,CAA5B;AACH,KAXD;;AAaA,QAAIO,cAAc,SAAdA,WAAc,GAAM;AACpB,YAAIL,aAAaM,cAAb,CAA4B,cAA5B,CAAJ,EAAiD;AAC7C,gBAAIC,aAAaL,KAAKC,KAAL,CAAWH,aAAaC,YAAxB,CAAjB;AACA,gBAAIO,eAAeT,OAAOU,IAAP,CAAYF,UAAZ,EAAwBb,MAA3C;AACA,mBAAOc,YAAP;AACH,SAJD,MAIO;AACH,mBAAO,CAAP;AACH;AACJ,KARD;;sBAUe;AACX/C,oBAAYA,UADD;AAEXa,oBAAYA,UAFD;AAGXiB,oBAAYA,UAHD;AAIXc,qBAAaA;AAJF,K","file":"../../../scripts/mvc/toolshed/util.js","sourcesContent":["var searchShed = function(request, response) {\n    var that = this;\n    var shed_url = this.shed_url;\n    var base_url = `${Galaxy.root}api/tool_shed/search`;\n    $.get(base_url, { term: request.term, tool_shed_url: shed_url }, data => {\n        var result_list = that.shedParser(data);\n        response(result_list);\n    });\n};\n\nvar shedParser = jsondata => {\n    var results = [];\n    var hits = jsondata.hits;\n    $.each(hits, hit => {\n        var record = hits[hit];\n        var label = `${record.repository.name} by ${record.repository.repo_owner_username}: ${\n            record.repository.description\n        }`;\n        var result = { value: record.repository.id, label: label };\n        results.push(result);\n    });\n    return results;\n};\n\nvar addToQueue = metadata => {\n    if (metadata.tool_shed_url.substr(-1) == \"/\") {\n        metadata.tool_shed_url = metadata.tool_shed_url.substr(0, metadata.tool_shed_url.length - 1);\n    }\n    var key = `${metadata.tool_shed_url}|${metadata.repository_id}|${metadata.changeset_revision}`;\n    var queued_repos = new Object();\n    if (localStorage.repositories) {\n        queued_repos = JSON.parse(localStorage.repositories);\n    }\n    queued_repos[key] = metadata;\n    localStorage.repositories = JSON.stringify(queued_repos);\n};\n\nvar queueLength = () => {\n    if (localStorage.hasOwnProperty(\"repositories\")) {\n        var repo_queue = JSON.parse(localStorage.repositories);\n        var queue_length = Object.keys(repo_queue).length;\n        return queue_length;\n    } else {\n        return 0;\n    }\n};\n\nexport default {\n    searchShed: searchShed,\n    shedParser: shedParser,\n    addToQueue: addToQueue,\n    queueLength: queueLength\n};\n"]}