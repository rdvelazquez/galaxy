{"version":3,"sources":["mvc/ui/icon-button.js"],"names":["IconButton","Backbone","Model","extend","defaults","title","icon_class","on_click","menu_options","is_menu_button","id","href","target","enabled","visible","tooltip_config","IconButtonView","View","initialize","model","attributes","placement","bind","render","$el","tooltip","new_elem","template","toJSON","get","replaceWith","setElement","events","click","event","_","isFunction","options","buffer","$","IconButtonCollection","Collection","IconButtonMenuView","tagName","self","collection","each","elt","attr","button","addClass","appendTo","make_popupmenu","create_icon_buttons_menu","config","global_config","buttons","map","button_config"],"mappings":"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","file":"../../../scripts/mvc/ui/icon-button.js","sourcesContent":["//=============================================================================\n/**\n * backbone model for icon buttons\n */\nvar IconButton = Backbone.Model.extend({\n    defaults: {\n        title: \"\",\n        icon_class: \"\",\n        on_click: null,\n        menu_options: null,\n        is_menu_button: true,\n        id: null,\n        href: null,\n        target: null,\n        enabled: true,\n        visible: true,\n        tooltip_config: {}\n    }\n});\n\n/**\n *  backbone view for icon buttons\n */\nvar IconButtonView = Backbone.View.extend({\n    initialize: function() {\n        // better rendering this way\n        this.model.attributes.tooltip_config = { placement: \"bottom\" };\n        this.model.bind(\"change\", this.render, this);\n    },\n\n    render: function() {\n        // hide tooltip\n        this.$el.tooltip(\"hide\");\n\n        var new_elem = this.template(this.model.toJSON());\n        // configure tooltip\n        new_elem.tooltip(this.model.get(\"tooltip_config\"));\n        this.$el.replaceWith(new_elem);\n        this.setElement(new_elem);\n        return this;\n    },\n\n    events: {\n        click: \"click\"\n    },\n\n    click: function(event) {\n        // if on_click pass to that function\n        if (_.isFunction(this.model.get(\"on_click\"))) {\n            this.model.get(\"on_click\")(event);\n            return false;\n        }\n        // otherwise, bubble up ( to href or whatever )\n        return true;\n    },\n\n    // generate html element\n    template: function(options) {\n        var buffer = `title=\"${options.title}\" class=\"icon-button`;\n\n        if (options.is_menu_button) {\n            buffer += \" menu-button\";\n        }\n\n        buffer += ` ${options.icon_class}`;\n\n        if (!options.enabled) {\n            buffer += \"_disabled\";\n        }\n\n        // close class tag\n        buffer += '\"';\n\n        if (options.id) {\n            buffer += ` id=\"${options.id}\"`;\n        }\n\n        buffer += ` href=\"${options.href}\"`;\n        // add target for href\n        if (options.target) {\n            buffer += ` target=\"${options.target}\"`;\n        }\n        // set visibility\n        if (!options.visible) {\n            buffer += ' style=\"display: none;\"';\n        }\n\n        // enabled/disabled\n        if (options.enabled) {\n            buffer = `<a ${buffer}/>`;\n        } else {\n            buffer = `<span ${buffer}/>`;\n        }\n\n        // return element\n        return $(buffer);\n    }\n});\n\n// define collection\nvar IconButtonCollection = Backbone.Collection.extend({\n    model: IconButton\n});\n\n/**\n * menu with multiple icon buttons\n * views are not needed nor used for individual buttons\n */\nvar IconButtonMenuView = Backbone.View.extend({\n    tagName: \"div\",\n\n    initialize: function() {\n        this.render();\n    },\n\n    render: function() {\n        // initialize icon buttons\n        var self = this;\n        this.collection.each(button => {\n            // create and add icon button to menu\n            var elt = $(\"<a/>\")\n                .attr(\"href\", \"javascript:void(0)\")\n                .attr(\"title\", button.attributes.title)\n                .addClass(\"icon-button menu-button\")\n                .addClass(button.attributes.icon_class)\n                .appendTo(self.$el)\n                .click(button.attributes.on_click);\n\n            // configure tooltip\n            if (button.attributes.tooltip_config) {\n                elt.tooltip(button.attributes.tooltip_config);\n            }\n\n            // add popup menu to icon\n            var menu_options = button.get(\"options\");\n            if (menu_options) {\n                make_popupmenu(elt, menu_options);\n            }\n        });\n\n        // return\n        return this;\n    }\n});\n\n/**\n * Returns an IconButtonMenuView for the provided configuration.\n * Configuration is a list of dictionaries where each dictionary\n * defines an icon button. Each dictionary must have the following\n * elements: icon_class, title, and on_click.\n */\nvar create_icon_buttons_menu = (config, global_config) => {\n    // initialize global configuration\n    if (!global_config) global_config = {};\n\n    // create and initialize menu\n    var buttons = new IconButtonCollection(\n        _.map(config, button_config => new IconButton(_.extend(button_config, global_config)))\n    );\n\n    // return menu\n    return new IconButtonMenuView({ collection: buttons });\n};\n\n//=============================================================================\nexport default {\n    IconButton: IconButton,\n    IconButtonView: IconButtonView,\n    IconButtonCollection: IconButtonCollection,\n    IconButtonMenuView: IconButtonMenuView,\n    create_icon_buttons_menu: create_icon_buttons_menu\n};\n"]}