{"version":3,"sources":["mvc/job/job-li.js"],"names":["_super","FoldoutListItemView","JobListItemView","extend","className","prototype","id","model","get","join","foldoutPanelClass","DatasetList","initialize","attributes","logger","log","call","tool","jobData","linkTarget","_swapNewRender","$newRender","has","$el","addClass","_getFoldoutPanelOptions","options","_","collection","outputCollection","selecting","_labelParamMap","params","labelParamMap","each","inputs","i","label","model_class","name","_labelInputMap","view","labelInputMap","toolInput","_findToolInput","input","toolInputs","exactMatch","findWhere","_findRepeatToolInput","partialMatch","find","indexOf","undefined","subMatch","toString","templates","elTemplate","wrapTemplate","titleBarTemplate","subtitleTemplate","detailsTemplate","titleBar","subtitle","details"],"mappings":"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","file":"../../../scripts/mvc/job/job-li.js","sourcesContent":["import LIST_ITEM from \"mvc/list/list-item\";\nimport DATASET_LIST from \"mvc/dataset/dataset-list\";\nimport BASE_MVC from \"mvc/base-mvc\";\nimport _l from \"utils/localization\";\n//==============================================================================\nvar _super = LIST_ITEM.FoldoutListItemView;\n/** @class A job view used from within a larger list of jobs.\n *      Each job itself is a foldout panel of history contents displaying the outputs of this job.\n */\nvar JobListItemView = _super.extend(\n    /** @lends JobListItemView.prototype */ {\n        /** logger used to record this.log messages, commonly set to console */\n        //logger              : console,\n\n        className: `${_super.prototype.className} job`,\n        id: function() {\n            return [\"job\", this.model.get(\"id\")].join(\"-\");\n        },\n\n        foldoutPanelClass: DATASET_LIST.DatasetList,\n\n        /** Set up: instance vars, options, and event handlers */\n        initialize: function(attributes) {\n            if (attributes.logger) {\n                this.logger = this.model.logger = attributes.logger;\n            }\n            this.log(`${this}.initialize:`, attributes);\n            _super.prototype.initialize.call(this, attributes);\n\n            this.tool = attributes.tool || {};\n            this.jobData = attributes.jobData || {};\n\n            /** where should pages from links be displayed? (default to new tab/window) */\n            this.linkTarget = attributes.linkTarget || \"_blank\";\n        },\n\n        /** In this override, add the state as a class for use with state-based CSS */\n        _swapNewRender: function($newRender) {\n            _super.prototype._swapNewRender.call(this, $newRender);\n            if (this.model.has(\"state\")) {\n                this.$el.addClass(`state-${this.model.get(\"state\")}`);\n            }\n            return this.$el;\n        },\n\n        /** Stub to return proper foldout panel options */\n        _getFoldoutPanelOptions: function() {\n            var options = _super.prototype._getFoldoutPanelOptions.call(this);\n            return _.extend(options, {\n                collection: this.model.outputCollection,\n                selecting: false\n            });\n        },\n\n        // ........................................................................ template helpers\n        // all of these are ADAPTERs - in other words, it might be better if the API returned the final form\n        //  or something similar in order to remove some of the complexity here\n\n        /** Return tool.inputs that should/can be safely displayed */\n        _labelParamMap: function() {\n            //ADAPTER\n            var params = this.model.get(\"params\");\n\n            var labelParamMap = {};\n            _.each(this.tool.inputs, i => {\n                //console.debug( i.label, i.model_class );\n                if (i.label && i.model_class !== \"DataToolParameter\") {\n                    labelParamMap[i.label] = params[i.name];\n                }\n            });\n            return labelParamMap;\n        },\n\n        _labelInputMap: function() {\n            //ADAPTER\n            var view = this;\n\n            var labelInputMap = {};\n            _.each(this.jobData.inputs, input => {\n                var toolInput = view._findToolInput(input.name);\n                if (toolInput) {\n                    labelInputMap[toolInput.label] = input;\n                }\n            });\n            return labelInputMap;\n        },\n\n        /** Return a tool.inputs object that matches (or partially matches) the given (job input) name */\n        _findToolInput: function(name) {\n            //ADAPTER\n            var toolInputs = this.tool.inputs;\n\n            var exactMatch = _.findWhere(toolInputs, { name: name });\n            if (exactMatch) {\n                return exactMatch;\n            }\n            return this._findRepeatToolInput(name, toolInputs);\n        },\n\n        /** Return a tool.inputs object that partially matches the given (job input) name (for repeat dataset inputs)*/\n        _findRepeatToolInput: function(name, toolInputs) {\n            //ADAPTER\n            toolInputs = toolInputs || this.tool.inputs;\n            var partialMatch = _.find(toolInputs, i => name.indexOf(i.name) === 0);\n            if (!partialMatch) {\n                return undefined;\n            }\n\n            var subMatch = _.find(partialMatch.inputs, i => name.indexOf(i.name) !== -1);\n            return subMatch;\n        },\n\n        // ........................................................................ misc\n        /** String representation */\n        toString: function() {\n            return `JobListItemView(${this.model})`;\n        }\n    }\n);\n\n// ............................................................................ TEMPLATES\n/** underscore templates */\nJobListItemView.prototype.templates = (() => {\n    //TODO: move to require text! plugin\n\n    var elTemplate = BASE_MVC.wrapTemplate([\n        '<div class=\"list-element\">',\n        '<div class=\"id\"><%- model.id %></div>',\n        // errors, messages, etc.\n        '<div class=\"warnings\"></div>',\n\n        // multi-select checkbox\n        '<div class=\"selector\">',\n        '<span class=\"fa fa-2x fa-square-o\"></span>',\n        \"</div>\",\n        // space for title bar buttons - gen. floated to the right\n        '<div class=\"primary-actions\"></div>',\n        '<div class=\"title-bar\"></div>',\n\n        // expandable area for more details\n        '<div class=\"details\"></div>',\n        \"</div>\"\n    ]);\n\n    var titleBarTemplate = BASE_MVC.wrapTemplate(\n        [\n            // adding a tabindex here allows focusing the title bar and the use of keydown to expand the dataset display\n            '<div class=\"title-bar clear\" tabindex=\"0\">',\n            //'<span class=\"state-icon\"></span>',\n            '<div class=\"title\">',\n            '<span class=\"name\"><%- view.tool.name %></span>',\n            \"</div>\",\n            '<div class=\"subtitle\">',\n            '<span class=\"description\"><%- view.tool.description %></span',\n            '<span class=\"create-time\">',\n            \" \",\n            _l(\"Created\"),\n            \": <%= new Date( job.create_time ).toString() %>, \",\n            \"</span\",\n            \"</div>\",\n            \"</div>\"\n        ],\n        \"job\"\n    );\n\n    var subtitleTemplate = BASE_MVC.wrapTemplate(\n        [\n            '<div class=\"subtitle\">',\n            '<span class=\"description\"><%- view.tool.description %></span',\n            //'<span class=\"create-time\">',\n            //    ' ', _l( 'Created' ), ': <%= new Date( job.create_time ).toString() %>, ',\n            //'</span',\n            //'<span class=\"version\">',\n            //    ' (', _l( 'version' ), ': <%- view.tool.version %>)',\n            //'</span',\n            \"</div>\"\n        ],\n        \"job\"\n    );\n\n    var detailsTemplate = BASE_MVC.wrapTemplate(\n        [\n            '<div class=\"details\">',\n            //'<div class=\"version\">',\n            //    '<label class=\"prompt\">', _l( 'Version' ), '</label>',\n            //    '<span class=\"value\"><%- view.tool.version %></span>',\n            //'</div>',\n            '<div class=\"params\">',\n            \"<% _.each( view._labelInputMap(), function( input, label ){ %>\",\n            '<div class=\"input\" data-input-name=\"<%- input.name %>\" data-input-id=\"<%- input.id %>\">',\n            '<label class=\"prompt\"><%- label %></label>',\n            //TODO: input dataset name\n            '<span class=\"value\"><%- input.content.name %></span>',\n            \"</div>\",\n            \"<% }) %>\",\n            \"<% _.each( view._labelParamMap(), function( param, label ){ %>\",\n            '<div class=\"param\" data-input-name=\"<%- param.name %>\">',\n            '<label class=\"prompt\"><%- label %></label>',\n            '<span class=\"value\"><%- param %></span>',\n            \"</div>\",\n            \"<% }) %>\",\n            \"</div>\",\n            \"</div>\"\n        ],\n        \"job\"\n    );\n\n    return _.extend({}, _super.prototype.templates, {\n        //el          : elTemplate,\n        titleBar: titleBarTemplate,\n        subtitle: subtitleTemplate,\n        details: detailsTemplate\n    });\n})();\n\n//=============================================================================\nexport default {\n    JobListItemView: JobListItemView\n};\n"]}