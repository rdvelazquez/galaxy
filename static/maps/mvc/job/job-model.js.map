{"version":3,"sources":["mvc/job/job-model.js"],"names":["logNamespace","searchableMixin","SearchableModelMixin","Job","Backbone","Model","extend","LoggableMixin","mixin","_logNamespace","defaults","model_class","tool_id","exit_code","inputs","outputs","params","create_time","update_time","state","NEW","parse","response","options","parseParams","newParams","_","each","value","key","JSON","initialize","attributes","debug","set","get","silent","outputCollection","HistoryContents","_setUpListeners","on","currModel","newState","log","inReadyState","trigger","previous","contains","READY_STATES","hasDetails","isEmpty","urlRoot","Galaxy","root","toString","join","JobCollection","Collection","model","url","intialize","models","console","ids","map","item","notReady","filter","job","haveDetails","all","queueDetailFetching","collection","queue","AjaxQueue","fetch","done","matches","matchesWhat","length","fromHistory","historyId","data","history_id","window"],"mappings":"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","file":"../../../scripts/mvc/job/job-model.js","sourcesContent":["import HISTORY_CONTENTS from \"mvc/history/history-contents\";\nimport STATES from \"mvc/dataset/states\";\nimport AJAX_QUEUE from \"utils/ajax-queue\";\nimport BASE_MVC from \"mvc/base-mvc\";\nimport _l from \"utils/localization\";\nvar logNamespace = \"jobs\";\n//==============================================================================\nvar searchableMixin = BASE_MVC.SearchableModelMixin;\n/** @class Represents a job running or ran on the server job handlers.\n */\nvar Job = Backbone.Model.extend(BASE_MVC.LoggableMixin).extend(\n    BASE_MVC.mixin(\n        searchableMixin,\n        /** @lends Job.prototype */ {\n            _logNamespace: logNamespace,\n\n            /** default attributes for a model */\n            defaults: {\n                model_class: \"Job\",\n\n                tool_id: null,\n                exit_code: null,\n\n                inputs: {},\n                outputs: {},\n                params: {},\n\n                create_time: null,\n                update_time: null,\n                state: STATES.NEW\n            },\n\n            /** override to parse params on incomming */\n            parse: function(response, options) {\n                response.params = this.parseParams(response.params);\n                return response;\n            },\n\n            /** override to treat param values as json */\n            parseParams: function(params) {\n                var newParams = {};\n                _.each(params, (value, key) => {\n                    newParams[key] = JSON.parse(value);\n                });\n                return newParams;\n            },\n\n            /** instance vars and listeners */\n            initialize: function(attributes, options) {\n                this.debug(`${this}(Job).initialize`, attributes, options);\n\n                this.set(\"params\", this.parseParams(this.get(\"params\")), {\n                    silent: true\n                });\n\n                this.outputCollection = attributes.outputCollection || new HISTORY_CONTENTS.HistoryContents([]);\n                this._setUpListeners();\n            },\n\n            /** set up any event listeners\n             *  event: state:ready  fired when this DA moves into/is already in a ready state\n             */\n            _setUpListeners: function() {\n                // if the state has changed and the new state is a ready state, fire an event\n                this.on(\"change:state\", function(currModel, newState) {\n                    this.log(`${this} has changed state:`, currModel, newState);\n                    if (this.inReadyState()) {\n                        this.trigger(\"state:ready\", currModel, newState, this.previous(\"state\"));\n                    }\n                });\n            },\n\n            // ........................................................................ common queries\n            /** Is this job in a 'ready' state; where 'Ready' states are states where no\n             *      processing is left to do on the server.\n             */\n            inReadyState: function() {\n                return _.contains(STATES.READY_STATES, this.get(\"state\"));\n            },\n\n            /** Does this model already contain detailed data (as opposed to just summary level data)? */\n            hasDetails: function() {\n                //?? this may not be reliable\n                return !_.isEmpty(this.get(\"outputs\"));\n            },\n\n            // ........................................................................ ajax\n            /** root api url */\n            urlRoot: `${Galaxy.root}api/jobs`,\n            //url : function(){ return this.urlRoot; },\n\n            // ........................................................................ searching\n            // see base-mvc, SearchableModelMixin\n            /** what attributes of an Job will be used in a text search */\n            //searchAttributes : [\n            //    'tool'\n            //],\n\n            // ........................................................................ misc\n            /** String representation */\n            toString: function() {\n                return [\"Job(\", this.get(\"id\"), \":\", this.get(\"tool_id\"), \")\"].join(\"\");\n            }\n        }\n    )\n);\n\n//==============================================================================\n/** @class Backbone collection for Jobs.\n */\nvar JobCollection = Backbone.Collection.extend(BASE_MVC.LoggableMixin).extend(\n    /** @lends JobCollection.prototype */ {\n        _logNamespace: logNamespace,\n\n        model: Job,\n\n        /** root api url */\n        urlRoot: `${Galaxy.root}api/jobs`,\n        url: function() {\n            return this.urlRoot;\n        },\n\n        intialize: function(models, options) {\n            console.debug(models, options);\n        },\n\n        // ........................................................................ common queries\n        /** Get the ids of every item in this collection\n         *  @returns array of encoded ids\n         */\n        ids: function() {\n            return this.map(item => item.get(\"id\"));\n        },\n\n        /** Get jobs that are not ready\n         *  @returns array of content models\n         */\n        notReady: function() {\n            return this.filter(job => !job.inReadyState());\n        },\n\n        /** return true if any jobs don't have details */\n        haveDetails: function() {\n            return this.all(job => job.hasDetails());\n        },\n\n        // ........................................................................ ajax\n        /** fetches all details for each job in the collection using a queue */\n        queueDetailFetching: function() {\n            var collection = this;\n\n            var queue = new AJAX_QUEUE.AjaxQueue(this.map(job => () => job.fetch({ silent: true })));\n\n            queue.done(() => {\n                collection.trigger(\"details-loaded\");\n            });\n            return queue;\n        },\n\n        //toDAG : function(){\n        //    return new JobDAG( this.toJSON() );\n        //},\n\n        // ........................................................................ sorting/filtering\n        /** return a new collection of jobs whose attributes contain the substring matchesWhat */\n        matches: function(matchesWhat) {\n            return this.filter(job => job.matches(matchesWhat));\n        },\n\n        // ........................................................................ misc\n        /** String representation. */\n        toString: function() {\n            return [\"JobCollection(\", this.length, \")\"].join(\"\");\n        }\n\n        //----------------------------------------------------------------------------- class vars\n    },\n    {\n        /** class level fn for fetching the job details for all jobs in a history */\n        fromHistory: function(historyId) {\n            console.debug(this);\n            var Collection = this;\n            var collection = new Collection([]);\n            collection.fetch({ data: { history_id: historyId } }).done(() => {\n                window.queue = collection.queueDetailFetching();\n            });\n            return collection;\n        }\n    }\n);\n\n//=============================================================================\nexport default {\n    Job: Job,\n    JobCollection: JobCollection\n};\n"]}