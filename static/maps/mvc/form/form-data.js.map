{"version":3,"sources":["mvc/form/form-data.js"],"names":["Manager","Backbone","Model","extend","initialize","app","checksum","sum","self","section","$el","find","each","id","$","attr","field","field_list","JSON","stringify","value","collapsed","create","dict","_iterate","result_dict","flat_dict","add","flat_id","input_id","input_value","element_list","convert","identifier","head","index","node","input","name","type","section_label","block_indices","block_prefix","block_label","pos","indexOf","length","push","parseInt","substr","sort","a","b","i","test_param","selectedCase","matchCase","flat","ignore","undefined","collapsible_value","payload","p_id","match","matchModel","model","callback","visitInputs","inputs","matchResponse","response","result","search","new_id","separator","Array","parent","children","child","hasClass","input_list","truevalue","falsevalue","cases","prefix","context","_","key","cache","j","Galaxy","emit","debug"],"mappings":"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","file":"../../../scripts/mvc/form/form-data.js","sourcesContent":["/* This class maps the form dom to an api compatible javascript dictionary. */\nexport var Manager = Backbone.Model.extend({\n    initialize: function(app) {\n        this.app = app;\n    },\n\n    /** Creates a checksum. */\n    checksum: function() {\n        var sum = \"\";\n        var self = this;\n        this.app.section.$el.find(\".section-row\").each(function() {\n            var id = $(this).attr(\"id\");\n            var field = self.app.field_list[id];\n            if (field) {\n                sum += `${id}:${JSON.stringify(field.value && field.value())}:${field.collapsed};`;\n            }\n        });\n        return sum;\n    },\n\n    /** Convert dom into a dictionary of flat id/value pairs used e.g. on job submission. */\n    create: function() {\n        var self = this;\n\n        // get raw dictionary from dom\n        var dict = {};\n        this._iterate(this.app.section.$el, dict);\n\n        // add to result dictionary, label elements\n        var result_dict = {};\n        this.flat_dict = {};\n        function add(flat_id, input_id, input_value) {\n            self.flat_dict[flat_id] = input_id;\n            result_dict[flat_id] = input_value;\n            if (self.app.element_list[input_id]) {\n                self.app.element_list[input_id].$el.attr(\"tour_id\", flat_id);\n            }\n        }\n        // converter between raw dictionary and job dictionary\n        function convert(identifier, head) {\n            for (var index in head) {\n                var node = head[index];\n                if (node.input) {\n                    var input = node.input;\n                    var flat_id = identifier;\n                    if (identifier !== \"\") {\n                        flat_id += \"|\";\n                    }\n                    flat_id += input.name;\n                    switch (input.type) {\n                        case \"repeat\":\n                            var section_label = \"section-\";\n                            var block_indices = [];\n                            var block_prefix = null;\n                            for (var block_label in node) {\n                                var pos = block_label.indexOf(section_label);\n                                if (pos != -1) {\n                                    pos += section_label.length;\n                                    block_indices.push(parseInt(block_label.substr(pos)));\n                                    if (!block_prefix) {\n                                        block_prefix = block_label.substr(0, pos);\n                                    }\n                                }\n                            }\n                            block_indices.sort((a, b) => a - b);\n                            index = 0;\n                            for (var i in block_indices) {\n                                convert(`${flat_id}_${index++}`, node[block_prefix + block_indices[i]]);\n                            }\n                            break;\n                        case \"conditional\":\n                            var value = self.app.field_list[input.id].value();\n                            add(`${flat_id}|${input.test_param.name}`, input.id, value);\n                            var selectedCase = matchCase(input, value);\n                            if (selectedCase != -1) {\n                                convert(flat_id, head[`${input.id}-section-${selectedCase}`]);\n                            }\n                            break;\n                        case \"section\":\n                            convert((!input.flat && flat_id) || \"\", node);\n                            break;\n                        default:\n                            var field = self.app.field_list[input.id];\n                            if (field && field.value) {\n                                value = field.value();\n                                if (input.ignore === undefined || input.ignore != value) {\n                                    if (field.collapsed && input.collapsible_value) {\n                                        value = input.collapsible_value;\n                                    }\n                                    add(flat_id, input.id, value);\n                                    if (input.payload) {\n                                        for (var p_id in input.payload) {\n                                            add(p_id, input.id, input.payload[p_id]);\n                                        }\n                                    }\n                                }\n                            }\n                    }\n                }\n            }\n        }\n        convert(\"\", dict);\n        return result_dict;\n    },\n\n    /** Matches flat ids to corresponding input element\n     * @param{string} flat_id - Flat input id to be looked up.\n     */\n    match: function(flat_id) {\n        return this.flat_dict && this.flat_dict[flat_id];\n    },\n\n    /** Match conditional values to selected cases\n     */\n    matchCase: function(input, value) {\n        return matchCase(input, value);\n    },\n\n    /** Matches a new tool model to the current input elements e.g. used to update dynamic options\n     */\n    matchModel: function(model, callback) {\n        var self = this;\n        visitInputs(model.inputs, (input, name) => {\n            if (self.flat_dict[name]) {\n                callback(input, self.flat_dict[name]);\n            }\n        });\n    },\n\n    /** Matches identifier from api response to input elements e.g. used to display validation errors\n     */\n    matchResponse: function(response) {\n        var result = {};\n        var self = this;\n        function search(id, head) {\n            if (typeof head === \"string\") {\n                var input_id = self.flat_dict[id];\n                if (input_id) {\n                    result[input_id] = head;\n                }\n            } else {\n                for (var i in head) {\n                    var new_id = i;\n                    if (id !== \"\") {\n                        var separator = \"|\";\n                        if (head instanceof Array) {\n                            separator = \"_\";\n                        }\n                        new_id = id + separator + new_id;\n                    }\n                    search(new_id, head[i]);\n                }\n            }\n        }\n        search(\"\", response);\n        return result;\n    },\n\n    /** Map dom tree to dictionary tree with input elements.\n     */\n    _iterate: function(parent, dict) {\n        var self = this;\n        var children = $(parent).children();\n        children.each(function() {\n            var child = this;\n            var id = $(child).attr(\"id\");\n            if ($(child).hasClass(\"section-row\")) {\n                var input = self.app.input_list[id];\n                dict[id] = (input && { input: input }) || {};\n                self._iterate(child, dict[id]);\n            } else {\n                self._iterate(child, dict);\n            }\n        });\n    }\n});\n\n/** Match conditional values to selected cases\n * @param{dict}   input     - Definition of conditional input parameter\n * @param{dict}   value     - Current value\n */\nexport var matchCase = (input, value) => {\n    if (input.test_param.type == \"boolean\") {\n        if (value == \"true\") {\n            value = input.test_param.truevalue || \"true\";\n        } else {\n            value = input.test_param.falsevalue || \"false\";\n        }\n    }\n    for (var i in input.cases) {\n        if (input.cases[i].value == value) {\n            return i;\n        }\n    }\n    return -1;\n};\n\n/** Visits tool inputs\n * @param{dict}   inputs    - Nested dictionary of input elements\n * @param{dict}   callback  - Called with the mapped dictionary object and corresponding model node\n */\nexport var visitInputs = (inputs, callback, prefix, context) => {\n    context = $.extend(true, {}, context);\n    _.each(inputs, input => {\n        if (input && input.type && input.name) {\n            context[input.name] = input;\n        }\n    });\n    for (var key in inputs) {\n        var node = inputs[key];\n        node.name = node.name || key;\n        var name = prefix ? `${prefix}|${node.name}` : node.name;\n        switch (node.type) {\n            case \"repeat\":\n                _.each(node.cache, (cache, j) => {\n                    visitInputs(cache, callback, `${name}_${j}`, context);\n                });\n                break;\n            case \"conditional\":\n                if (node.test_param) {\n                    callback(node.test_param, `${name}|${node.test_param.name}`, context);\n                    var selectedCase = matchCase(node, node.test_param.value);\n                    if (selectedCase != -1) {\n                        visitInputs(node.cases[selectedCase].inputs, callback, name, context);\n                    } else {\n                        Galaxy.emit.debug(`form-data::visitInputs() - Invalid case for ${name}.`);\n                    }\n                } else {\n                    Galaxy.emit.debug(`form-data::visitInputs() - Conditional test parameter missing for ${name}.`);\n                }\n                break;\n            case \"section\":\n                visitInputs(node.inputs, callback, name, context);\n                break;\n            default:\n                callback(node, name, context);\n        }\n    }\n};\n\nexport default {\n    Manager: Manager,\n    visitInputs: visitInputs\n};\n"]}