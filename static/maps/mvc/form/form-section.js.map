{"version":3,"sources":["mvc/form/form-section.js"],"names":["View","Backbone","extend","initialize","app","options","inputs","parameters","setElement","$","render","self","$el","empty","_","each","add","input","input_def","jQuery","id","uid","input_list","type","_addConditional","_addRepeat","_addSection","_addRow","test_param","model","get","disabled","field","set","selectedCase","data","matchCase","value","i","cases","case_def","section_row","nonhidden","j","hidden","fadeIn","hide","trigger","sub_section","_append","addClass","block_index","repeat","title","min","max","onnew","create","sub_section_id","ondel","del","n_cache","size","cache","Math","default","hideOptions","input_element","label","name","help","portlet","cls","collapsible","collapsible_button","collapsed","expanded","append","html","on","input_id","length","expand","onchange","field_list","hide_label","text_value","collapsible_value","collapsible_preview","argument","color","style","backdrop","fixed","element_list","attr"],"mappings":"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","file":"../../../scripts/mvc/form/form-section.js","sourcesContent":["/**\n    This class creates a form section and populates it with input elements. It also handles repeat blocks and conditionals by recursively creating new sub sections.\n*/\nimport Utils from \"utils/utils\";\nimport Ui from \"mvc/ui/ui-misc\";\nimport Portlet from \"mvc/ui/ui-portlet\";\nimport Repeat from \"mvc/form/form-repeat\";\nimport InputElement from \"mvc/form/form-input\";\nimport Parameters from \"mvc/form/form-parameters\";\nvar View = Backbone.View.extend({\n    initialize: function(app, options) {\n        this.app = app;\n        this.inputs = options.inputs;\n        this.parameters = new Parameters();\n        this.setElement($(\"<div/>\"));\n        this.render();\n    },\n\n    /** Render section view */\n    render: function() {\n        var self = this;\n        this.$el.empty();\n        _.each(this.inputs, input => {\n            self.add(input);\n        });\n    },\n\n    /** Add a new input element */\n    add: function(input) {\n        var input_def = jQuery.extend(true, {}, input);\n        input_def.id = input.id = Utils.uid();\n        this.app.input_list[input_def.id] = input_def;\n        switch (input_def.type) {\n            case \"conditional\":\n                this._addConditional(input_def);\n                break;\n            case \"repeat\":\n                this._addRepeat(input_def);\n                break;\n            case \"section\":\n                this._addSection(input_def);\n                break;\n            default:\n                this._addRow(input_def);\n        }\n    },\n\n    /** Add a conditional block */\n    _addConditional: function(input_def) {\n        var self = this;\n        input_def.test_param.id = input_def.id;\n        this.app.model.get(\"sustain_conditionals\") && (input_def.test_param.disabled = true);\n        var field = this._addRow(input_def.test_param);\n\n        // set onchange event for test parameter\n        field.model &&\n            field.model.set(\"onchange\", value => {\n                var selectedCase = self.app.data.matchCase(input_def, value);\n                for (var i in input_def.cases) {\n                    var case_def = input_def.cases[i];\n                    var section_row = self.$(`#${input_def.id}-section-${i}`);\n                    var nonhidden = false;\n                    for (var j in case_def.inputs) {\n                        if (!case_def.inputs[j].hidden) {\n                            nonhidden = true;\n                            break;\n                        }\n                    }\n                    if (i == selectedCase && nonhidden) {\n                        section_row.fadeIn(\"fast\");\n                    } else {\n                        section_row.hide();\n                    }\n                }\n                self.app.trigger(\"change\");\n            });\n\n        // add conditional sub sections\n        for (var i in input_def.cases) {\n            var sub_section = new View(this.app, {\n                inputs: input_def.cases[i].inputs\n            });\n            this._append(sub_section.$el.addClass(\"ui-form-section\"), `${input_def.id}-section-${i}`);\n        }\n\n        // trigger refresh on conditional input field after all input elements have been created\n        field.trigger(\"change\");\n    },\n\n    /** Add a repeat block */\n    _addRepeat: function(input_def) {\n        var self = this;\n        var block_index = 0;\n\n        // create repeat block element\n        var repeat = new Repeat.View({\n            title: input_def.title || \"Repeat\",\n            min: input_def.min,\n            max: input_def.max,\n            onnew: function() {\n                create(input_def.inputs);\n                self.app.trigger(\"change\");\n            }\n        });\n\n        // helper function to create new repeat blocks\n        function create(inputs) {\n            var sub_section_id = `${input_def.id}-section-${block_index++}`;\n            var sub_section = new View(self.app, { inputs: inputs });\n            repeat.add({\n                id: sub_section_id,\n                $el: sub_section.$el,\n                ondel: function() {\n                    repeat.del(sub_section_id);\n                    self.app.trigger(\"change\");\n                }\n            });\n        }\n\n        //\n        // add parsed/minimum number of repeat blocks\n        //\n        var n_cache = _.size(input_def.cache);\n        for (var i = 0; i < Math.max(Math.max(n_cache, input_def.min || 0), input_def.default || 0); i++) {\n            create(i < n_cache ? input_def.cache[i] : input_def.inputs);\n        }\n\n        // hide options\n        this.app.model.get(\"sustain_repeats\") && repeat.hideOptions();\n\n        // create input field wrapper\n        var input_element = new InputElement(this.app, {\n            label: input_def.title || input_def.name,\n            help: input_def.help,\n            field: repeat\n        });\n        this._append(input_element.$el, input_def.id);\n    },\n\n    /** Add a customized section */\n    _addSection: function(input_def) {\n        var portlet = new Portlet.View({\n            title: input_def.title || input_def.name,\n            cls: \"ui-portlet-section\",\n            collapsible: true,\n            collapsible_button: true,\n            collapsed: !input_def.expanded\n        });\n        portlet.append(new View(this.app, { inputs: input_def.inputs }).$el);\n        portlet.append(\n            $(\"<div/>\")\n                .addClass(\"ui-form-info\")\n                .html(input_def.help)\n        );\n        this.app.on(\"expand\", input_id => {\n            portlet.$(`#${input_id}`).length > 0 && portlet.expand();\n        });\n        this._append(portlet.$el, input_def.id);\n    },\n\n    /** Add a single input field element */\n    _addRow: function(input_def) {\n        var self = this;\n        var id = input_def.id;\n        input_def.onchange =\n            input_def.onchange ||\n            (() => {\n                self.app.trigger(\"change\", id);\n            });\n        var field = this.parameters.create(input_def);\n        this.app.field_list[id] = field;\n        var input_element = new InputElement(this.app, {\n            name: input_def.name,\n            label: input_def.hide_label ? \"\" : input_def.label || input_def.name,\n            value: input_def.value,\n            text_value: input_def.text_value,\n            collapsible_value: input_def.collapsible_value,\n            collapsible_preview: input_def.collapsible_preview,\n            help: input_def.help,\n            argument: input_def.argument,\n            disabled: input_def.disabled,\n            color: input_def.color,\n            style: input_def.style,\n            backdrop: input_def.backdrop,\n            hidden: input_def.hidden,\n            fixed: input_def.fixed,\n            field: field\n        });\n        this.app.element_list[id] = input_element;\n        this._append(input_element.$el, input_def.id);\n        return field;\n    },\n\n    /** Append a new element to the form i.e. input element, repeat block, conditionals etc. */\n    _append: function($el, id) {\n        this.$el.append($el.addClass(\"section-row\").attr(\"id\", id));\n    }\n});\n\nexport default {\n    View: View\n};\n"]}