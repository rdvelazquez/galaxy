{"version":3,"sources":["mvc/form/form-parameters.js"],"names":["Backbone","Model","extend","types","text","password","select","data_column","genomebuild","data","data_collection","integer","float","boolean","drill_down","color","hidden","hidden_data","baseurl","library_data","ftpfile","upload","genomespacefile","create","input_def","fieldClass","type","field","call","options","_fieldSelect","_fieldText","Galaxy","emit","debug","value","undefined","_fieldData","View","id","extensions","optional","multiple","flavor","onchange","is_workflow","error_text","_","each","push","label","option","SelectClass","Select","display","Checkbox","Radio","RadioButton","readonly","individual","searchable","_fieldDrilldown","Drilldown","area","isEmpty","$","isArray","str_value","i","String","Input","placeholder","datalist","_fieldSlider","Slider","precise","min","max","_fieldHidden","Hidden","info","_fieldBoolean","_fieldColor","_fieldLibrary","_fieldFtp","_fieldGenomeSpace","self","_fieldUpload","Upload"],"mappings":"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","file":"../../../scripts/mvc/form/form-parameters.js","sourcesContent":["/**\n    This class creates input elements. New input parameter types should be added to the types dictionary.\n*/\nimport Utils from \"utils/utils\";\nimport Ui from \"mvc/ui/ui-misc\";\nimport SelectContent from \"mvc/ui/ui-select-content\";\nimport SelectLibrary from \"mvc/ui/ui-select-library\";\nimport SelectFtp from \"mvc/ui/ui-select-ftp\";\nimport SelectGenomeSpace from \"mvc/ui/ui-select-genomespace\";\nimport ColorPicker from \"mvc/ui/ui-color-picker\";\n// create form view\nexport default Backbone.Model.extend({\n    /** Available parameter types */\n    types: {\n        text: \"_fieldText\",\n        password: \"_fieldText\",\n        select: \"_fieldSelect\",\n        data_column: \"_fieldSelect\",\n        genomebuild: \"_fieldSelect\",\n        data: \"_fieldData\",\n        data_collection: \"_fieldData\",\n        integer: \"_fieldSlider\",\n        float: \"_fieldSlider\",\n        boolean: \"_fieldBoolean\",\n        drill_down: \"_fieldDrilldown\",\n        color: \"_fieldColor\",\n        hidden: \"_fieldHidden\",\n        hidden_data: \"_fieldHidden\",\n        baseurl: \"_fieldHidden\",\n        library_data: \"_fieldLibrary\",\n        ftpfile: \"_fieldFtp\",\n        upload: \"_fieldUpload\",\n        genomespacefile: \"_fieldGenomeSpace\"\n    },\n\n    /** Returns an input field for a given field type */\n    create: function(input_def) {\n        var fieldClass = this.types[input_def.type];\n        var field = typeof this[fieldClass] === \"function\" ? this[fieldClass].call(this, input_def) : null;\n        if (!field) {\n            field = input_def.options ? this._fieldSelect(input_def) : this._fieldText(input_def);\n            Galaxy.emit.debug(\"form-parameters::_addRow()\", `Auto matched field type (${input_def.type}).`);\n        }\n        if (input_def.value === undefined) {\n            input_def.value = null;\n        }\n        field.value(input_def.value);\n        return field;\n    },\n\n    /** Data input field */\n    _fieldData: function(input_def) {\n        return new SelectContent.View({\n            id: `field-${input_def.id}`,\n            extensions: input_def.extensions,\n            optional: input_def.optional,\n            multiple: input_def.multiple,\n            type: input_def.type,\n            flavor: input_def.flavor,\n            data: input_def.options,\n            onchange: input_def.onchange\n        });\n    },\n\n    /** Select/Checkbox/Radio options field */\n    _fieldSelect: function(input_def) {\n        // show text field e.g. in workflow editor\n        if (input_def.is_workflow) {\n            return this._fieldText(input_def);\n        }\n\n        // customize properties\n        if (input_def.type == \"data_column\") {\n            input_def.error_text = \"Missing columns in referenced dataset.\";\n        }\n\n        // identify available options\n        var data = input_def.data;\n        if (!data) {\n            data = [];\n            _.each(input_def.options, option => {\n                data.push({ label: option[0], value: option[1] });\n            });\n        }\n\n        // identify display type\n        var SelectClass = Ui.Select;\n        switch (input_def.display) {\n            case \"checkboxes\":\n                SelectClass = Ui.Checkbox;\n                break;\n            case \"radio\":\n                SelectClass = Ui.Radio;\n                break;\n            case \"radiobutton\":\n                SelectClass = Ui.RadioButton;\n                break;\n        }\n\n        // create select field\n        return new SelectClass.View({\n            id: `field-${input_def.id}`,\n            data: data,\n            error_text: input_def.error_text || \"No options available\",\n            readonly: input_def.readonly,\n            multiple: input_def.multiple,\n            optional: input_def.optional,\n            onchange: input_def.onchange,\n            individual: input_def.individual,\n            searchable: input_def.flavor !== \"workflow\"\n        });\n    },\n\n    /** Drill down options field */\n    _fieldDrilldown: function(input_def) {\n        // show text field e.g. in workflow editor\n        if (input_def.is_workflow) {\n            return this._fieldText(input_def);\n        }\n\n        // create drill down field\n        return new Ui.Drilldown.View({\n            id: `field-${input_def.id}`,\n            data: input_def.options,\n            display: input_def.display,\n            optional: input_def.optional,\n            onchange: input_def.onchange\n        });\n    },\n\n    /** Text input field */\n    _fieldText: function(input_def) {\n        // field replaces e.g. a select field\n        if (input_def.options && input_def.data) {\n            input_def.area = input_def.multiple;\n            if (Utils.isEmpty(input_def.value)) {\n                input_def.value = null;\n            } else {\n                if ($.isArray(input_def.value)) {\n                    var str_value = \"\";\n                    for (var i in input_def.value) {\n                        str_value += String(input_def.value[i]);\n                        if (!input_def.multiple) {\n                            break;\n                        }\n                        str_value += \"\\n\";\n                    }\n                    input_def.value = str_value;\n                }\n            }\n        }\n        // create input element\n        return new Ui.Input({\n            id: `field-${input_def.id}`,\n            type: input_def.type,\n            area: input_def.area,\n            readonly: input_def.readonly,\n            placeholder: input_def.placeholder,\n            datalist: input_def.datalist,\n            onchange: input_def.onchange\n        });\n    },\n\n    /** Slider field */\n    _fieldSlider: function(input_def) {\n        return new Ui.Slider.View({\n            id: `field-${input_def.id}`,\n            precise: input_def.type == \"float\",\n            is_workflow: input_def.is_workflow,\n            min: input_def.min,\n            max: input_def.max,\n            onchange: input_def.onchange\n        });\n    },\n\n    /** Hidden field */\n    _fieldHidden: function(input_def) {\n        return new Ui.Hidden({\n            id: `field-${input_def.id}`,\n            info: input_def.info\n        });\n    },\n\n    /** Boolean field */\n    _fieldBoolean: function(input_def) {\n        return new Ui.RadioButton.View({\n            id: `field-${input_def.id}`,\n            data: [{ label: \"Yes\", value: \"true\" }, { label: \"No\", value: \"false\" }],\n            onchange: input_def.onchange\n        });\n    },\n\n    /** Color picker field */\n    _fieldColor: function(input_def) {\n        return new ColorPicker({\n            id: `field-${input_def.id}`,\n            onchange: input_def.onchange\n        });\n    },\n\n    /** Library dataset field */\n    _fieldLibrary: function(input_def) {\n        return new SelectLibrary.View({\n            id: `field-${input_def.id}`,\n            optional: input_def.optional,\n            multiple: input_def.multiple,\n            onchange: input_def.onchange\n        });\n    },\n\n    /** FTP file field */\n    _fieldFtp: function(input_def) {\n        return new SelectFtp.View({\n            id: `field-${input_def.id}`,\n            optional: input_def.optional,\n            multiple: input_def.multiple,\n            onchange: input_def.onchange\n        });\n    },\n\n    /** GenomeSpace file select field\n     */\n    _fieldGenomeSpace: function(input_def) {\n        var self = this;\n        return new SelectGenomeSpace.View({\n            id: `field-${input_def.id}`,\n            onchange: input_def.onchange\n        });\n    },\n\n    /** Upload file field */\n    _fieldUpload: function(input_def) {\n        return new Ui.Upload({\n            id: `field-${input_def.id}`,\n            onchange: input_def.onchange\n        });\n    }\n});\n"]}