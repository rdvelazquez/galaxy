{"version":3,"sources":["mvc/form/form-view.js"],"names":["View","Backbone","extend","initialize","options","model","Model","initial_errors","cls","icon","always_refresh","status","hide_operations","onchange","set","setElement","render","update","new_model","self","data","matchModel","node","input_id","input","input_list","_","isEqual","field","field_list","new_options","indexOf","type","i","opt","length","push","label","value","trigger","Galaxy","emit","debug","wait","active","is_dynamic","unwait","highlight","message","silent","input_element","element_list","error","portlet","expand","$panel","$el","parents","filter","$","css","first","animate","scrollTop","offset","top","errors","error_messages","matchResponse","off","Manager","_renderForm","create","get","attributes","current_check","checksum","on","refresh_on_change","new_check","each","reset","remove","UnescapedMessage","section","inputs","title","operations","buttons","collapsible","collapsed","onchange_title","append","empty","persistent"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAQO,QAAIA,sBAAOC,SAASD,IAAT,CAAcE,MAAd,CAAqB;AACnCC,oBAAY,oBAASC,OAAT,EAAkB;AAC1B,iBAAKC,KAAL,GAAa,IAAIJ,SAASK,KAAb,CAAmB;AAC5BC,gCAAgB,KADY;AAE5BC,qBAAK,oBAFuB;AAG5BC,sBAAM,IAHsB;AAI5BC,gCAAgB,IAJY;AAK5BC,wBAAQ,SALoB;AAM5BC,iCAAiB,KANW;AAO5BC,0BAAU,oBAAW,CAAE;AAPK,aAAnB,EAQVC,GARU,CAQNV,OARM,CAAb;AASA,iBAAKW,UAAL,CAAgB,QAAhB;AACA,iBAAKC,MAAL;AACH,SAbkC;;AAenC;AACAC,gBAAQ,gBAASC,SAAT,EAAoB;AACxB,gBAAIC,OAAO,IAAX;AACA,iBAAKC,IAAL,CAAUC,UAAV,CAAqBH,SAArB,EAAgC,UAACI,IAAD,EAAOC,QAAP,EAAoB;AAChD,oBAAIC,QAAQL,KAAKM,UAAL,CAAgBF,QAAhB,CAAZ;AACA,oBAAIC,SAASA,MAAMpB,OAAnB,EAA4B;AACxB,wBAAI,CAACsB,EAAEC,OAAF,CAAUH,MAAMpB,OAAhB,EAAyBkB,KAAKlB,OAA9B,CAAL,EAA6C;AACzCoB,8BAAMpB,OAAN,GAAgBkB,KAAKlB,OAArB;AACA,4BAAIwB,QAAQT,KAAKU,UAAL,CAAgBN,QAAhB,CAAZ;AACA,4BAAIK,MAAMX,MAAV,EAAkB;AACd,gCAAIa,cAAc,EAAlB;AACA,gCAAI,CAAC,MAAD,EAAS,iBAAT,EAA4B,YAA5B,EAA0CC,OAA1C,CAAkDP,MAAMQ,IAAxD,KAAiE,CAAC,CAAtE,EAAyE;AACrEF,8CAAcN,MAAMpB,OAApB;AACH,6BAFD,MAEO;AACH,qCAAK,IAAI6B,CAAT,IAAcX,KAAKlB,OAAnB,EAA4B;AACxB,wCAAI8B,MAAMZ,KAAKlB,OAAL,CAAa6B,CAAb,CAAV;AACA,wCAAIC,IAAIC,MAAJ,GAAa,CAAjB,EAAoB;AAChBL,oDAAYM,IAAZ,CAAiB;AACbC,mDAAOH,IAAI,CAAJ,CADM;AAEbI,mDAAOJ,IAAI,CAAJ;AAFM,yCAAjB;AAIH;AACJ;AACJ;AACDN,kCAAMX,MAAN,CAAaa,WAAb;AACAF,kCAAMW,OAAN,CAAc,QAAd;AACAC,mCAAOC,IAAP,CAAYC,KAAZ,CAAkB,qBAAlB,4BAAiEnB,QAAjE;AACH;AACJ;AACJ;AACJ,aA3BD;AA4BH,SA9CkC;;AAgDnC;AACAoB,cAAM,cAASC,MAAT,EAAiB;AACnB,iBAAK,IAAIX,CAAT,IAAc,KAAKR,UAAnB,EAA+B;AAC3B,oBAAIG,QAAQ,KAAKC,UAAL,CAAgBI,CAAhB,CAAZ;AACA,oBAAIT,QAAQ,KAAKC,UAAL,CAAgBQ,CAAhB,CAAZ;AACA,oBAAIT,MAAMqB,UAAN,IAAoBjB,MAAMe,IAA1B,IAAkCf,MAAMkB,MAA5C,EAAoD;AAChDlB,0BAAMgB,SAAS,MAAT,GAAkB,QAAxB;AACH;AACJ;AACJ,SAzDkC;;AA2DnC;AACAG,mBAAW,mBAASxB,QAAT,EAAmByB,OAAnB,EAA4BC,MAA5B,EAAoC;AAC3C,gBAAIC,gBAAgB,KAAKC,YAAL,CAAkB5B,QAAlB,CAApB;AACA,gBAAI2B,aAAJ,EAAmB;AACfA,8BAAcE,KAAd,CAAoBJ,WAAW,+BAA/B;AACA,qBAAKK,OAAL,CAAaC,MAAb;AACA,qBAAKf,OAAL,CAAa,QAAb,EAAuBhB,QAAvB;AACA,oBAAI,CAAC0B,MAAL,EAAa;AACT,wBAAIM,SAAS,KAAKC,GAAL,CACRC,OADQ,GAERC,MAFQ,CAED,YAAW;AACf,+BAAO,CAAC,MAAD,EAAS,QAAT,EAAmB3B,OAAnB,CAA2B4B,EAAE,IAAF,EAAQC,GAAR,CAAY,UAAZ,CAA3B,KAAuD,CAAC,CAA/D;AACH,qBAJQ,EAKRC,KALQ,EAAb;AAMAN,2BAAOO,OAAP,CACI;AACIC,mCAAWR,OAAOQ,SAAP,KAAqBb,cAAcM,GAAd,CAAkBQ,MAAlB,GAA2BC,GAAhD,GAAsD;AADrE,qBADJ,EAII,GAJJ;AAMH;AACJ;AACJ,SAjFkC;;AAmFnC;AACAC,gBAAQ,gBAAS9D,OAAT,EAAkB;AACtB,iBAAKmC,OAAL,CAAa,OAAb;AACA,gBAAInC,WAAWA,QAAQ8D,MAAvB,EAA+B;AAC3B,oBAAIC,iBAAiB,KAAK/C,IAAL,CAAUgD,aAAV,CAAwBhE,QAAQ8D,MAAhC,CAArB;AACA,qBAAK,IAAI3C,QAAT,IAAqB,KAAK4B,YAA1B,EAAwC;AACpC,wBAAIgB,eAAe5C,QAAf,CAAJ,EAA8B;AAC1B,6BAAKwB,SAAL,CAAexB,QAAf,EAAyB4C,eAAe5C,QAAf,CAAzB,EAAmD,IAAnD;AACH;AACJ;AACJ;AACJ,SA9FkC;;AAgGnC;AACAP,gBAAQ,kBAAW;AACf,gBAAIG,OAAO,IAAX;AACA,iBAAKkD,GAAL,CAAS,QAAT;AACA,iBAAKA,GAAL,CAAS,OAAT;AACA;AACA,iBAAKxC,UAAL,GAAkB,EAAlB;AACA;AACA,iBAAKJ,UAAL,GAAkB,EAAlB;AACA;AACA,iBAAK0B,YAAL,GAAoB,EAApB;AACA;AACA,iBAAK/B,IAAL,GAAY,IAAI,mBAASkD,OAAb,CAAqB,IAArB,CAAZ;AACA,iBAAKC,WAAL;AACA,iBAAKnD,IAAL,CAAUoD,MAAV;AACA,gBAAI,KAAKnE,KAAL,CAAWoE,GAAX,CAAe,gBAAf,CAAJ,EAAsC;AAClC,qBAAKP,MAAL,CAAY,KAAK7D,KAAL,CAAWqE,UAAvB;AACH;AACD;AACA,gBAAIC,gBAAgB,KAAKvD,IAAL,CAAUwD,QAAV,EAApB;AACA,iBAAKC,EAAL,CAAQ,QAAR,EAAkB,oBAAY;AAC1B,oBAAIrD,QAAQL,KAAKM,UAAL,CAAgBF,QAAhB,CAAZ;AACA,oBAAI,CAACC,KAAD,IAAUA,MAAMsD,iBAAhB,IAAqC3D,KAAKd,KAAL,CAAWoE,GAAX,CAAe,gBAAf,CAAzC,EAA2E;AACvE,wBAAIM,YAAY5D,KAAKC,IAAL,CAAUwD,QAAV,EAAhB;AACA,wBAAIG,aAAaJ,aAAjB,EAAgC;AAC5BA,wCAAgBI,SAAhB;AACA5D,6BAAKd,KAAL,CAAWoE,GAAX,CAAe,UAAf;AACH;AACJ;AACJ,aATD;AAUA,iBAAKI,EAAL,CAAQ,OAAR,EAAiB,YAAM;AACnBnD,kBAAEsD,IAAF,CAAO7D,KAAKgC,YAAZ,EAA0B,yBAAiB;AACvCD,kCAAc+B,KAAd;AACH,iBAFD;AAGH,aAJD;AAKA,mBAAO,IAAP;AACH,SApIkC;;AAsInC;AACAV,qBAAa,uBAAW;AACpBZ,cAAE,UAAF,EAAcuB,MAAd;AACA,gBAAI9E,UAAU,KAAKC,KAAL,CAAWqE,UAAzB;AACA,iBAAK1B,OAAL,GAAe,IAAI,iBAAGmC,gBAAP,EAAf;AACA,iBAAKC,OAAL,GAAe,IAAI,sBAAYpF,IAAhB,CAAqB,IAArB,EAA2B;AACtCqF,wBAAQjF,QAAQiF;AADsB,aAA3B,CAAf;AAGA,iBAAKhC,OAAL,GAAe,IAAI,oBAAQrD,IAAZ,CAAiB;AAC5BS,sBAAML,QAAQK,IADc;AAE5B6E,uBAAOlF,QAAQkF,KAFa;AAG5B9E,qBAAKJ,QAAQI,GAHe;AAI5B+E,4BAAY,CAACnF,QAAQQ,eAAT,IAA4BR,QAAQmF,UAJpB;AAK5BC,yBAASpF,QAAQoF,OALW;AAM5BC,6BAAarF,QAAQqF,WANO;AAO5BC,2BAAWtF,QAAQsF,SAPS;AAQ5BC,gCAAgBvF,QAAQuF;AARI,aAAjB,CAAf;AAUA,iBAAKtC,OAAL,CAAauC,MAAb,CAAoB,KAAK5C,OAAL,CAAaQ,GAAjC;AACA,iBAAKH,OAAL,CAAauC,MAAb,CAAoB,KAAKR,OAAL,CAAa5B,GAAjC;AACA,iBAAKA,GAAL,CAASqC,KAAT;AACA,gBAAIzF,QAAQiF,MAAZ,EAAoB;AAChB,qBAAK7B,GAAL,CAASoC,MAAT,CAAgB,KAAKvC,OAAL,CAAaG,GAA7B;AACH;AACD,gBAAIpD,QAAQ4C,OAAZ,EAAqB;AACjB,qBAAKA,OAAL,CAAa/B,MAAb,CAAoB;AAChB6E,gCAAY,IADI;AAEhBnF,4BAAQP,QAAQO,MAFA;AAGhBqC,6BAAS5C,QAAQ4C;AAHD,iBAApB;AAKH;AACDR,mBAAOC,IAAP,CAAYC,KAAZ,CAAkB,yBAAlB,EAA6C,WAA7C;AACH;AAtKkC,KAArB,CAAX;;sBAyKQ1C,I","file":"../../../scripts/mvc/form/form-view.js","sourcesContent":["/**\n    This is the main class of the form plugin. It is referenced as 'app' in lower level modules.\n*/\nimport Portlet from \"mvc/ui/ui-portlet\";\nimport Ui from \"mvc/ui/ui-misc\";\nimport FormSection from \"mvc/form/form-section\";\nimport FormData from \"mvc/form/form-data\";\n\nexport var View = Backbone.View.extend({\n    initialize: function(options) {\n        this.model = new Backbone.Model({\n            initial_errors: false,\n            cls: \"ui-portlet-limited\",\n            icon: null,\n            always_refresh: true,\n            status: \"warning\",\n            hide_operations: false,\n            onchange: function() {}\n        }).set(options);\n        this.setElement(\"<div/>\");\n        this.render();\n    },\n\n    /** Update available options */\n    update: function(new_model) {\n        var self = this;\n        this.data.matchModel(new_model, (node, input_id) => {\n            var input = self.input_list[input_id];\n            if (input && input.options) {\n                if (!_.isEqual(input.options, node.options)) {\n                    input.options = node.options;\n                    var field = self.field_list[input_id];\n                    if (field.update) {\n                        var new_options = [];\n                        if ([\"data\", \"data_collection\", \"drill_down\"].indexOf(input.type) != -1) {\n                            new_options = input.options;\n                        } else {\n                            for (var i in node.options) {\n                                var opt = node.options[i];\n                                if (opt.length > 2) {\n                                    new_options.push({\n                                        label: opt[0],\n                                        value: opt[1]\n                                    });\n                                }\n                            }\n                        }\n                        field.update(new_options);\n                        field.trigger(\"change\");\n                        Galaxy.emit.debug(\"form-view::update()\", `Updating options for ${input_id}`);\n                    }\n                }\n            }\n        });\n    },\n\n    /** Set form into wait mode */\n    wait: function(active) {\n        for (var i in this.input_list) {\n            var field = this.field_list[i];\n            var input = this.input_list[i];\n            if (input.is_dynamic && field.wait && field.unwait) {\n                field[active ? \"wait\" : \"unwait\"]();\n            }\n        }\n    },\n\n    /** Highlight and scroll to input element (currently only used for error notifications) */\n    highlight: function(input_id, message, silent) {\n        var input_element = this.element_list[input_id];\n        if (input_element) {\n            input_element.error(message || \"Please verify this parameter.\");\n            this.portlet.expand();\n            this.trigger(\"expand\", input_id);\n            if (!silent) {\n                var $panel = this.$el\n                    .parents()\n                    .filter(function() {\n                        return [\"auto\", \"scroll\"].indexOf($(this).css(\"overflow\")) != -1;\n                    })\n                    .first();\n                $panel.animate(\n                    {\n                        scrollTop: $panel.scrollTop() + input_element.$el.offset().top - 120\n                    },\n                    500\n                );\n            }\n        }\n    },\n\n    /** Highlights errors */\n    errors: function(options) {\n        this.trigger(\"reset\");\n        if (options && options.errors) {\n            var error_messages = this.data.matchResponse(options.errors);\n            for (var input_id in this.element_list) {\n                if (error_messages[input_id]) {\n                    this.highlight(input_id, error_messages[input_id], true);\n                }\n            }\n        }\n    },\n\n    /** Render tool form */\n    render: function() {\n        var self = this;\n        this.off(\"change\");\n        this.off(\"reset\");\n        // contains the dom field elements as created by the parameter factory i.e. form-parameters\n        this.field_list = {};\n        // contains input definitions/dictionaries as provided by the parameters to_dict() function through the api\n        this.input_list = {};\n        // contains the dom elements of each input element i.e. form-input which wraps the actual input field\n        this.element_list = {};\n        // converts the form into a json data structure\n        this.data = new FormData.Manager(this);\n        this._renderForm();\n        this.data.create();\n        if (this.model.get(\"initial_errors\")) {\n            this.errors(this.model.attributes);\n        }\n        // add listener which triggers on checksum change, and reset the form input wrappers\n        var current_check = this.data.checksum();\n        this.on(\"change\", input_id => {\n            var input = self.input_list[input_id];\n            if (!input || input.refresh_on_change || self.model.get(\"always_refresh\")) {\n                var new_check = self.data.checksum();\n                if (new_check != current_check) {\n                    current_check = new_check;\n                    self.model.get(\"onchange\")();\n                }\n            }\n        });\n        this.on(\"reset\", () => {\n            _.each(self.element_list, input_element => {\n                input_element.reset();\n            });\n        });\n        return this;\n    },\n\n    /** Renders/appends dom elements of the form */\n    _renderForm: function() {\n        $(\".tooltip\").remove();\n        var options = this.model.attributes;\n        this.message = new Ui.UnescapedMessage();\n        this.section = new FormSection.View(this, {\n            inputs: options.inputs\n        });\n        this.portlet = new Portlet.View({\n            icon: options.icon,\n            title: options.title,\n            cls: options.cls,\n            operations: !options.hide_operations && options.operations,\n            buttons: options.buttons,\n            collapsible: options.collapsible,\n            collapsed: options.collapsed,\n            onchange_title: options.onchange_title\n        });\n        this.portlet.append(this.message.$el);\n        this.portlet.append(this.section.$el);\n        this.$el.empty();\n        if (options.inputs) {\n            this.$el.append(this.portlet.$el);\n        }\n        if (options.message) {\n            this.message.update({\n                persistent: true,\n                status: options.status,\n                message: options.message\n            });\n        }\n        Galaxy.emit.debug(\"form-view::initialize()\", \"Completed\");\n    }\n});\n\nexport default View;\n"]}