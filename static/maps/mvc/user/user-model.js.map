{"version":3,"sources":["mvc/user/user-model.js"],"names":["_","Backbone","logNamespace","User","Model","extend","LoggableMixin","_logNamespace","urlRoot","Galaxy","root","defaults","id","username","email","total_disk_usage","nice_total_disk_usage","quota_percent","is_admin","initialize","data","log","on","model","resp","changes","isAnonymous","get","isAdmin","loadFromApi","idOrCurrent","options","CURRENT_ID_STR","userFn","success","newModel","response","trigger","url","prototype","fetch","call","clearSessionStorage","key","sessionStorage","indexOf","removeItem","toString","userInfo","unshift","push","join","getCurrentUserFromApi","currentUser","UserCollection","Collection"],"mappings":"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","file":"../../../scripts/mvc/user/user-model.js","sourcesContent":["import * as _ from \"libs/underscore\";\nimport * as Backbone from \"libs/backbone\";\nimport baseMVC from \"mvc/base-mvc\";\nimport _l from \"utils/localization\";\n\nvar logNamespace = \"user\";\n//==============================================================================\n/** @class Model for a Galaxy user (including anonymous users).\n *  @name User\n */\nvar User = Backbone.Model.extend(baseMVC.LoggableMixin).extend(\n    /** @lends User.prototype */ {\n        _logNamespace: logNamespace,\n\n        /** API location for this resource */\n        urlRoot: function() {\n            return `${Galaxy.root}api/users`;\n        },\n\n        /** Model defaults\n         *  Note: don't check for anon-users with the username as the default is '(anonymous user)'\n         *      a safer method is if( !user.get( 'email' ) ) -> anon user\n         */\n        defaults: /** @lends User.prototype */ {\n            id: null,\n            username: `(${_l(\"anonymous user\")})`,\n            email: \"\",\n            total_disk_usage: 0,\n            nice_total_disk_usage: \"\",\n            quota_percent: null,\n            is_admin: false\n        },\n\n        /** Set up and bind events\n         *  @param {Object} data Initial model data.\n         */\n        initialize: function(data) {\n            this.log(\"User.initialize:\", data);\n\n            this.on(\"loaded\", function(model, resp) {\n                this.log(`${this} has loaded:`, model, resp);\n            });\n            this.on(\"change\", function(model, data) {\n                this.log(`${this} has changed:`, model, data.changes);\n            });\n        },\n\n        isAnonymous: function() {\n            return !this.get(\"email\");\n        },\n\n        isAdmin: function() {\n            return this.get(\"is_admin\");\n        },\n\n        /** Load a user with the API using an id.\n         *      If getting an anonymous user or no access to a user id, pass the User.CURRENT_ID_STR\n         *      (e.g. 'current') and the API will return the current transaction's user data.\n         *  @param {String} idOrCurrent encoded user id or the User.CURRENT_ID_STR\n         *  @param {Object} options hash to pass to Backbone.Model.fetch. Can contain success, error fns.\n         *  @fires loaded when the model has been loaded from the API, passing the newModel and AJAX response.\n         */\n        loadFromApi: function(idOrCurrent, options) {\n            idOrCurrent = idOrCurrent || User.CURRENT_ID_STR;\n\n            options = options || {};\n            var model = this;\n            var userFn = options.success;\n\n            /** @ignore */\n            options.success = (newModel, response) => {\n                model.trigger(\"loaded\", newModel, response);\n                if (userFn) {\n                    userFn(newModel, response);\n                }\n            };\n\n            // requests for the current user must have a sep. constructed url (fetch don't work, ma)\n            if (idOrCurrent === User.CURRENT_ID_STR) {\n                options.url = `${this.urlRoot}/${User.CURRENT_ID_STR}`;\n            }\n            return Backbone.Model.prototype.fetch.call(this, options);\n        },\n\n        /** Clears all data from the sessionStorage.\n         */\n        clearSessionStorage: function() {\n            for (var key in sessionStorage) {\n                //TODO: store these under the user key so we don't have to do this\n                // currently only history\n                if (key.indexOf(\"history:\") === 0) {\n                    sessionStorage.removeItem(key);\n                } else if (key === \"history-panel\") {\n                    sessionStorage.removeItem(key);\n                }\n            }\n        },\n\n        /** string representation */\n        toString: function() {\n            var userInfo = [this.get(\"username\")];\n            if (this.get(\"id\")) {\n                userInfo.unshift(this.get(\"id\"));\n                userInfo.push(this.get(\"email\"));\n            }\n            return `User(${userInfo.join(\":\")})`;\n        }\n    }\n);\n\n// string to send to tell server to return this transaction's user (see api/users.py)\nUser.CURRENT_ID_STR = \"current\";\n\n// class method to load the current user via the api and return that model\nUser.getCurrentUserFromApi = options => {\n    var currentUser = new User();\n    currentUser.loadFromApi(User.CURRENT_ID_STR, options);\n    return currentUser;\n};\n\n// (stub) collection for users (shouldn't be common unless admin UI)\nvar UserCollection = Backbone.Collection.extend(baseMVC.LoggableMixin).extend({\n    model: User,\n    urlRoot: function() {\n        return `${Galaxy.root}api/users`;\n    }\n    //logger  : console,\n});\n\n//==============================================================================\nexport default {\n    User: User\n};\n"]}