{"version":3,"sources":["mvc/user/user-quotameter.js"],"names":["logNamespace","UserQuotaMeter","Backbone","View","extend","LoggableMixin","_logNamespace","options","warnAtPercent","errorAtPercent","initialize","log","_","listenTo","model","render","update","loadFromApi","get","isOverQuota","_render_quota","modelJson","toJSON","percent","quota_percent","$meter","$","_templateQuotaMeter","$bar","find","attr","css","trigger","_render_usage","usage","_templateUsage","meterHtml","undefined","$el","html","tooltip","data","nice_total_disk_usage","join","toString"],"mappings":"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","file":"../../../scripts/mvc/user/user-quotameter.js","sourcesContent":["import baseMVC from \"mvc/base-mvc\";\nimport _l from \"utils/localization\";\n\nvar logNamespace = \"user\";\n//==============================================================================\n/** @class View to display a user's disk/storage usage\n *      either as a progress bar representing the percentage of a quota used\n *      or a simple text element displaying the human readable size used.\n *  @name UserQuotaMeter\n *  @augments Backbone.View\n */\nvar UserQuotaMeter = Backbone.View.extend(baseMVC.LoggableMixin).extend(\n    /** @lends UserQuotaMeter.prototype */ {\n        _logNamespace: logNamespace,\n\n        /** Defaults for optional settings passed to initialize */\n        options: {\n            warnAtPercent: 85,\n            errorAtPercent: 100\n        },\n\n        /** Set up, accept options, and bind events */\n        initialize: function(options) {\n            this.log(`${this}.initialize:`, options);\n            _.extend(this.options, options);\n\n            //this.bind( 'all', function( event, data ){ this.log( this + ' event:', event, data ); }, this );\n            this.listenTo(this.model, \"change:quota_percent change:total_disk_usage\", this.render);\n        },\n\n        /** Re-load user model data from the api */\n        update: function(options) {\n            this.log(`${this} updating user data...`, options);\n            this.model.loadFromApi(this.model.get(\"id\"), options);\n            return this;\n        },\n\n        /** Is the user over their quota (if there is one)?\n         * @returns {Boolean} true if over quota, false if no quota or under quota\n         */\n        isOverQuota: function() {\n            return (\n                this.model.get(\"quota_percent\") !== null &&\n                this.model.get(\"quota_percent\") >= this.options.errorAtPercent\n            );\n        },\n\n        /** Render the meter when they have an applicable quota. Will render as a progress bar\n         *      with their percentage of that quota in text over the bar.\n         *  @fires quota:over when user is over quota (>= this.errorAtPercent)\n         *  @fires quota:under when user is under quota\n         *  @fires quota:under:approaching when user is >= this.warnAtPercent of their quota\n         *  @fires quota:under:ok when user is below this.warnAtPercent\n         *  @returns {jQuery} the rendered meter\n         */\n        _render_quota: function() {\n            var modelJson = this.model.toJSON();\n\n            var //prevPercent = this.model.previous( 'quota_percent' ),\n            percent = modelJson.quota_percent;\n\n            var //meter = $( UserQuotaMeter.templates.quota( modelJson ) );\n            $meter = $(this._templateQuotaMeter(modelJson));\n\n            var $bar = $meter.find(\".progress-bar\");\n            //this.log( this + '.rendering quota, percent:', percent, 'meter:', meter );\n\n            // OVER QUOTA: color the quota bar and show the quota error message\n            if (this.isOverQuota()) {\n                //this.log( '\\t over quota' );\n                $bar.attr(\"class\", \"progress-bar progress-bar-danger\");\n                $meter.find(\".quota-meter-text\").css(\"color\", \"white\");\n                //TODO: only trigger event if state has changed\n                this.trigger(\"quota:over\", modelJson);\n\n                // APPROACHING QUOTA: color the quota bar\n            } else if (percent >= this.options.warnAtPercent) {\n                //this.log( '\\t approaching quota' );\n                $bar.attr(\"class\", \"progress-bar progress-bar-warning\");\n                //TODO: only trigger event if state has changed\n                this.trigger(\"quota:under quota:under:approaching\", modelJson);\n\n                // otherwise, hide/don't use the msg box\n            } else {\n                $bar.attr(\"class\", \"progress-bar progress-bar-success\");\n                //TODO: only trigger event if state has changed\n                this.trigger(\"quota:under quota:under:ok\", modelJson);\n            }\n            return $meter;\n        },\n\n        /** Render the meter when the user has NO applicable quota. Will render as text\n         *      showing the human readable sum storage their data is using.\n         *  @returns {jQuery} the rendered text\n         */\n        _render_usage: function() {\n            //var usage = $( UserQuotaMeter.templates.usage( this.model.toJSON() ) );\n            var usage = $(this._templateUsage(this.model.toJSON()));\n            this.log(`${this}.rendering usage:`, usage);\n            return usage;\n        },\n\n        /** Render either the quota percentage meter or the human readable disk usage\n         *      depending on whether the user model has quota info (quota_percent === null -> no quota)\n         *  @returns {Object} this UserQuotaMeter\n         */\n        render: function() {\n            //this.log( this + '.rendering' );\n            var meterHtml = null;\n\n            // no quota on server ('quota_percent' === null (can be valid at 0)), show usage instead\n            this.log(`${this}.model.quota_percent:`, this.model.get(\"quota_percent\"));\n            if (this.model.get(\"quota_percent\") === null || this.model.get(\"quota_percent\") === undefined) {\n                meterHtml = this._render_usage();\n\n                // otherwise, render percent of quota (and warning, error)\n            } else {\n                meterHtml = this._render_quota();\n                //TODO: add the original text for unregistered quotas\n                //tooltip = \"Your disk quota is %s.  You can increase your quota by registering a Galaxy account.\"\n            }\n\n            this.$el.html(meterHtml);\n            this.$el.find(\".quota-meter-text\").tooltip();\n            return this;\n        },\n\n        _templateQuotaMeter: function(data) {\n            return [\n                '<div id=\"quota-meter\" class=\"quota-meter progress\">',\n                '<div class=\"progress-bar\" style=\"width: ',\n                data.quota_percent,\n                '%\"></div>',\n                '<div class=\"quota-meter-text\" data-placement=\"left\" style=\"top: 6px\"',\n                data.nice_total_disk_usage\n                    ? ` title=\"Using ${data.nice_total_disk_usage}.  This value is recalculated when you log out.\">`\n                    : \">\",\n                _l(\"Using\"),\n                \" \",\n                data.quota_percent,\n                \"%\",\n                \"</div>\",\n                \"</div>\"\n            ].join(\"\");\n        },\n\n        _templateUsage: function(data) {\n            return [\n                '<div id=\"quota-meter\" class=\"quota-meter\" style=\"background-color: transparent\">',\n                '<div class=\"quota-meter-text\" data-placement=\"left\" data-original-title=\"This value is recalculated when you log out.\" style=\"top: 6px; color: white\">',\n                data.nice_total_disk_usage ? _l(\"Using \") + data.nice_total_disk_usage : \"\",\n                \"</div>\",\n                \"</div>\"\n            ].join(\"\");\n        },\n\n        toString: function() {\n            return `UserQuotaMeter(${this.model})`;\n        }\n    }\n);\n\n//==============================================================================\nexport default {\n    UserQuotaMeter: UserQuotaMeter\n};\n"]}