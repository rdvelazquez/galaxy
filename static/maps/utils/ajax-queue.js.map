{"version":3,"sources":["utils/ajax-queue.js"],"names":["AjaxQueue","initialFunctions","deferred","jQuery","Deferred","queue","responses","numToProcess","running","init","start","forEach","add","fn","index","length","push","fnIndex","xhr","done","notify","curr","total","response","always","shift","stop","causeFail","msg","reject","resolve","fail","progress","NamedAjaxQueue","names","obj","hasOwnProperty","Error","JSON","stringify","name"],"mappings":"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","file":"../../scripts/utils/ajax-queue.js","sourcesContent":["//ASSUMES: jquery\n//=============================================================================\n/** @class AjaxQueue\n *  Class that allows queueing functions that return jQuery promises (such\n *  as ajax calls). Each function waits for the previous to complete before\n *  being called\n *\n *  @constructor accepts a list of functions and automatically begins\n *      processing them\n */\nclass AjaxQueue {\n    constructor(initialFunctions) {\n        /** the main deferred for the entire queue - note: also sends notifications of progress */\n        this.deferred = jQuery.Deferred();\n        /** the queue array of functions */\n        this.queue = [];\n        /** cache the response from each deferred call - error or success */\n        this.responses = [];\n        /** total number of fn's to process */\n        this.numToProcess = 0;\n        /** is the queue processing/waiting for any calls to return? */\n        this.running = false;\n\n        this.init(initialFunctions || []);\n        this.start();\n    }\n\n    /** add all fns in initialFunctions (if any) to the queue */\n    init(initialFunctions) {\n        initialFunctions.forEach(fn => {\n            this.add(fn);\n        });\n    }\n\n    add(fn) {\n        var index = this.queue.length;\n        this.numToProcess += 1;\n\n        this.queue.push(() => {\n            var fnIndex = index;\n            var xhr = fn();\n            // if successful, notify using the deferred to allow tracking progress\n            xhr.done(response => {\n                this.deferred.notify({\n                    curr: fnIndex,\n                    total: this.numToProcess,\n                    response: response\n                });\n            });\n            // (regardless of previous error or success) if not last ajax call, shift and call the next\n            //  if last fn, resolve deferred\n            xhr.always(response => {\n                this.responses.push(response);\n                if (this.queue.length) {\n                    this.queue.shift()();\n                } else {\n                    this.stop();\n                }\n            });\n        });\n        return this;\n    }\n\n    start() {\n        if (this.queue.length) {\n            this.running = true;\n            this.queue.shift()();\n        }\n        return this;\n    }\n\n    /** stop the queue\n     *  @param {boolean} causeFail  cause an error/fail on the main deferred\n     *  @param {String} msg         message to send when rejecting the main deferred\n     */\n    stop(causeFail, msg) {\n        //TODO: doesn't abort current call\n        this.running = false;\n        this.queue = [];\n        if (causeFail) {\n            //TODO: spliced args instead\n            this.deferred.reject(msg);\n        } else {\n            this.deferred.resolve(this.responses);\n        }\n        this.numToProcess = 0;\n        this.deferred = jQuery.Deferred();\n        return this;\n    }\n\n    // only a handful of the deferred interface for now - possible YAGNI\n    /** implement done from the jq deferred interface */\n    done(fn) {\n        return this.deferred.done(fn);\n    }\n\n    /** implement fail from the jq deferred interface */\n    fail(fn) {\n        return this.deferred.fail(fn);\n    }\n\n    /** implement always from the jq deferred interface */\n    always(fn) {\n        return this.deferred.always(fn);\n    }\n\n    /** implement progress from the jq deferred interface */\n    progress(fn) {\n        return this.deferred.progress(fn);\n    }\n\n    /** shortcut constructor / fire and forget\n     *  @returns {Deferred} the queue's main deferred\n     */\n    static create(initialFunctions) {\n        return new AjaxQueue(initialFunctions).deferred;\n    }\n}\n\n//=============================================================================\n/** @class NamedAjaxQueue\n *  @augments AjaxQueue\n *  Allows associating a name with a deferring fn and prevents adding deferring\n *  fns if the name has already been used. Useful to prevent build up of duplicate\n *  async calls.\n *  Both the array initialFunctions sent to constructor and any added later with\n *  add() should be objects (NOT functions) of the form:\n *  { name: some unique id,\n *    fn:   the deferring fn or ajax call }\n */\nclass NamedAjaxQueue extends AjaxQueue {\n    constructor(initialFunctions) {\n        super(initialFunctions);\n        this.names = {};\n    }\n\n    /** add the obj.fn to the queue if obj.name hasn't been used before */\n    add(obj) {\n        if (!(obj.hasOwnProperty(\"name\") && obj.hasOwnProperty(\"fn\"))) {\n            throw new Error(`NamedAjaxQueue.add requires an object with both \"name\" and \"fn\": ${JSON.stringify(obj)}`);\n        }\n        if (this.names.hasOwnProperty(obj.name)) {\n            //console.warn( 'name has been used:', obj.name );\n            return;\n        }\n        this.names[obj.name] = true;\n        return super.add(obj.fn);\n    }\n\n    clear() {\n        this.names = {};\n        return this;\n    }\n\n    /** shortcut constructor / fire and forget\n     *  @returns {Deferred} the queue's main deferred\n     */\n    static create(initialFunctions) {\n        return new NamedAjaxQueue(initialFunctions).deferred;\n    }\n}\n\n//=============================================================================\nexport default {\n    AjaxQueue: AjaxQueue,\n    NamedAjaxQueue: NamedAjaxQueue\n};\n"]}