{"version":3,"sources":["utils/config.js"],"names":["_","Backbone","ConfigSetting","Model","extend","initialize","options","key","get","set","defaults","find","label","type","default_value","mode","hidden","s","undefined","set_value","get_random_color","value","parseFloat","parseInt","ConfigSettingCollection","Collection","model","to_key_value_dict","rval","each","setting","get_value","set_default_value","from_models_and_saved_values","models","saved_values","map","m","ConfigSettingCollectionView","View","className","render","container","$el","collection","param","index","id","row","$","appendTo","append","attr","text","val","click","select","option","container_div","input","css","e","removeClass","tip","siblings","addClass","left","position","width","top","height","show","stopPropagation","document","bind","hide","unbind","new_color_icon","tooltip","tip_inner","farb_obj","farbtastic","callback","color","fixed_farb_obj","setColor","help","render_in_modal","title","self","cancel_fn","Galaxy","modal","window","ok_fn","update_from_form","check_enter_esc","keyCode","which","children","length","body","buttons","Cancel","OK","is"],"mappings":"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","file":"../../scripts/utils/config.js","sourcesContent":["import * as _ from \"libs/underscore\";\nimport * as Backbone from \"libs/backbone\";\nimport util_mod from \"viz/trackster/util\";\n\n/* global $ */\n/* global Galaxy */\n\n/**\n * A configuration setting. Currently key is used as id.\n */\nvar ConfigSetting = Backbone.Model.extend({\n    initialize: function(options) {\n        // Use key as id for now.\n        var key = this.get(\"key\");\n        this.set(\"id\", key);\n\n        // Set defaults based on key.\n        var defaults = _.find(\n            [\n                {\n                    key: \"name\",\n                    label: \"Name\",\n                    type: \"text\",\n                    default_value: \"\"\n                },\n                {\n                    key: \"color\",\n                    label: \"Color\",\n                    type: \"color\",\n                    default_value: null\n                },\n                {\n                    key: \"min_value\",\n                    label: \"Min Value\",\n                    type: \"float\",\n                    default_value: null\n                },\n                {\n                    key: \"max_value\",\n                    label: \"Max Value\",\n                    type: \"float\",\n                    default_value: null\n                },\n                {\n                    key: \"mode\",\n                    type: \"string\",\n                    default_value: this.mode,\n                    hidden: true\n                },\n                {\n                    key: \"height\",\n                    type: \"int\",\n                    default_value: 32,\n                    hidden: true\n                },\n                {\n                    key: \"pos_color\",\n                    label: \"Positive Color\",\n                    type: \"color\",\n                    default_value: \"#FF8C00\"\n                },\n                {\n                    key: \"neg_color\",\n                    label: \"Negative Color\",\n                    type: \"color\",\n                    default_value: \"#4169E1\"\n                },\n                {\n                    key: \"block_color\",\n                    label: \"Block color\",\n                    type: \"color\",\n                    default_value: null\n                },\n                {\n                    key: \"label_color\",\n                    label: \"Label color\",\n                    type: \"color\",\n                    default_value: \"black\"\n                },\n                {\n                    key: \"show_insertions\",\n                    label: \"Show insertions\",\n                    type: \"bool\",\n                    default_value: false\n                },\n                {\n                    key: \"show_counts\",\n                    label: \"Show summary counts\",\n                    type: \"bool\",\n                    default_value: true\n                },\n                {\n                    key: \"reverse_strand_color\",\n                    label: \"Antisense strand color\",\n                    type: \"color\",\n                    default_value: null\n                },\n                {\n                    key: \"show_differences\",\n                    label: \"Show differences only\",\n                    type: \"bool\",\n                    default_value: true\n                }\n            ],\n            s => s.key === key\n        );\n        if (defaults) {\n            this.set(_.extend({}, defaults, options));\n        }\n\n        if (this.get(\"value\") === undefined && this.get(\"default_value\") !== undefined) {\n            // Use default to set value (if present).\n            this.set_value(this.get(\"default_value\"));\n\n            // If no default value for color config, set random color.\n            if (!this.get(\"value\") && this.get(\"type\") === \"color\") {\n                // For color setting, set random color.\n                this.set(\"value\", util_mod.get_random_color());\n            }\n        }\n    },\n\n    /**\n     * Cast and set value. This should be instead of\n     *  setting.set('value', new_value)\n     */\n    set_value: function(value, options) {\n        var type = this.get(\"type\");\n\n        if (type === \"float\") {\n            value = parseFloat(value);\n        } else if (type === \"int\") {\n            value = parseInt(value, 10);\n        }\n        // TODO: handle casting from string to bool?\n\n        this.set({ value: value }, options);\n    }\n});\n\n/**\n * Collection of config settings.\n */\nvar ConfigSettingCollection = Backbone.Collection.extend(\n    {\n        model: ConfigSetting,\n\n        /**\n         * Save settings as a dictionary of key-value pairs.\n         * This function is needed for backwards compatibility.\n         */\n        to_key_value_dict: function() {\n            var rval = {};\n            this.each(setting => {\n                rval[setting.get(\"key\")] = setting.get(\"value\");\n            });\n\n            return rval;\n        },\n\n        /**\n         * Returns value for a given key. Returns undefined if there is no setting with the specified key.\n         */\n        get_value: function(key) {\n            var s = this.get(key);\n            if (s) {\n                return s.get(\"value\");\n            }\n\n            return undefined;\n        },\n\n        /**\n         * Set value for a setting.\n         */\n        set_value: function(key, value, options) {\n            var s = this.get(key);\n            if (s) {\n                return s.set_value(value, options);\n            }\n\n            return undefined;\n        },\n\n        /**\n         * Set default value for a setting.\n         */\n        set_default_value: function(key, default_value) {\n            var s = this.get(key);\n            if (s) {\n                return s.set(\"default_value\", default_value);\n            }\n\n            return undefined;\n        }\n    },\n    {\n        /**\n         * Utility function that creates a ConfigSettingsCollection from a set of models\n         * and a saved_values dictionary.\n         */\n        from_models_and_saved_values: function(models, saved_values) {\n            // If there are saved values, copy models and update with saved values.\n            if (saved_values) {\n                models = _.map(models, m => _.extend({}, m, { value: saved_values[m.key] }));\n            }\n\n            return new ConfigSettingCollection(models);\n        }\n    }\n);\n\n/**\n * Viewer for config settings collection.\n */\nvar ConfigSettingCollectionView = Backbone.View.extend({\n    className: \"config-settings-view\",\n\n    /**\n     * Renders form for editing configuration settings.\n     */\n    render: function() {\n        var container = this.$el;\n\n        this.collection.each((param, index) => {\n            // Hidden params have no representation in the form\n            if (param.get(\"hidden\")) {\n                return;\n            }\n\n            // Build row for param.\n            var id = `param_${index}`;\n\n            var type = param.get(\"type\");\n            var value = param.get(\"value\");\n            var row = $(\"<div class='form-row' />\").appendTo(container);\n            row.append(\n                $(\"<label />\")\n                    .attr(\"for\", id)\n                    .text(`${param.get(\"label\")}:`)\n            );\n            // Draw parameter as checkbox\n            if (type === \"bool\") {\n                row.append(\n                    $('<input type=\"checkbox\" />')\n                        .attr(\"id\", id)\n                        .attr(\"name\", id)\n                        .attr(\"checked\", value)\n                );\n            } else if (type === \"text\") {\n                // Draw parameter as textbox\n                row.append(\n                    $('<input type=\"text\"/>')\n                        .attr(\"id\", id)\n                        .val(value)\n                        .click(function() {\n                            $(this).select();\n                        })\n                );\n            } else if (type === \"select\") {\n                // Draw parameter as select area\n                var select = $(\"<select />\").attr(\"id\", id);\n                _.each(param.get(\"options\"), option => {\n                    $(\"<option/>\")\n                        .text(option.label)\n                        .attr(\"value\", option.value)\n                        .appendTo(select);\n                });\n                select.val(value);\n                row.append(select);\n            } else if (type === \"color\") {\n                // Draw parameter as color picker\n                var container_div = $(\"<div/>\").appendTo(row);\n\n                var input = $(\"<input />\")\n                    .attr(\"id\", id)\n                    .attr(\"name\", id)\n                    .val(value)\n                    .css(\"float\", \"left\")\n                    .appendTo(container_div)\n                    .click(function(e) {\n                        // Hide other pickers.\n                        $(\".tooltip\").removeClass(\"in\");\n\n                        // Show input's color picker.\n                        var tip = $(this)\n                            .siblings(\".tooltip\")\n                            .addClass(\"in\");\n                        tip\n                            .css({\n                                // left: $(this).position().left + ( $(input).width() / 2 ) - 60,\n                                // top: $(this).position().top + $(this.height)\n                                left: $(this).position().left + $(this).width() + 5,\n                                top: $(this).position().top - $(tip).height() / 2 + $(this).height() / 2\n                            })\n                            .show();\n\n                        // Click management:\n\n                        // Keep showing tip if clicking in tip.\n                        tip.click(e => {\n                            e.stopPropagation();\n                        });\n\n                        // Hide tip if clicking outside of tip.\n                        $(document).bind(\"click.color-picker\", () => {\n                            tip.hide();\n                            $(document).unbind(\"click.color-picker\");\n                        });\n\n                        // No propagation to avoid triggering document click (and tip hiding) above.\n                        e.stopPropagation();\n                    });\n                // Icon for setting a new random color; behavior set below.\n                var new_color_icon = $(\"<a href='javascript:void(0)'/>\")\n                    .addClass(\"icon-button arrow-circle\")\n                    .appendTo(container_div)\n                    .attr(\"title\", \"Set new random color\")\n                    .tooltip();\n\n                // Color picker in tool tip style.\n                var tip = $(\"<div class='tooltip right' style='position: absolute;' />\")\n                    .appendTo(container_div)\n                    .hide();\n\n                // Inner div for padding purposes\n                var tip_inner = $(\"<div class='tooltip-inner' style='text-align: inherit'></div>\").appendTo(tip);\n\n                $(\"<div class='tooltip-arrow'></div>\").appendTo(tip);\n\n                var farb_obj = $.farbtastic(tip_inner, {\n                    width: 100,\n                    height: 100,\n                    callback: input,\n                    color: value\n                });\n\n                // Clear floating.\n                container_div.append($(\"<div/>\").css(\"clear\", \"both\"));\n\n                // Use function to fix farb_obj value.\n                (fixed_farb_obj => {\n                    new_color_icon.click(() => {\n                        fixed_farb_obj.setColor(util_mod.get_random_color());\n                    });\n                })(farb_obj);\n            } else {\n                row.append(\n                    $(\"<input />\")\n                        .attr(\"id\", id)\n                        .attr(\"name\", id)\n                        .val(value)\n                );\n            }\n            // Help text\n            if (param.help) {\n                row.append($(\"<div class='help'/>\").text(param.help));\n            }\n        });\n\n        return this;\n    },\n\n    /**\n     * Render view in modal.\n     */\n    render_in_modal: function(title) {\n        // Set up handlers for cancel, ok button and for handling esc key.\n        var self = this;\n\n        var cancel_fn = () => {\n            Galaxy.modal.hide();\n            $(window).unbind(\"keypress.check_enter_esc\");\n        };\n\n        var ok_fn = () => {\n            Galaxy.modal.hide();\n            $(window).unbind(\"keypress.check_enter_esc\");\n            self.update_from_form();\n        };\n\n        var check_enter_esc = e => {\n            if ((e.keyCode || e.which) === 27) {\n                // Escape key\n                cancel_fn();\n            } else if ((e.keyCode || e.which) === 13) {\n                // Enter key\n                ok_fn();\n            }\n        };\n\n        // Set keypress handler.\n        $(window).bind(\"keypress.check_enter_esc\", check_enter_esc);\n\n        // Show modal.\n        if (this.$el.children().length === 0) {\n            this.render();\n        }\n        Galaxy.modal.show({\n            title: title || \"Configure\",\n            body: this.$el,\n            buttons: {\n                Cancel: cancel_fn,\n                OK: ok_fn\n            }\n        });\n    },\n\n    /**\n     * Update settings with new values entered via form.\n     */\n    update_from_form: function() {\n        var self = this;\n        this.collection.each((setting, index) => {\n            if (!setting.get(\"hidden\")) {\n                // Set value from view.\n                var id = `param_${index}`;\n                var value = self.$el.find(`#${id}`).val();\n                if (setting.get(\"type\") === \"bool\") {\n                    value = self.$el.find(`#${id}`).is(\":checked\");\n                }\n                setting.set_value(value);\n            }\n        });\n    }\n});\n\nexport default {\n    ConfigSetting: ConfigSetting,\n    ConfigSettingCollection: ConfigSettingCollection,\n    ConfigSettingCollectionView: ConfigSettingCollectionView\n};\n"]}