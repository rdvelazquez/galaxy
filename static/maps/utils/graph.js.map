{"version":3,"sources":["utils/graph.js"],"names":["each","d","fn","k","hasOwnProperty","extend","d2","matches","iterate","obj","propsOrFn","undefined","props","returned","index","key","value","push","call","Edge","source","target","data","self","prototype","toString","toJSON","json","Vertex","name","edges","degree","eachEdge","GraphSearch","graph","processFns","vertexEarly","vertex","search","edge","from","vertexLate","_cache","_search","start","vertices","__search","discovered","searchTree","_searchTree","__searchTree","Graph","Object","keys","map","BreadthFirstSearch","constructor","queue","discoverAdjacent","adj","length","shift","eachAdjacent","DepthFirstSearch","entryTimes","exitTimes","time","discoverAdjacentVertices","adjacent","sourceVertex","recurse","directed","options","init","read","window","allowReflexiveEdges","numEdges","readNodesAndLinks","readVerticesAndEdges","nodes","forEach","createVertex","node","links","i","sourceName","targetName","createEdge","isReflexive","targetVertex","Array","concat","apply","eachVertex","print","console","log","toDOT","strings","to","join","toNodesAndLinks","indeces","toVerticesAndEdges","breadthFirstSearch","breadthFirstSearchTree","depthFirstSearch","depthFirstSearchTree","weakComponents","searchGraph","undiscovered","components","getComponent","undiscoveredVertex","filter","vertexName","hasBeenReversed","swap","weakComponentGraph","reduce","reduction","curr","weakComponentGraphArray","component","randGraph","numVerts","randRange","range","Math","floor","random"],"mappings":"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","file":"../../scripts/utils/graph.js","sourcesContent":["/* ============================================================================\nTODO:\n\n============================================================================ */\n//TODO: go ahead and move to underscore...\n/** call fn on each key/value in d */\nfunction each(d, fn) {\n    for (var k in d) {\n        if (d.hasOwnProperty(k)) {\n            fn(d[k], k, d);\n        }\n    }\n}\n\n/** copy key/values from d2 to d overwriting if present */\nfunction extend(d, d2) {\n    for (var k in d2) {\n        if (d2.hasOwnProperty(k)) {\n            d[k] = d2[k];\n        }\n    }\n    return d;\n}\n\n/** deep equal of two dictionaries */\nfunction matches(d, d2) {\n    for (var k in d2) {\n        if (d2.hasOwnProperty(k)) {\n            if (!d.hasOwnProperty(k) || d[k] !== d2[k]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n/** map key/values in obj\n *      if propsOrFn is an object, return only those k/v that match the object\n *      if propsOrFn is function, call the fn and returned the mapped values from it\n */\nfunction iterate(obj, propsOrFn) {\n    var fn = typeof propsOrFn === \"function\" ? propsOrFn : undefined;\n    var props = typeof propsOrFn === \"object\" ? propsOrFn : undefined;\n    var returned = [];\n    var index = 0;\n    for (var key in obj) {\n        if (obj.hasOwnProperty(key)) {\n            var value = obj[key];\n            if (fn) {\n                returned.push(fn.call(value, value, key, index));\n            } else if (props) {\n                //TODO: break out to sep?\n                if (typeof value === \"object\" && matches(value, props)) {\n                    returned.push(value);\n                }\n            } else {\n                returned.push(value);\n            }\n            index += 1;\n        }\n    }\n    return returned;\n}\n\n// ============================================================================\n/** A graph edge containing the name/id of both source and target and optional data\n */\nfunction Edge(source, target, data) {\n    var self = this;\n    self.source = source !== undefined ? source : null;\n    self.target = target !== undefined ? target : null;\n    self.data = data || null;\n    //if( typeof data === 'object' ){\n    //    extend( self, data );\n    //}\n    return self;\n}\n/** String representation */\nEdge.prototype.toString = function() {\n    return `${this.source}->${this.target}`;\n};\n\n/** Return a plain object representing this edge */\nEdge.prototype.toJSON = function() {\n    //TODO: this is safe in most browsers (fns will be stripped) - alter tests to incorporate this in order to pass data\n    //return this;\n    var json = {\n        source: this.source,\n        target: this.target\n    };\n    if (this.data) {\n        json.data = this.data;\n    }\n    return json;\n};\n\n// ============================================================================\n/** A graph vertex with a (unique) name/id and optional data.\n *      A vertex contains a list of Edges (whose sources are this vertex) and maintains the degree.\n */\nfunction Vertex(name, data) {\n    var self = this;\n    self.name = name !== undefined ? name : \"(unnamed)\";\n    self.data = data || null;\n    self.edges = {};\n    self.degree = 0;\n    return self;\n}\n\n/** String representation */\nVertex.prototype.toString = function() {\n    return `Vertex(${this.name})`;\n};\n\n//TODO: better name w no collision for either this.eachEdge or this.edges\n/** Iterate over each edge from this vertex */\nVertex.prototype.eachEdge = function(propsOrFn) {\n    return iterate(this.edges, propsOrFn);\n};\n\n/** Return a plain object representing this vertex */\nVertex.prototype.toJSON = function() {\n    //return this;\n    return {\n        name: this.name,\n        data: this.data\n    };\n};\n\n// ============================================================================\n/** Base (abstract) class for Graph search algorithms.\n *      Pass in the graph to search\n *      and an optional dictionary containing the 3 vertex/edge processing fns listed below.\n */\nvar GraphSearch = function(graph, processFns) {\n    var self = this;\n    self.graph = graph;\n\n    self.processFns = processFns || {\n        vertexEarly: function(vertex, search) {\n            //console.debug( 'processing vertex:', vertex.name, vertex );\n        },\n        edge: function(from, edge, search) {\n            //console.debug( this, 'edge:', from, edge, search );\n        },\n        vertexLate: function(vertex, search) {\n            //console.debug( this, 'vertexLate:', vertex, search );\n        }\n    };\n\n    self._cache = {};\n    return self;\n};\n\n/** Search interface where start is the vertex (or the name/id of the vertex) to begin the search at\n *      This public interface caches searches and returns the cached version if it's already been done.\n */\nGraphSearch.prototype.search = function _search(start) {\n    var self = this;\n    if (start in self._cache) {\n        return self._cache[start];\n    }\n    if (!(start instanceof Vertex)) {\n        start = self.graph.vertices[start];\n    }\n    return (self._cache[start.name] = self._search(start));\n};\n\n/** Actual search (private) function (abstract here) */\nGraphSearch.prototype._search = function __search(start, search) {\n    search = search || {\n        discovered: {},\n        //parents : {},\n        edges: []\n    };\n    return search;\n};\n\n/** Searches graph from start and returns a search tree of the results */\nGraphSearch.prototype.searchTree = function _searchTree(start) {\n    return this._searchTree(this.search(start));\n};\n\n/** Helper fn that returns a graph (a search tree) based on the search object passed in (does not actually search) */\nGraphSearch.prototype._searchTree = function __searchTree(search) {\n    var self = this;\n    return new Graph(true, {\n        edges: search.edges,\n        vertices: Object.keys(search.discovered).map(key => self.graph.vertices[key].toJSON())\n    });\n};\n\n// ============================================================================\n/** Breadth first search algo.\n */\nvar BreadthFirstSearch = function(graph, processFns) {\n    var self = this;\n    GraphSearch.call(this, graph, processFns);\n    return self;\n};\nBreadthFirstSearch.prototype = new GraphSearch();\nBreadthFirstSearch.prototype.constructor = BreadthFirstSearch;\n\n/** (Private) implementation of BFS */\nBreadthFirstSearch.prototype._search = function __search(start, search) {\n    search = search || {\n        discovered: {},\n        //parents : {},\n        edges: []\n    };\n\n    var self = this;\n    var queue = [];\n\n    function discoverAdjacent(adj, edge) {\n        var source = this;\n        if (self.processFns.edge) {\n            self.processFns.edge.call(self, source, edge, search);\n        }\n        if (!search.discovered[adj.name]) {\n            //console.debug( '\\t\\t\\t', adj.name, 'is undiscovered:', search.discovered[ adj.name ] );\n            search.discovered[adj.name] = true;\n            //search.parents[ adj.name ] = source;\n            search.edges.push({ source: source.name, target: adj.name });\n            //console.debug( '\\t\\t\\t queuing undiscovered: ', adj );\n            queue.push(adj);\n        }\n    }\n\n    //console.debug( 'BFS starting. start:', start );\n    search.discovered[start.name] = true;\n    queue.push(start);\n    while (queue.length) {\n        var vertex = queue.shift();\n        //console.debug( '\\t Queue is shifting. Current:', vertex, 'queue:', queue );\n        if (self.processFns.vertexEarly) {\n            self.processFns.vertexEarly.call(self, vertex, search);\n        }\n        self.graph.eachAdjacent(vertex, discoverAdjacent);\n        if (self.processFns.vertexLate) {\n            self.processFns.vertexLate.call(self, vertex, search);\n        }\n    }\n    //console.debug( 'search.edges:', JSON.stringify( search.edges ) );\n    return search;\n};\n\n// ============================================================================\n/** Depth first search algorithm.\n */\nvar DepthFirstSearch = function(graph, processFns) {\n    var self = this;\n    GraphSearch.call(this, graph, processFns);\n    return self;\n};\nDepthFirstSearch.prototype = new GraphSearch();\nDepthFirstSearch.prototype.constructor = DepthFirstSearch;\n\n/** (Private) implementation of DFS */\nDepthFirstSearch.prototype._search = function(start, search) {\n    //console.debug( 'depthFirstSearch:', start );\n    search = search || {\n        discovered: {},\n        //parents    : {},\n        edges: [],\n        entryTimes: {},\n        exitTimes: {}\n    };\n    var self = this;\n    var time = 0;\n\n    // discover verts adjacent to the source (this):\n    //  processing each edge, saving the edge to the tree, and caching the reverse path with parents\n    function discoverAdjacentVertices(adjacent, edge) {\n        //console.debug( '\\t\\t adjacent:', adjacent, 'edge:', edge );\n        var sourceVertex = this;\n        if (self.processFns.edge) {\n            self.processFns.edge.call(self, sourceVertex, edge, search);\n        }\n        if (!search.discovered[adjacent.name]) {\n            //search.parents[ adjacent.name ] = sourceVertex;\n            search.edges.push({\n                source: sourceVertex.name,\n                target: adjacent.name\n            });\n            recurse(adjacent);\n        }\n    }\n\n    // use function stack for DFS stack process verts, times, and discover adjacent verts (recursing into them)\n    function recurse(vertex) {\n        //console.debug( '\\t recursing into: ', vertex );\n        search.discovered[vertex.name] = true;\n        if (self.processFns.vertexEarly) {\n            self.processFns.vertexEarly.call(self, vertex, search);\n        }\n        search.entryTimes[vertex.name] = time++;\n\n        self.graph.eachAdjacent(vertex, discoverAdjacentVertices);\n\n        if (self.processFns.vertexLate) {\n            self.processFns.vertexLate.call(self, vertex, search);\n        }\n        search.exitTimes[vertex.name] = time++;\n    }\n    // begin recursion with the desired start\n    recurse(start);\n\n    return search;\n};\n\n// ============================================================================\n/** A directed/non-directed graph object.\n */\nfunction Graph(directed, data, options) {\n    //TODO: move directed to options\n    this.directed = directed || false;\n    return this.init(options).read(data);\n}\nwindow.Graph = Graph;\n\n/** Set up options and instance variables */\nGraph.prototype.init = function(options) {\n    options = options || {};\n    var self = this;\n\n    self.allowReflexiveEdges = options.allowReflexiveEdges || false;\n\n    self.vertices = {};\n    self.numEdges = 0;\n    return self;\n};\n\n/** Read data from the plain object data - both in d3 form (nodes and links) or vertices and edges */\nGraph.prototype.read = function(data) {\n    if (!data) {\n        return this;\n    }\n    var self = this;\n    if (data.hasOwnProperty(\"nodes\")) {\n        return self.readNodesAndLinks(data);\n    }\n    if (data.hasOwnProperty(\"vertices\")) {\n        return self.readVerticesAndEdges(data);\n    }\n    return self;\n};\n\n//TODO: the next two could be combined\n/** Create the graph using a list of nodes and a list of edges (where source and target are indeces into nodes) */\nGraph.prototype.readNodesAndLinks = function(data) {\n    if (!(data && data.hasOwnProperty(\"nodes\"))) {\n        return this;\n    }\n    //console.debug( 'readNodesAndLinks:', data );\n    //console.debug( 'data:\\n' + JSON.stringify( data, null, '  ' ) );\n    var self = this;\n    data.nodes.forEach(node => {\n        self.createVertex(node.name, node.data);\n    });\n    //console.debug( JSON.stringify( self.vertices, null, '  ' ) );\n\n    (data.links || []).forEach((edge, i) => {\n        var sourceName = data.nodes[edge.source].name;\n        var targetName = data.nodes[edge.target].name;\n        self.createEdge(sourceName, targetName, self.directed);\n    });\n    //self.print();\n    //console.debug( JSON.stringify( self.toNodesAndLinks(), null, '  ' ) );\n    return self;\n};\n\n/** Create the graph using a list of nodes and a list of edges (where source and target are names of nodes) */\nGraph.prototype.readVerticesAndEdges = function(data) {\n    if (!(data && data.hasOwnProperty(\"vertices\"))) {\n        return this;\n    }\n    //console.debug( 'readVerticesAndEdges:', data );\n    //console.debug( 'data:\\n' + JSON.stringify( data, null, '  ' ) );\n    var self = this;\n    data.vertices.forEach(node => {\n        self.createVertex(node.name, node.data);\n    });\n    //console.debug( JSON.stringify( self.vertices, null, '  ' ) );\n\n    (data.edges || []).forEach((edge, i) => {\n        self.createEdge(edge.source, edge.target, self.directed);\n    });\n    //self.print();\n    //console.debug( JSON.stringify( self.toNodesAndLinks(), null, '  ' ) );\n    return self;\n};\n\n/** Return the vertex with name, creating it if necessary */\nGraph.prototype.createVertex = function(name, data) {\n    //console.debug( 'createVertex:', name, data );\n    if (this.vertices[name]) {\n        return this.vertices[name];\n    }\n    return (this.vertices[name] = new Vertex(name, data));\n};\n\n/** Create an edge in vertex named sourceName to targetName (optionally adding data to it)\n *      If directed is false, create a second edge from targetName to sourceName.\n */\nGraph.prototype.createEdge = function(sourceName, targetName, directed, data) {\n    //note: allows multiple 'equivalent' edges (to/from same source/target)\n    //console.debug( 'createEdge:', source, target, directed );\n    var isReflexive = sourceName === targetName;\n    if (!this.allowReflexiveEdges && isReflexive) {\n        return null;\n    }\n\n    var sourceVertex = this.vertices[sourceName];\n    var targetVertex = this.vertices[targetName];\n    //note: silently ignores edges from/to unknown vertices\n    if (!(sourceVertex && targetVertex)) {\n        return null;\n    }\n\n    //TODO: prob. move to vertex\n    var self = this;\n\n    var edge = new Edge(sourceName, targetName, data);\n    sourceVertex.edges[targetName] = edge;\n    sourceVertex.degree += 1;\n    self.numEdges += 1;\n\n    //TODO:! don't like having duplicate edges for non-directed graphs\n    // mirror edges (reversing source and target) in non-directed graphs\n    //  but only if not reflexive\n    if (!isReflexive && !directed) {\n        // flip directed to prevent recursion loop\n        self.createEdge(targetName, sourceName, true);\n    }\n\n    return edge;\n};\n\n/** Walk over all the edges of the graph using the vertex.eachEdge iterator */\nGraph.prototype.edges = function(propsOrFn) {\n    return Array.prototype.concat.apply([], this.eachVertex(vertex => vertex.eachEdge(propsOrFn)));\n};\n\n/** Iterate over all the vertices in the graph */\nGraph.prototype.eachVertex = function(propsOrFn) {\n    return iterate(this.vertices, propsOrFn);\n};\n\n/** Return a list of the vertices adjacent to vertex */\nGraph.prototype.adjacent = function(vertex) {\n    var self = this;\n    return iterate(vertex.edges, edge => self.vertices[edge.target]);\n};\n\n/** Call fn on each vertex adjacent to vertex */\nGraph.prototype.eachAdjacent = function(vertex, fn) {\n    var self = this;\n    return iterate(vertex.edges, edge => {\n        var adj = self.vertices[edge.target];\n        return fn.call(vertex, adj, edge);\n    });\n};\n\n/** Print the graph to the console (debugging) */\nGraph.prototype.print = function() {\n    var self = this;\n    console.log(`Graph has ${Object.keys(self.vertices).length} vertices`);\n    self.eachVertex(vertex => {\n        console.log(vertex.toString());\n        vertex.eachEdge(edge => {\n            console.log(`\\t ${edge}`);\n        });\n    });\n    return self;\n};\n\n/** Return a DOT format string of this graph */\nGraph.prototype.toDOT = function() {\n    var self = this;\n    var strings = [];\n    strings.push(\"graph bler {\");\n    self.edges(edge => {\n        strings.push(`\\t${edge.from} -- ${edge.to};`);\n    });\n    strings.push(\"}\");\n    return strings.join(\"\\n\");\n};\n\n/** Return vertices and edges of this graph in d3 node/link format */\nGraph.prototype.toNodesAndLinks = function() {\n    var self = this;\n    var indeces = {};\n    return {\n        nodes: self.eachVertex((vertex, key, i) => {\n            indeces[vertex.name] = i;\n            return vertex.toJSON();\n        }),\n        links: self.edges(edge => {\n            var json = edge.toJSON();\n            json.source = indeces[edge.source];\n            json.target = indeces[edge.target];\n            return json;\n        })\n    };\n};\n\n/** Return vertices and edges of this graph where edges use the name/id as source and target */\nGraph.prototype.toVerticesAndEdges = function() {\n    var self = this;\n    return {\n        vertices: self.eachVertex((vertex, key) => vertex.toJSON()),\n        edges: self.edges(edge => edge.toJSON())\n    };\n};\n\n/** Search this graph using BFS */\nGraph.prototype.breadthFirstSearch = function(start, processFns) {\n    return new BreadthFirstSearch(this).search(start);\n};\n\n/** Return a searchtree of this graph using BFS */\nGraph.prototype.breadthFirstSearchTree = function(start, processFns) {\n    return new BreadthFirstSearch(this).searchTree(start);\n};\n\n/** Search this graph using DFS */\nGraph.prototype.depthFirstSearch = function(start, processFns) {\n    return new DepthFirstSearch(this).search(start);\n};\n\n/** Return a searchtree of this graph using DFS */\nGraph.prototype.depthFirstSearchTree = function(start, processFns) {\n    return new DepthFirstSearch(this).searchTree(start);\n};\n\n//Graph.prototype.shortestPath = function( start, end ){\n//};\n//\n//Graph.prototype.articulationVertices = function(){\n//};\n//\n//Graph.prototype.isAcyclic = function(){\n//};\n//\n//Graph.prototype.isBipartite = function(){\n//};\n\n/** Return an array of weakly connected (no edges between) sub-graphs in this graph */\nGraph.prototype.weakComponents = function() {\n    //TODO: alternately, instead of returning graph-like objects:\n    //  - could simply decorate the vertices (vertex.component = componentIndex), or clone the graph and do that\n    var self = this;\n\n    var searchGraph = this;\n    var undiscovered;\n    var components = [];\n\n    function getComponent(undiscoveredVertex) {\n        //TODO: better interface on dfs (search v. searchTree)\n        var search = new DepthFirstSearch(searchGraph)._search(undiscoveredVertex);\n\n        // remove curr discovered from undiscovered\n        undiscovered = undiscovered.filter(name => !(name in search.discovered));\n\n        return {\n            vertices: Object.keys(search.discovered).map(vertexName => self.vertices[vertexName].toJSON()),\n            edges: search.edges.map(edge => {\n                // restore any reversed edges\n                var hasBeenReversed = self.vertices[edge.target].edges[edge.source] !== undefined;\n                if (self.directed && hasBeenReversed) {\n                    var swap = edge.source;\n                    edge.source = edge.target;\n                    edge.target = swap;\n                }\n                return edge;\n            })\n        };\n    }\n\n    if (self.directed) {\n        // if directed - convert to undirected for search\n        searchGraph = new Graph(false, self.toNodesAndLinks());\n    }\n    undiscovered = Object.keys(searchGraph.vertices);\n    //console.debug( '(initial) undiscovered:', undiscovered );\n    while (undiscovered.length) {\n        var undiscoveredVertex = searchGraph.vertices[undiscovered.shift()];\n        components.push(getComponent(undiscoveredVertex));\n        //console.debug( 'undiscovered now:', undiscovered );\n    }\n\n    //console.debug( 'components:\\n', JSON.stringify( components, null, '  ' ) );\n    return components;\n};\n\n/** Return a single graph containing the weakly connected components in this graph */\nGraph.prototype.weakComponentGraph = function() {\n    //note: although this can often look like the original graph - edges can be lost\n    var components = this.weakComponents();\n    return new Graph(this.directed, {\n        vertices: components.reduce((reduction, curr) => reduction.concat(curr.vertices), []),\n        edges: components.reduce((reduction, curr) => reduction.concat(curr.edges), [])\n    });\n};\n\n/** Return an array of graphs of the weakly connected components in this graph */\nGraph.prototype.weakComponentGraphArray = function() {\n    //note: although this can often look like the original graph - edges can be lost\n    var graph = this;\n    return this.weakComponents().map(component => new Graph(graph.directed, component));\n};\n\n// ============================================================================\n/** Create a random graph with numVerts vertices and numEdges edges (for testing)\n */\nfunction randGraph(directed, numVerts, numEdges) {\n    //console.debug( 'randGraph', directed, numVerts, numEdges );\n    var data = { nodes: [], links: [] };\n    function randRange(range) {\n        return Math.floor(Math.random() * range);\n    }\n    for (var i = 0; i < numVerts; i++) {\n        data.nodes.push({ name: i });\n    }\n    for (i = 0; i < numEdges; i++) {\n        data.links.push({\n            source: randRange(numVerts),\n            target: randRange(numVerts)\n        });\n    }\n    //console.debug( JSON.stringify( data, null, '  ' ) );\n    return new Graph(directed, data);\n}\n\n// ============================================================================\nexport default {\n    Vertex: Vertex,\n    Edge: Edge,\n    BreadthFirstSearch: BreadthFirstSearch,\n    DepthFirstSearch: DepthFirstSearch,\n    Graph: Graph,\n    randGraph: randGraph\n};\n"]}