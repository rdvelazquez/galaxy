{"version":3,"sources":["utils/metrics-logger.js"],"names":["MetricsLogger","options","self","userId","window","bootstrapped","user","id","consoleLogger","_init","ALL","LOG","DEBUG","INFO","WARN","ERROR","METRIC","NONE","defaultOptions","logLevel","consoleLevel","defaultNamespace","consoleNamespaceWhitelist","consoleFlattenMessages","clientPrefix","maxCacheSize","postSize","addTime","cacheKeyPrefix","postUrl","delayPostInMs","getPingData","undefined","onServerResponse","prototype","k","hasOwnProperty","_parseLevel","_sending","_waiting","_postSize","_initCache","cache","LoggingCache","maxSize","key","err","_emitToConsole","level","type","upper","toUpperCase","Error","emit","namespace","logArguments","_addToCache","arguments","length","newLength","add","_buildEntry","_postCache","entry","args","time","Date","toISOString","jQuery","when","count","entries","get","entriesLength","postData","metrics","JSON","stringify","post","always","fail","xhr","status","message","readyState","responseJSON","responseText","done","response","remove","_delayPost","setTimeout","usefulToString","arg","asStr","String","whitelist","indexOf","Array","slice","call","unshift","map","join","info","apply","error","warn","debug","log","metric","_hasStorage","_initStorage","test","localStorage","setItem","removeItem","e","getItem","empty","_cache","_fetchAndParse","overage","splice","push","_unparseAndStore","parse","removed","print","console"],"mappings":"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","file":"../../scripts/utils/metrics-logger.js","sourcesContent":["/*global window, jQuery, console */\n/*=============================================================================\nTODO:\n    while anon: logs saved to 'logs-null' - this will never post\n        unless we manually do so at/after login\n        OR prepend when userId and localStorage has 'logs-null'\n    wire up _delayPost and test\n\n=============================================================================*/\n/** @class MetricsLogger\n *\n *  Object to cache, output, and post log/metric messages to the server.\n *  Meant to be attached to the Galaxy object.\n *\n *  Log from objects by either attaching logger directly:\n *      panel.logger.metric( 'user dataset deletion', panel.user.id, hda.toJSON() )\n *  or using the LoggableMixin or addLogging function:\n *      MyBackboneModel.extend( LoggableMixin ).extend({ ... })\n *      addLogging( MyBackboneModel, 'my-backbone-model' )\n *\n *  Log from templates by calling directly from Galaxy object:\n *      Galaxy.logger.metric( 'template loaded', { ownedByUser : true });\n *\n *  If you attempt to log an un-serializable object (circular reference, window, etc.),\n *  that entry will not be cached (or sent). If you set consoleLevel and consoleLogger\n *  appropriately, a warning will be shown when this happens:\n *      > panel.metric( 'something weird with window', { window : window })\n *      !'Metrics logger could not stringify logArguments: ...'\n */\nfunction MetricsLogger(options) {\n    options = options || {};\n    var self = this;\n\n    ///** get the current user's id from bootstrapped data or options */\n    self.userId = window.bootstrapped && window.bootstrapped.user ? window.bootstrapped.user.id : null;\n    self.userId = self.userId || options.userId || null;\n\n    /** the (optional) console to emit logs to */\n    self.consoleLogger = options.consoleLogger || null;\n\n    self._init(options);\n    return self;\n}\n\n//----------------------------------------------------------------------------- defaults and constants\n// see: python std lib, logging\nMetricsLogger.ALL = 0;\nMetricsLogger.LOG = 0;\nMetricsLogger.DEBUG = 10;\nMetricsLogger.INFO = 20;\nMetricsLogger.WARN = 30;\nMetricsLogger.ERROR = 40;\n// metrics levels here?\n//MetricsLogger.MinorEvent  = 45;\n//MetricsLogger.MajorEvent  = 50;\nMetricsLogger.METRIC = 50;\nMetricsLogger.NONE = 100;\n\n/** default options - override these through the constructor */\nMetricsLogger.defaultOptions = {\n    /** if an incoming message has a level >= this, it will be cached - can also be a string (e.g. 'debug') */\n    logLevel: MetricsLogger.NONE,\n    /** if an incoming message has a level >= this, it will be output to the console */\n    consoleLevel: MetricsLogger.NONE,\n    /** the default 'namespace' or label associated with an incoming message (if none is passed) */\n    defaultNamespace: \"Galaxy\",\n    /** the namespaces output to the console (all namespaces will be output if this is falsy)\n     *  note: applies only to the console (not the event/metrics log/cache)\n     */\n    consoleNamespaceWhitelist: null,\n    /** Force all messages into simple strings. */\n    consoleFlattenMessages: false,\n    /** the prefix attached to client-side logs to distinguish them in the metrics db */\n    clientPrefix: \"client.\",\n\n    /** the maximum number of messages the cache should hold; if exceeded older messages are removed first */\n    maxCacheSize: 3000,\n    /** the number of messages accumulate before posting to the server; should be <= maxCacheSize */\n    postSize: 1000,\n    /** T/F whether to add a timestamp to incoming cached messages */\n    addTime: true,\n    /** string to prefix to userid for cache web storage */\n    cacheKeyPrefix: \"logs-\",\n\n    /** the relative url to post messages to */\n    postUrl: \"/api/metrics\",\n    /** delay before trying post again after two failures */\n    delayPostInMs: 1000 * 60 * 10,\n\n    /** an (optional) function that should return an object; used to send additional data with the metrics */\n    getPingData: undefined,\n    /** an (optional) function that will handle the servers response after successfully posting messages */\n    onServerResponse: undefined\n};\n\n//----------------------------------------------------------------------------- set up\n/** initialize the logger with options, set up instance vars and cache, and add onpageunload to window */\nMetricsLogger.prototype._init = function _init(options) {\n    var self = this;\n    self.options = {};\n    for (var k in MetricsLogger.defaultOptions) {\n        if (MetricsLogger.defaultOptions.hasOwnProperty(k)) {\n            self.options[k] = options.hasOwnProperty(k) ? options[k] : MetricsLogger.defaultOptions[k];\n        }\n    }\n    self.options.logLevel = self._parseLevel(self.options.logLevel);\n    self.options.consoleLevel = self._parseLevel(self.options.consoleLevel);\n    //self._emitToConsole( 'debug', 'MetricsLogger', 'MetricsLogger.options:', self.options );\n\n    /** is the logger currently sending? */\n    self._sending = false;\n    /** the setTimeout id if the logger POST has failed more than once */\n    self._waiting = null;\n    /** the current number of entries to send in a POST */\n    self._postSize = self.options.postSize;\n\n    self._initCache();\n\n    return self;\n};\n\n/** initialize the cache */\nMetricsLogger.prototype._initCache = function _initCache() {\n    try {\n        this.cache = new LoggingCache({\n            maxSize: this.options.maxCacheSize,\n            key: this.options.cacheKeyPrefix + this.userId\n        });\n    } catch (err) {\n        this._emitToConsole(\"warn\", \"MetricsLogger\", [\"Could not intitialize logging cache:\", err]);\n        this.options.logLevel = MetricsLogger.NONE;\n    }\n};\n\n/** return the numeric log level if level in 'none, debug, log, info, warn, error' */\nMetricsLogger.prototype._parseLevel = function _parseLevel(level) {\n    var type = typeof level;\n    if (type === \"number\") {\n        return level;\n    }\n    if (type === \"string\") {\n        var upper = level.toUpperCase();\n        if (MetricsLogger.hasOwnProperty(upper)) {\n            return MetricsLogger[upper];\n        }\n    }\n    throw new Error(`Unknown log level: ${level}`);\n};\n\n//----------------------------------------------------------------------------- main entry point\n/** record a log/message's arguments to the cache and/or the console based on level and namespace */\nMetricsLogger.prototype.emit = function emit(level, namespace, logArguments) {\n    //this._emitToConsole( 'debug', 'MetricsLogger', [ 'emit:', level, namespace, logArguments ]);\n    var self = this;\n    namespace = namespace || self.options.defaultNamespace;\n    if (!level || !logArguments) {\n        return self;\n    }\n    // add to cache if proper level\n    //TODO: respect do not track?\n    //if( !navigator.doNotTrack && level >= self.options.logLevel ){\n    level = self._parseLevel(level);\n    if (level >= self.options.logLevel) {\n        self._addToCache(level, namespace, logArguments);\n    }\n    // also emit to consoleLogger if proper level for that\n    if (self.consoleLogger && level >= self.options.consoleLevel) {\n        self._emitToConsole(level, namespace, logArguments);\n    }\n    return self;\n};\n\n//----------------------------------------------------------------------------- cache\n/** add a message to the cache and if messages.length is high enough post them to the server */\nMetricsLogger.prototype._addToCache = function _addToCache(level, namespace, logArguments) {\n    this._emitToConsole(\"debug\", \"MetricsLogger\", [\n        \"_addToCache:\",\n        arguments,\n        this.options.addTime,\n        this.cache.length()\n    ]);\n    //this._emitToConsole( 'debug', 'MetricsLogger', [ '\\t logArguments:', logArguments ]);\n    var self = this;\n    // try add to the cache and if we've got _postSize number of entries, attempt to post them to the server\n    try {\n        var newLength = self.cache.add(self._buildEntry(level, namespace, logArguments));\n        if (newLength >= self._postSize) {\n            self._postCache();\n        }\n        // discard entry if an error occurs, but warn if level set to do so\n    } catch (err) {\n        self._emitToConsole(\"warn\", \"MetricsLogger\", [\n            \"Metrics logger could not stringify logArguments:\",\n            namespace,\n            logArguments\n        ]);\n        self._emitToConsole(\"error\", \"MetricsLogger\", [err]);\n    }\n    return self;\n};\n\n/** build a log cache entry object from the given level, namespace, and arguments (optionally adding timestamp */\nMetricsLogger.prototype._buildEntry = function _buildEntry(level, namespace, logArguments) {\n    this._emitToConsole(\"debug\", \"MetricsLogger\", [\"_buildEntry:\", arguments]);\n    var entry = {\n        level: level,\n        namespace: this.options.clientPrefix + namespace,\n        args: logArguments\n    };\n    if (this.options.addTime) {\n        entry.time = new Date().toISOString();\n    }\n    return entry;\n};\n\n/** post _postSize messages from the cache to the server, removing them if successful\n *      if the post fails, wait until maxCacheSize is accumulated instead and try again then\n *      in addition to the messages from the cache ('metrics'), any info from getPingData (if set) will be sent\n *      onServerResponse will be called (if set) with any response from the server\n */\nMetricsLogger.prototype._postCache = function _postCache(options) {\n    options = options || {};\n    this._emitToConsole(\"info\", \"MetricsLogger\", [\"_postCache\", options, this._postSize]);\n\n    // short circuit if we're already sending\n    if (!this.options.postUrl || this._sending) {\n        return jQuery.when({});\n    }\n\n    var self = this;\n    var postSize = options.count || self._postSize;\n\n    var // do not splice - remove after *successful* post\n    entries = self.cache.get(postSize);\n\n    var entriesLength = entries.length;\n\n    var // use the optional getPingData to add any extra info we may want to send\n    postData = typeof self.options.getPingData === \"function\" ? self.options.getPingData() : {};\n\n    //console.debug( postSize, entriesLength );\n\n    // add the metrics and send\n    postData.metrics = JSON.stringify(entries);\n    //console.debug( postData.metrics );\n    self._sending = true;\n    return jQuery\n        .post(self.options.postUrl, postData)\n        .always(() => {\n            self._sending = false;\n        })\n        .fail((xhr, status, message) => {\n            // if we failed the previous time, set the next post target to the max num of entries\n            self._postSize = self.options.maxCacheSize;\n            //TODO:??\n            // log this failure to explain any gap in metrics\n            self.emit(\"error\", \"MetricsLogger\", [\n                \"_postCache error:\",\n                xhr.readyState,\n                xhr.status,\n                xhr.responseJSON || xhr.responseText\n            ]);\n            //TODO: still doesn't solve the problem that when cache == max, post will be tried on every emit\n            //TODO: see _delayPost\n        })\n        .done(response => {\n            if (typeof self.options.onServerResponse === \"function\") {\n                self.options.onServerResponse(response);\n            }\n            // only remove if post successful\n            self.cache.remove(entriesLength);\n            //console.debug( 'removed entries:', entriesLength, 'size now:', self.cache.length() );\n            // if we succeeded, reset the post target to the normal num of entries\n            self._postSize = self.options.postSize;\n        });\n    // return the xhr promise\n};\n\n/** set _waiting to true and, after delayPostInMs, set it back to false */\nMetricsLogger.prototype._delayPost = function _delayPost() {\n    //TODO: this won't work between pages\n    var self = this;\n    self._waiting = setTimeout(() => {\n        self._waiting = null;\n    }, self.options.delayPostInMs);\n};\n\nfunction usefulToString(arg) {\n    var asStr = String(arg);\n    if (asStr == \"[object Object]\") {\n        asStr = JSON.stringify(arg);\n    }\n    return asStr;\n}\n\n//----------------------------------------------------------------------------- console\n/** output message to console based on level and consoleLogger type */\nMetricsLogger.prototype._emitToConsole = function _emitToConsole(level, namespace, logArguments) {\n    //console.debug( '_emitToConsole:', level, namespace, logArguments );\n    var self = this;\n\n    var whitelist = self.options.consoleNamespaceWhitelist;\n    if (!self.consoleLogger) {\n        return self;\n    }\n    // if a whitelist for namespaces is set, bail if this namespace is not in the list\n    if (whitelist && whitelist.indexOf(namespace) === -1) {\n        return self;\n    }\n\n    var args = Array.prototype.slice.call(logArguments, 0);\n    args.unshift(namespace);\n    if (self.options.consoleFlattenMessages) {\n        args = [args.map(usefulToString).join(\" \")];\n    }\n    //TODO: script location and/or source maps?\n    //TODO: branch on navigator.userAgent == AIIEEE - it only has log\n    if (level >= MetricsLogger.METRIC && typeof self.consoleLogger.info === \"function\") {\n        return self.consoleLogger.info.apply(self.consoleLogger, args);\n    } else if (level >= MetricsLogger.ERROR && typeof self.consoleLogger.error === \"function\") {\n        return self.consoleLogger.error.apply(self.consoleLogger, args);\n    } else if (level >= MetricsLogger.WARN && typeof self.consoleLogger.warn === \"function\") {\n        self.consoleLogger.warn.apply(self.consoleLogger, args);\n    } else if (level >= MetricsLogger.INFO && typeof self.consoleLogger.info === \"function\") {\n        self.consoleLogger.info.apply(self.consoleLogger, args);\n    } else if (level >= MetricsLogger.DEBUG && typeof self.consoleLogger.debug === \"function\") {\n        self.consoleLogger.debug.apply(self.consoleLogger, args);\n    } else if (typeof self.consoleLogger.log === \"function\") {\n        self.consoleLogger.log.apply(self.consoleLogger, args);\n    }\n    return self;\n};\n\n//----------------------------------------------------------------------------- shortcuts\n// generic functions when logging from non-namespaced object (e.g. templates)\n/** log to default namespace */\nMetricsLogger.prototype.log = function log() {\n    this.emit(1, this.options.defaultNamespace, Array.prototype.slice.call(arguments, 0));\n};\n\n/** debug to default namespace */\nMetricsLogger.prototype.debug = function debug() {\n    this.emit(MetricsLogger.DEBUG, this.options.defaultNamespace, Array.prototype.slice.call(arguments, 0));\n};\n\n/** info to default namespace */\nMetricsLogger.prototype.info = function info() {\n    this.emit(MetricsLogger.INFO, this.options.defaultNamespace, Array.prototype.slice.call(arguments, 0));\n};\n\n/** warn to default namespace */\nMetricsLogger.prototype.warn = function warn() {\n    this.emit(MetricsLogger.WARN, this.options.defaultNamespace, Array.prototype.slice.call(arguments, 0));\n};\n\n/** error to default namespace */\nMetricsLogger.prototype.error = function error() {\n    this.emit(MetricsLogger.ERROR, this.options.defaultNamespace, Array.prototype.slice.call(arguments, 0));\n};\n\n/** metric to default namespace */\nMetricsLogger.prototype.metric = function metric() {\n    this.emit(MetricsLogger.METRIC, this.options.defaultNamespace, Array.prototype.slice.call(arguments, 0));\n};\n\n/* ============================================================================\nTODO:\n    need a performance pass - the JSON un/parsing is a bit much\n\n============================================================================ */\n/** @class LoggingCache\n *  Simple implementation of cache wrapping an array.\n *\n *  Formats an entry before it's cached and only keeps options.maxSize number\n *  of entries. Older entries are deleted first.\n */\nfunction LoggingCache(options) {\n    var self = this;\n    return self._init(options || {});\n}\n\n/** default options */\nLoggingCache.defaultOptions = {\n    /** maximum number of entries to keep before discarding oldest */\n    maxSize: 5000\n};\n\n/** initialize with options */\nLoggingCache.prototype._init = function _init(options) {\n    if (!this._hasStorage()) {\n        //TODO: fall back to jstorage\n        throw new Error(\"LoggingCache needs localStorage\");\n    }\n    if (!options.key) {\n        throw new Error(\"LoggingCache needs key for localStorage\");\n    }\n    this.key = options.key;\n    this._initStorage();\n\n    this.maxSize = options.maxSize || LoggingCache.defaultOptions.maxSize;\n    return this;\n};\n\n/** tests for localStorage fns */\nLoggingCache.prototype._hasStorage = function _hasStorage() {\n    //TODO: modernizr\n    var test = \"test\";\n    try {\n        localStorage.setItem(test, test);\n        localStorage.removeItem(test);\n        return true;\n    } catch (e) {\n        return false;\n    }\n};\n\n/** if no localStorage set for key, initialize to empty array */\nLoggingCache.prototype._initStorage = function _initStorage() {\n    if (localStorage.getItem(this.key) === null) {\n        return this.empty();\n    }\n    return this;\n};\n\n/** add an entry to the cache, removing the oldest beforehand if size >= maxSize */\nLoggingCache.prototype.add = function add(entry) {\n    var self = this;\n    var _cache = self._fetchAndParse();\n    var overage = _cache.length + 1 - self.maxSize;\n    if (overage > 0) {\n        _cache.splice(0, overage);\n    }\n    _cache.push(entry);\n    self._unparseAndStore(_cache);\n    return _cache.length;\n};\n\n/** get the entries from localStorage and parse them */\nLoggingCache.prototype._fetchAndParse = function _fetchAndParse() {\n    var self = this;\n    return JSON.parse(localStorage.getItem(self.key));\n};\n\n/** stringify the entries and put them in localStorage */\nLoggingCache.prototype._unparseAndStore = function _unparseAndStore(entries) {\n    var self = this;\n    return localStorage.setItem(self.key, JSON.stringify(entries));\n};\n\n///** process the entry before caching */\n//LoggingCache.prototype._preprocessEntry = function _preprocessEntry( entry ){\n//    return JSON.stringify( entry );\n//};\n\n/** return the length --- oh, getters where are you? */\nLoggingCache.prototype.length = function length() {\n    return this._fetchAndParse().length;\n};\n\n/** get count number of entries starting with the oldest */\nLoggingCache.prototype.get = function get(count) {\n    return this._fetchAndParse().slice(0, count);\n};\n\n/** remove count number of entries starting with the oldest */\nLoggingCache.prototype.remove = function remove(count) {\n    var _cache = this._fetchAndParse();\n    var removed = _cache.splice(0, count);\n    this._unparseAndStore(_cache);\n    return removed;\n};\n\n/** empty/clear the entire cache */\nLoggingCache.prototype.empty = function empty() {\n    localStorage.setItem(this.key, \"[]\");\n    return this;\n};\n\n/** stringify count number of entries (but do not remove) */\nLoggingCache.prototype.stringify = function stringify(count) {\n    return JSON.stringify(this.get(count));\n};\n\n/** outputs entire cache to console */\nLoggingCache.prototype.print = function print() {\n    // popup? (really, carl? a popup?) - easier to copy/paste\n    console.log(JSON.stringify(this._fetchAndParse(), null, \"  \"));\n};\n\n//=============================================================================\nexport default {\n    MetricsLogger: MetricsLogger,\n    LoggingCache: LoggingCache\n};\n"]}