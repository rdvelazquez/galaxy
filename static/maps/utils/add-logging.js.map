{"version":3,"sources":["utils/add-logging.js"],"names":["LOGGING_FNS","addLogging","obj","namespace","addTo","prototype","undefined","_logNamespace","forEach","logFn","logger","emit","arguments","apply"],"mappings":";;;;;;AAAA;AACA,QAAIA,cAAc,CAAC,KAAD,EAAQ,OAAR,EAAiB,MAAjB,EAAyB,MAAzB,EAAiC,OAAjC,EAA0C,QAA1C,CAAlB;AACA;;;;AAIA,aAASC,UAAT,CAAoBC,GAApB,EAAyBC,SAAzB,EAAoC;AAChC,YAAIC,QAAQF,IAAIG,SAAJ,KAAkBC,SAAlB,GAA8BJ,IAAIG,SAAlC,GAA8CH,GAA1D;AACA,YAAIC,cAAcG,SAAlB,EAA6B;AACzBF,kBAAMG,aAAN,GAAsBJ,SAAtB;AACH;AACD;AACA;AACA;AACA;;AAEA;AACAH,oBAAYQ,OAAZ,CAAoB,iBAAS;AACzBJ,kBAAMK,KAAN,IAAe,YAAW;AACtB,oBAAI,CAAC,KAAKC,MAAV,EAAkB;AACd,2BAAOJ,SAAP;AACH;AACD,oBAAI,KAAKI,MAAL,CAAYC,IAAhB,EAAsB;AAClB,2BAAO,KAAKD,MAAL,CAAYC,IAAZ,CAAiBF,KAAjB,EAAwB,KAAKF,aAA7B,EAA4CK,SAA5C,CAAP;AACH;AACD,oBAAI,KAAKF,MAAL,CAAYD,KAAZ,CAAJ,EAAwB;AACpB;AACA;AACA;AACA,2BAAO,KAAKC,MAAL,CAAYD,KAAZ,EAAmBI,KAAnB,CAAyB,KAAKH,MAA9B,EAAsCE,SAAtC,CAAP;AACH;AACD,uBAAON,SAAP;AACH,aAdD;AAeH,SAhBD;AAiBA,eAAOJ,GAAP;AACH;;AAED;sBACeD,U","file":"../../scripts/utils/add-logging.js","sourcesContent":["//==============================================================================\nvar LOGGING_FNS = [\"log\", \"debug\", \"info\", \"warn\", \"error\", \"metric\"];\n/** adds logging functions to an obj.prototype (or obj directly) adding a namespace for filtering\n *  @param {Object} obj\n *  @param {String} namespace\n */\nfunction addLogging(obj, namespace) {\n    var addTo = obj.prototype !== undefined ? obj.prototype : obj;\n    if (namespace !== undefined) {\n        addTo._logNamespace = namespace;\n    }\n    //yagni?: without this, may not capture Galaxy.config.debug and add Galaxy.logger properly\n    // if( window.Galaxy && window.Galaxy.config && window.Galaxy.config.debug ){\n    //     addTo.logger = window.Galaxy.logger;\n    // }\n\n    // give the object each\n    LOGGING_FNS.forEach(logFn => {\n        addTo[logFn] = function() {\n            if (!this.logger) {\n                return undefined;\n            }\n            if (this.logger.emit) {\n                return this.logger.emit(logFn, this._logNamespace, arguments);\n            }\n            if (this.logger[logFn]) {\n                //TODO:! there has to be a way to get the lineno/file into this\n                // http://stackoverflow.com/questions/13815640/a-proper-wrapper-for-console-log-with-correct-line-number\n                // http://www.paulirish.com/2009/log-a-lightweight-wrapper-for-consolelog/\n                return this.logger[logFn].apply(this.logger, arguments);\n            }\n            return undefined;\n        };\n    });\n    return obj;\n}\n\n//==============================================================================\nexport default addLogging;\n"]}