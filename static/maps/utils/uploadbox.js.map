{"version":3,"sources":["utils/uploadbox.js"],"names":["jQuery","event","props","push","$","uploadpost","cnf","extend","data","success","error","progress","url","maxfilesize","error_filesize","error_default","error_server","error_login","config","error_message","form","FormData","key","payload","append","sizes","files","d","name","file","size","xhr","XMLHttpRequest","open","setRequestHeader","onreadystatechange","readyState","DONE","response","extra_info","responseText","parseJSON","err_msg","e","status","text","statusText","upload","addEventListener","lengthComputable","Math","round","loaded","total","Galaxy","emit","debug","send","fn","uploadinput","options","el","opts","ondragover","ondragleave","onchange","multiple","$input","change","target","val","on","dataTransfer","preventDefault","stopPropagation","dialog","trigger","uploadbox","dragover","dragleave","announce","initialize","m","alert","complete","queue","queue_index","queue_length","queue_running","queue_stop","add","length","index","undefined","_","each","mode","filter","f","duplicate","String","remove","process","message","percentage","select","reset","start","stop","configure","compatible","window","File","FileList"],"mappings":"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","file":"../../scripts/utils/uploadbox.js","sourcesContent":["/*\n    galaxy upload plugins - requires FormData and XMLHttpRequest\n*/\n($ => {\n    // add event properties\n    jQuery.event.props.push(\"dataTransfer\");\n\n    /**\n        Posts file data to the API\n    */\n    $.uploadpost = config => {\n        // parse options\n        var cnf = $.extend(\n            {},\n            {\n                data: {},\n                success: function() {},\n                error: function() {},\n                progress: function() {},\n                url: null,\n                maxfilesize: 2048,\n                error_filesize: \"File exceeds 2GB. Please use a FTP client.\",\n                error_default: \"Please make sure the file is available.\",\n                error_server: \"Upload request failed.\",\n                error_login: \"Uploads require you to log in.\"\n            },\n            config\n        );\n\n        // link data\n        var data = cnf.data;\n\n        // check errors\n        if (data.error_message) {\n            cnf.error(data.error_message);\n            return;\n        }\n\n        // construct form data\n        var form = new FormData();\n        for (var key in data.payload) {\n            form.append(key, data.payload[key]);\n        }\n\n        // add files to submission\n        var sizes = 0;\n        for (var key in data.files) {\n            var d = data.files[key];\n            form.append(d.name, d.file, d.file.name);\n            sizes += d.file.size;\n        }\n\n        // check file size, unless it's an ftp file\n        if (sizes > 1048576 * cnf.maxfilesize) {\n            cnf.error(cnf.error_filesize);\n            return;\n        }\n\n        // prepare request\n        var xhr = new XMLHttpRequest();\n        xhr.open(\"POST\", cnf.url, true);\n        xhr.setRequestHeader(\"Accept\", \"application/json\");\n        xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n        xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n\n        // captures state changes\n        xhr.onreadystatechange = () => {\n            // check for request completed, server connection closed\n            if (xhr.readyState == xhr.DONE) {\n                // parse response\n                var response = null;\n                var extra_info = \"\";\n                if (xhr.responseText) {\n                    try {\n                        response = jQuery.parseJSON(xhr.responseText);\n                        extra_info = response.err_msg;\n                    } catch (e) {\n                        response = xhr.responseText;\n                        extra_info = response;\n                    }\n                }\n                // pass any error to the error option\n                if (xhr.status < 200 || xhr.status > 299) {\n                    var text = xhr.statusText;\n                    if (xhr.status == 403) {\n                        text = cnf.error_login;\n                    } else if (xhr.status == 0) {\n                        text = cnf.error_server;\n                    } else if (!text) {\n                        text = cnf.error_default;\n                    }\n                    cnf.error(`${text} (${xhr.status}). ${extra_info}`);\n                } else {\n                    cnf.success(response);\n                }\n            }\n        };\n\n        // prepare upload progress\n        xhr.upload.addEventListener(\n            \"progress\",\n            e => {\n                if (e.lengthComputable) {\n                    cnf.progress(Math.round(e.loaded * 100 / e.total));\n                }\n            },\n            false\n        );\n\n        // send request\n        Galaxy.emit.debug(\"uploadbox::uploadpost()\", \"Posting following data.\", cnf);\n        xhr.send(form);\n    };\n\n    /**\n        Handles the upload events drag/drop etc.\n    */\n    $.fn.uploadinput = function(options) {\n        // initialize\n        var el = this;\n        var opts = $.extend(\n            {},\n            {\n                ondragover: function() {},\n                ondragleave: function() {},\n                onchange: function() {},\n                multiple: false\n            },\n            options\n        );\n\n        // append hidden upload field\n        var $input = $(`<input type=\"file\" style=\"display: none\" ${(opts.multiple && \"multiple\") || \"\"}/>`);\n        el.append(\n            $input.change(function(e) {\n                opts.onchange(e.target.files);\n                $(this).val(\"\");\n            })\n        );\n\n        // drag/drop events\n        el.on(\"drop\", e => {\n            opts.ondragleave(e);\n            if (e.dataTransfer) {\n                opts.onchange(e.dataTransfer.files);\n                e.preventDefault();\n            }\n        });\n        el.on(\"dragover\", e => {\n            e.preventDefault();\n            opts.ondragover(e);\n        });\n        el.on(\"dragleave\", e => {\n            e.stopPropagation();\n            opts.ondragleave(e);\n        });\n\n        // exports\n        return {\n            dialog: function() {\n                $input.trigger(\"click\");\n            }\n        };\n    };\n\n    /**\n        Handles the upload queue and events such as drag/drop etc.\n    */\n    $.fn.uploadbox = function(options) {\n        // parse options\n        var opts = $.extend(\n            {},\n            {\n                dragover: function() {},\n                dragleave: function() {},\n                announce: function(d) {},\n                initialize: function(d) {},\n                progress: function(d, m) {},\n                success: function(d, m) {},\n                error: function(d, m) {\n                    alert(m);\n                },\n                complete: function() {}\n            },\n            options\n        );\n\n        // file queue\n        var queue = {};\n\n        // queue index/length counter\n        var queue_index = 0;\n        var queue_length = 0;\n\n        // indicates if queue is currently running\n        var queue_running = false;\n        var queue_stop = false;\n\n        // element\n        var uploadinput = $(this).uploadinput({\n            multiple: true,\n            onchange: function(files) {\n                add(files);\n            },\n            ondragover: options.ondragover,\n            ondragleave: options.ondragleave\n        });\n\n        // add new files to upload queue\n        function add(files) {\n            if (files && files.length && !queue_running) {\n                var index = undefined;\n                _.each(files, (file, key) => {\n                    if (\n                        file.mode !== \"new\" &&\n                        _.filter(queue, f => f.name === file.name && f.size === file.size).length\n                    ) {\n                        file.duplicate = true;\n                    }\n                });\n                _.each(files, file => {\n                    if (!file.duplicate) {\n                        index = String(queue_index++);\n                        queue[index] = file;\n                        opts.announce(index, queue[index]);\n                        queue_length++;\n                    }\n                });\n                return index;\n            }\n        }\n\n        // remove file from queue\n        function remove(index) {\n            if (queue[index]) {\n                delete queue[index];\n                queue_length--;\n            }\n        }\n\n        // process an upload, recursive\n        function process() {\n            // validate\n            if (queue_length == 0 || queue_stop) {\n                queue_stop = false;\n                queue_running = false;\n                opts.complete();\n                return;\n            } else {\n                queue_running = true;\n            }\n\n            // get an identifier from the queue\n            var index = -1;\n            for (var key in queue) {\n                index = key;\n                break;\n            }\n\n            // get current file from queue\n            var file = queue[index];\n\n            // remove from queue\n            remove(index);\n\n            // create and submit data\n            $.uploadpost({\n                url: opts.url,\n                data: opts.initialize(index),\n                success: function(message) {\n                    opts.success(index, message);\n                    process();\n                },\n                error: function(message) {\n                    opts.error(index, message);\n                    process();\n                },\n                progress: function(percentage) {\n                    opts.progress(index, percentage);\n                }\n            });\n        }\n\n        /*\n            public interface\n        */\n\n        // open file browser for selection\n        function select() {\n            uploadinput.dialog();\n        }\n\n        // remove all entries from queue\n        function reset(index) {\n            for (index in queue) {\n                remove(index);\n            }\n        }\n\n        // initiate upload process\n        function start() {\n            if (!queue_running) {\n                queue_running = true;\n                process();\n            }\n        }\n\n        // stop upload process\n        function stop() {\n            queue_stop = true;\n        }\n\n        // set options\n        function configure(options) {\n            opts = $.extend({}, opts, options);\n            return opts;\n        }\n\n        // verify browser compatibility\n        function compatible() {\n            return window.File && window.FormData && window.XMLHttpRequest && window.FileList;\n        }\n\n        // export functions\n        return {\n            select: select,\n            add: add,\n            remove: remove,\n            start: start,\n            stop: stop,\n            reset: reset,\n            configure: configure,\n            compatible: compatible\n        };\n    };\n})(jQuery);\n"]}