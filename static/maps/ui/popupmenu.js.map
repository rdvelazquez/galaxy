{"version":3,"sources":["ui/popupmenu.js"],"names":["$","make_popupmenu","button_element","initial_options","element_menu_exists","data","bind","remove","setTimeout","menu_element","attr","options","_","size","appendTo","each","k","v","action","append","url","html","click","addClass","wrapper","x","e","pageX","width","Math","min","document","scrollLeft","window","max","css","top","pageY","left","close_popup","el","unbind","frame_id","frames","length","frame","make_popup_menus","parent","find","menu","link","link_dom","get","confirmtext","getAttribute","href","target","text","event","confirm","open","preventDefault","box","stopPropagation"],"mappings":"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","file":"../../scripts/ui/popupmenu.js","sourcesContent":["import jQuery from \"jquery\";\n(\"use_strict\");\n\nvar $ = jQuery;\n\n// ============================================================================\n// TODO: unify popup menus and/or eliminate this\n/**\n * Sets up popupmenu rendering and binds options functions to the appropriate links.\n * initial_options is a dict with text describing the option pointing to either (a) a\n * function to perform; or (b) another dict with two required keys, 'url' and 'action' (the\n * function to perform. (b) is useful for exposing the underlying URL of the option.\n */\nfunction make_popupmenu(button_element, initial_options) {\n    /*  Use the $.data feature to store options with the link element.\n        This allows options to be changed at a later time\n    */\n    var element_menu_exists = button_element.data(\"menu_options\");\n    button_element.data(\"menu_options\", initial_options);\n\n    // If element already has menu, nothing else to do since HTML and actions are already set.\n    if (element_menu_exists) {\n        return;\n    }\n\n    button_element.bind(\"click.show_popup\", e => {\n        // Close existing visible menus\n        $(\".popmenu-wrapper\").remove();\n\n        // Need setTimeouts so clicks don't interfere with each other\n        setTimeout(() => {\n            // Dynamically generate the wrapper holding all the selectable options of the menu.\n            var menu_element = $(`<ul class='dropdown-menu' id='${button_element.attr(\"id\")}-menu'></ul>`);\n            var options = button_element.data(\"menu_options\");\n            if (_.size(options) <= 0) {\n                $(\"<li>No Options.</li>\").appendTo(menu_element);\n            }\n            $.each(options, (k, v) => {\n                if (v) {\n                    // Action can be either an anonymous function and a mapped dict.\n                    var action = v.action || v;\n                    menu_element.append(\n                        $(\"<li></li>\").append(\n                            $(\"<a>\")\n                                .attr(\"href\", v.url)\n                                .html(k)\n                                .click(action)\n                        )\n                    );\n                } else {\n                    menu_element.append(\n                        $(\"<li></li>\")\n                            .addClass(\"head\")\n                            .append($(\"<a href='#'></a>\").html(k))\n                    );\n                }\n            });\n            var wrapper = $(\"<div class='popmenu-wrapper' style='position: absolute;left: 0; top: -1000;'></div>\")\n                .append(menu_element)\n                .appendTo(\"body\");\n\n            var x = e.pageX - wrapper.width() / 2;\n            x = Math.min(x, $(document).scrollLeft() + $(window).width() - $(wrapper).width() - 5);\n            x = Math.max(x, $(document).scrollLeft() + 5);\n\n            wrapper.css({\n                top: e.pageY,\n                left: x\n            });\n        }, 10);\n\n        setTimeout(() => {\n            // Bind click event to current window and all frames to remove any visible menus\n            // Bind to document object instead of window object for IE compat\n            var close_popup = el => {\n                $(el).bind(\"click.close_popup\", () => {\n                    $(\".popmenu-wrapper\").remove();\n                    el.unbind(\"click.close_popup\");\n                });\n            };\n            close_popup($(window.document)); // Current frame\n            close_popup($(window.top.document)); // Parent frame\n            for (var frame_id = window.top.frames.length; frame_id--; ) {\n                // Sibling frames\n                var frame = $(window.top.frames[frame_id].document);\n                close_popup(frame);\n            }\n        }, 50);\n\n        return false;\n    });\n}\n\n/**\n *  Convert two seperate (often adjacent) divs into galaxy popupmenu\n *  - div 1 contains a number of anchors which become the menu options\n *  - div 1 should have a 'popupmenu' attribute\n *  - this popupmenu attribute contains the id of div 2\n *  - div 2 becomes the 'face' of the popupmenu\n *\n *  NOTE: make_popup_menus finds and operates on all divs with a popupmenu attr (no need to point it at something)\n *          but (since that selector searches the dom on the page), you can send a parent in\n *  NOTE: make_popup_menus, and make_popupmenu are horrible names\n */\nfunction make_popup_menus(parent) {\n    // find all popupmenu menu divs (divs that contains anchors to be converted to menu options)\n    //  either in the parent or the document if no parent passed\n    parent = parent || document;\n    $(parent)\n        .find(\"div[popupmenu]\")\n        .each(function() {\n            var options = {};\n            var menu = $(this);\n\n            // find each anchor in the menu, convert them into an options map: { a.text : click_function }\n            menu.find(\"a\").each(function() {\n                var link = $(this);\n                var link_dom = link.get(0);\n                var confirmtext = link_dom.getAttribute(\"confirm\");\n                var href = link_dom.getAttribute(\"href\");\n                var target = link_dom.getAttribute(\"target\");\n\n                // no href - no function (gen. a label)\n                if (!href) {\n                    options[link.text()] = null;\n                } else {\n                    options[link.text()] = {\n                        url: href,\n                        action: function(event) {\n                            // if theres confirm text, send the dialog\n                            if (!confirmtext || confirm(confirmtext)) {\n                                // link.click() doesn't use target for some reason,\n                                // so manually do it here.\n                                if (target) {\n                                    window.open(href, target);\n                                    return false;\n                                } else {\n                                    // For all other links, do the default action.\n                                    link.click();\n                                }\n                            } else {\n                                event.preventDefault();\n                            }\n                        }\n                    };\n                }\n            });\n            // locate the element with the id corresponding to the menu's popupmenu attr\n            var box = $(parent).find(`#${menu.attr(\"popupmenu\")}`);\n\n            // For menus with clickable link text, make clicking on the link go through instead\n            // of activating the popup menu\n            box.find(\"a\").bind(\"click\", e => {\n                e.stopPropagation(); // Stop bubbling so clicking on the link goes through\n                return true;\n            });\n\n            // attach the click events and menu box building to the box element\n            make_popupmenu(box, options);\n            box.addClass(\"popup\");\n            menu.remove();\n        });\n}\n\n// ============================================================================\nexport default {\n    make_popupmenu: make_popupmenu,\n    make_popup_menus: make_popup_menus\n};\n"]}