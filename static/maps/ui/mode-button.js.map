{"version":3,"sources":["ui/mode-button.js"],"names":["$","ModeButton","element","options","currModeIndex","_init","prototype","DATA_KEY","defaults","switchModesOnClick","$element","extend","modes","Error","modeButton","click","_ModeButtonClick","event","callModeFn","_incModeIndex","html","reset","length","_getModeIndex","modeKey","i","mode","_setModeByIndex","index","newMode","currentMode","current","getMode","hasMode","err","setMode","initialMode","modeFn","onclick","type","call","get","undefined","fn","$modeButton","map","$this","data","$first","button","fnName","apply","makeArray","arguments","slice"],"mappings":";;;;;;;;;;;AACC,gBAAD;;AAEA,QAAIA,oBAAJ;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuCA;AACA,aAASC,UAAT,CAAoBC,OAApB,EAA6BC,OAA7B,EAAsC;AAClC,aAAKC,aAAL,GAAqB,CAArB;AACA,eAAO,KAAKC,KAAL,CAAWH,OAAX,EAAoBC,OAApB,CAAP;AACH;;AAED;AACAF,eAAWK,SAAX,CAAqBC,QAArB,GAAgC,aAAhC;AACA;AACAN,eAAWK,SAAX,CAAqBE,QAArB,GAAgC;AAC5BC,4BAAoB;AADQ,KAAhC;;AAIA;AACA;AACAR,eAAWK,SAAX,CAAqBD,KAArB,GAA6B,SAASA,KAAT,CAAeH,OAAf,EAAwBC,OAAxB,EAAiC;AAC1D;AACAA,kBAAUA,WAAW,EAArB;AACA,aAAKO,QAAL,GAAgBV,EAAEE,OAAF,CAAhB;AACA,aAAKC,OAAL,GAAeH,EAAEW,MAAF,CAAS,IAAT,EAAe,EAAf,EAAmB,KAAKH,QAAxB,EAAkCL,OAAlC,CAAf;AACA,YAAI,CAACA,QAAQS,KAAb,EAAoB;AAChB,kBAAM,IAAIC,KAAJ,CAAU,qCAAV,CAAN;AACH;;AAED,YAAIC,aAAa,IAAjB;AACA,aAAKJ,QAAL,CAAcK,KAAd,CAAoB,SAASC,gBAAT,CAA0BC,KAA1B,EAAiC;AACjD;AACAH,uBAAWI,UAAX;AACA;AACA,gBAAIJ,WAAWX,OAAX,CAAmBM,kBAAvB,EAA2C;AACvCK,2BAAWK,aAAX;AACH;AACD;AACAnB,cAAE,IAAF,EAAQoB,IAAR,CAAaN,WAAWX,OAAX,CAAmBS,KAAnB,CAAyBE,WAAWV,aAApC,EAAmDgB,IAAhE;AACH,SATD;AAUA,eAAO,KAAKC,KAAL,EAAP;AACH,KArBD;AAsBA;AACApB,eAAWK,SAAX,CAAqBa,aAArB,GAAqC,SAASA,aAAT,GAAyB;AAC1D,aAAKf,aAAL,IAAsB,CAAtB;AACA,YAAI,KAAKA,aAAL,IAAsB,KAAKD,OAAL,CAAaS,KAAb,CAAmBU,MAA7C,EAAqD;AACjD,iBAAKlB,aAAL,GAAqB,CAArB;AACH;AACD,eAAO,IAAP;AACH,KAND;AAOA;AACAH,eAAWK,SAAX,CAAqBiB,aAArB,GAAqC,SAASA,aAAT,CAAuBC,OAAvB,EAAgC;AACjE,aAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAI,KAAKtB,OAAL,CAAaS,KAAb,CAAmBU,MAAvC,EAA+CG,KAAK,CAApD,EAAuD;AACnD,gBAAI,KAAKtB,OAAL,CAAaS,KAAb,CAAmBa,CAAnB,EAAsBC,IAAtB,KAA+BF,OAAnC,EAA4C;AACxC,uBAAOC,CAAP;AACH;AACJ;AACD,cAAM,IAAIZ,KAAJ,sBAA6BW,OAA7B,CAAN;AACH,KAPD;AAQA;AACAvB,eAAWK,SAAX,CAAqBqB,eAArB,GAAuC,SAASA,eAAT,CAAyBC,KAAzB,EAAgC;AACnE,YAAIC,UAAU,KAAK1B,OAAL,CAAaS,KAAb,CAAmBgB,KAAnB,CAAd;AACA,YAAI,CAACC,OAAL,EAAc;AACV,kBAAM,IAAIhB,KAAJ,4BAAmCe,KAAnC,CAAN;AACH;AACD,aAAKxB,aAAL,GAAqBwB,KAArB;AACA,YAAIC,QAAQT,IAAZ,EAAkB;AACd,iBAAKV,QAAL,CAAcU,IAAd,CAAmBS,QAAQT,IAA3B;AACH;AACD,eAAO,IAAP;AACH,KAVD;;AAYA;AACA;AACAnB,eAAWK,SAAX,CAAqBwB,WAArB,GAAmC,SAASA,WAAT,GAAuB;AACtD,eAAO,KAAK3B,OAAL,CAAaS,KAAb,CAAmB,KAAKR,aAAxB,CAAP;AACH,KAFD;AAGA;AACAH,eAAWK,SAAX,CAAqByB,OAArB,GAA+B,SAASA,OAAT,GAAmB;AAC9C;AACA,eAAO,KAAKD,WAAL,GAAmBJ,IAA1B;AACH,KAHD;AAIA;AACAzB,eAAWK,SAAX,CAAqB0B,OAArB,GAA+B,SAASA,OAAT,CAAiBR,OAAjB,EAA0B;AACrD,YAAI,CAACA,OAAL,EAAc;AACV,mBAAO,KAAKM,WAAL,EAAP;AACH;AACD,eAAO,KAAK3B,OAAL,CAAaS,KAAb,CAAmB,KAAKW,aAAL,CAAmBC,OAAnB,CAAnB,CAAP;AACH,KALD;AAMA;AACAvB,eAAWK,SAAX,CAAqB2B,OAArB,GAA+B,SAASA,OAAT,CAAiBT,OAAjB,EAA0B;AACrD,YAAI;AACA,mBAAO,CAAC,CAAC,KAAKQ,OAAL,CAAaR,OAAb,CAAT;AACH,SAFD,CAEE,OAAOU,GAAP,EAAY,CAAE;AAChB,eAAO,KAAP;AACH,KALD;AAMA;AACAjC,eAAWK,SAAX,CAAqB6B,OAArB,GAA+B,SAASA,OAAT,CAAiBX,OAAjB,EAA0B;AACrD,eAAO,KAAKG,eAAL,CAAqB,KAAKJ,aAAL,CAAmBC,OAAnB,CAArB,CAAP;AACH,KAFD;AAGA;AACAvB,eAAWK,SAAX,CAAqBe,KAArB,GAA6B,SAASA,KAAT,GAAiB;AAC1C,aAAKjB,aAAL,GAAqB,CAArB;AACA,YAAI,KAAKD,OAAL,CAAaiC,WAAjB,EAA8B;AAC1B,iBAAKhC,aAAL,GAAqB,KAAKmB,aAAL,CAAmB,KAAKpB,OAAL,CAAaiC,WAAhC,CAArB;AACH;AACD,eAAO,KAAKT,eAAL,CAAqB,KAAKvB,aAA1B,CAAP;AACH,KAND;AAOA;AACAH,eAAWK,SAAX,CAAqBY,UAArB,GAAkC,SAASA,UAAT,CAAoBM,OAApB,EAA6B;AAC3D,YAAIa,SAAS,KAAKL,OAAL,CAAaR,OAAb,EAAsBc,OAAnC;AACA,YAAID,UAAUrC,EAAEuC,IAAF,CAAOF,WAAW,UAAlB,CAAd,EAA6C;AACzC;AACA,mBAAOA,OAAOG,IAAP,CAAY,KAAK9B,QAAL,CAAc+B,GAAd,CAAkB,CAAlB,CAAZ,CAAP;AACH;AACD,eAAOC,SAAP;AACH,KAPD;;AASA;AACA1C,MAAE2C,EAAF,CAAK7B,UAAL,GAAkB,SAAS8B,WAAT,CAAqBzC,OAArB,EAA8B;AAC5C,YAAI,CAAC,KAAKmB,MAAV,EAAkB;AACd,mBAAO,IAAP;AACH;;AAED;AACA,YAAItB,EAAEuC,IAAF,CAAOpC,OAAP,MAAoB,QAAxB,EAAkC;AAC9B,mBAAO,KAAK0C,GAAL,CAAS,YAAW;AACvB,oBAAIC,QAAQ9C,EAAE,IAAF,CAAZ;AACA8C,sBAAMC,IAAN,CAAW,aAAX,EAA0B,IAAI9C,UAAJ,CAAe6C,KAAf,EAAsB3C,OAAtB,CAA1B;AACA,uBAAO,IAAP;AACH,aAJM,CAAP;AAKH;;AAED,YAAI6C,SAAShD,EAAE,KAAK,CAAL,CAAF,CAAb;AACA,YAAIiD,SAASD,OAAOD,IAAP,CAAY,aAAZ,CAAb;;AAEA,YAAI,CAACE,MAAL,EAAa;AACT,kBAAM,IAAIpC,KAAJ,CAAU,iEAAV,CAAN;AACH;;AAED,YAAIoC,UAAUjD,EAAEuC,IAAF,CAAOpC,OAAP,MAAoB,QAAlC,EAA4C;AACxC,gBAAI+C,SAAS/C,OAAb;AACA,gBAAI8C,UAAUjD,EAAEuC,IAAF,CAAOU,OAAOC,MAAP,CAAP,MAA2B,UAAzC,EAAqD;AACjD,uBAAOD,OAAOC,MAAP,EAAeC,KAAf,CAAqBF,MAArB,EAA6BjD,EAAEoD,SAAF,CAAYC,SAAZ,EAAuBC,KAAvB,CAA6B,CAA7B,CAA7B,CAAP;AACH;AACJ;AACD,eAAOL,MAAP;AACH,KA5BD","file":"../../scripts/ui/mode-button.js","sourcesContent":["import jQuery from \"jquery\";\n(\"use_strict\");\n\nvar $ = jQuery;\n\n/** Multi 'mode' button (or any element really) that changes the html\n *      contents of itself when clicked. Pass in an ordered list of\n *      objects with 'html' and (optional) onclick functions.\n *\n *      When clicked in a particular node, the onclick function will\n *      be called (with the element as this) and the element will\n *      switch to the next mode, replacing its html content with\n *      that mode's html.\n *\n *      If there is no next mode, the element will switch back to\n *      the first mode.\n * @example:\n *     $( '.myElement' ).modeButton({\n *         modes : [\n *             {\n *                 mode: 'bler',\n *                 html: '<h5>Bler</h5>',\n *                 onclick : function(){\n *                     $( 'body' ).css( 'background-color', 'red' );\n *                 }\n *             },\n *             {\n *                 mode: 'bloo',\n *                 html: '<h4>Bloo</h4>',\n *                 onclick : function(){\n *                     $( 'body' ).css( 'background-color', 'blue' );\n *                 }\n *             },\n *             {\n *                 mode: 'blah',\n *                 html: '<h3>Blah</h3>',\n *                 onclick : function(){\n *                     $( 'body' ).css( 'background-color', 'grey' );\n *                 }\n *             },\n *         ]\n *     });\n *     $( '.myElement' ).modeButton( 'callModeFn', 'bler' );\n */\n/** constructor */\nfunction ModeButton(element, options) {\n    this.currModeIndex = 0;\n    return this._init(element, options);\n}\n\n/** html5 data key to store this object inside an element */\nModeButton.prototype.DATA_KEY = \"mode-button\";\n/** default options */\nModeButton.prototype.defaults = {\n    switchModesOnClick: true\n};\n\n// ---- private interface\n/** set up options, intial mode, and the click handler */\nModeButton.prototype._init = function _init(element, options) {\n    //console.debug( 'ModeButton._init:', element, options );\n    options = options || {};\n    this.$element = $(element);\n    this.options = $.extend(true, {}, this.defaults, options);\n    if (!options.modes) {\n        throw new Error('ModeButton requires a \"modes\" array');\n    }\n\n    var modeButton = this;\n    this.$element.click(function _ModeButtonClick(event) {\n        // call the curr mode fn\n        modeButton.callModeFn();\n        // inc the curr mode index\n        if (modeButton.options.switchModesOnClick) {\n            modeButton._incModeIndex();\n        }\n        // set the element html\n        $(this).html(modeButton.options.modes[modeButton.currModeIndex].html);\n    });\n    return this.reset();\n};\n/** increment the mode index to the next in the array, looping back to zero if at the last */\nModeButton.prototype._incModeIndex = function _incModeIndex() {\n    this.currModeIndex += 1;\n    if (this.currModeIndex >= this.options.modes.length) {\n        this.currModeIndex = 0;\n    }\n    return this;\n};\n/** get the mode index in the modes array for the given key (mode name) */\nModeButton.prototype._getModeIndex = function _getModeIndex(modeKey) {\n    for (var i = 0; i < this.options.modes.length; i += 1) {\n        if (this.options.modes[i].mode === modeKey) {\n            return i;\n        }\n    }\n    throw new Error(`mode not found: ${modeKey}`);\n};\n/** set the current mode to the one with the given index and set button html */\nModeButton.prototype._setModeByIndex = function _setModeByIndex(index) {\n    var newMode = this.options.modes[index];\n    if (!newMode) {\n        throw new Error(`mode index not found: ${index}`);\n    }\n    this.currModeIndex = index;\n    if (newMode.html) {\n        this.$element.html(newMode.html);\n    }\n    return this;\n};\n\n// ---- public interface\n/** get the current mode object (not just the mode name) */\nModeButton.prototype.currentMode = function currentMode() {\n    return this.options.modes[this.currModeIndex];\n};\n/** return the mode key of the current mode */\nModeButton.prototype.current = function current() {\n    // sugar for returning mode name\n    return this.currentMode().mode;\n};\n/** get the mode with the given modeKey or the current mode if modeKey is undefined */\nModeButton.prototype.getMode = function getMode(modeKey) {\n    if (!modeKey) {\n        return this.currentMode();\n    }\n    return this.options.modes[this._getModeIndex(modeKey)];\n};\n/** T/F if the button has the given mode */\nModeButton.prototype.hasMode = function hasMode(modeKey) {\n    try {\n        return !!this.getMode(modeKey);\n    } catch (err) {}\n    return false;\n};\n/** set the current mode to the mode with the given name */\nModeButton.prototype.setMode = function setMode(modeKey) {\n    return this._setModeByIndex(this._getModeIndex(modeKey));\n};\n/** reset to the initial mode */\nModeButton.prototype.reset = function reset() {\n    this.currModeIndex = 0;\n    if (this.options.initialMode) {\n        this.currModeIndex = this._getModeIndex(this.options.initialMode);\n    }\n    return this._setModeByIndex(this.currModeIndex);\n};\n/** manually call the click handler of the given mode */\nModeButton.prototype.callModeFn = function callModeFn(modeKey) {\n    var modeFn = this.getMode(modeKey).onclick;\n    if (modeFn && $.type(modeFn === \"function\")) {\n        // call with the element as context (std jquery pattern)\n        return modeFn.call(this.$element.get(0));\n    }\n    return undefined;\n};\n\n// as jq plugin\n$.fn.modeButton = function $modeButton(options) {\n    if (!this.length) {\n        return this;\n    }\n\n    //TODO: does map still work with jq multi selection (i.e. $( '.class-for-many-btns' ).modeButton)?\n    if ($.type(options) === \"object\") {\n        return this.map(function() {\n            var $this = $(this);\n            $this.data(\"mode-button\", new ModeButton($this, options));\n            return this;\n        });\n    }\n\n    var $first = $(this[0]);\n    var button = $first.data(\"mode-button\");\n\n    if (!button) {\n        throw new Error(\"modeButton needs an options object or string name of a function\");\n    }\n\n    if (button && $.type(options) === \"string\") {\n        var fnName = options;\n        if (button && $.type(button[fnName]) === \"function\") {\n            return button[fnName].apply(button, $.makeArray(arguments).slice(1));\n        }\n    }\n    return button;\n};\n"]}