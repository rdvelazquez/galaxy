{"version":3,"sources":["toolshed/groups/group-list-view.js"],"names":["mod_toastr","GroupListView","Backbone","View","extend","el","defaults","initialize","options","_","that","window","globalTS","groups","collection","Groups","fetch","success","model","console","log","render","error","response","responseJSON","err_msg","$","hide","template","templateGroupsList","$el","html","length","models","renderRows","tooltip","css","groups_to_render","i","group","renderOne","rowView","GroupListRowView","find","append","tmpl_array","push","join"],"mappings":"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","file":"../../../scripts/toolshed/groups/group-list-view.js","sourcesContent":["import * as mod_toastr from \"libs/toastr\";\nimport mod_group_model from \"toolshed/groups/group-model\";\nimport mod_group_row from \"toolshed/groups/group-listrow-view\";\nconst GroupListView = Backbone.View.extend({\n    el: \"#groups_element\",\n    defaults: {},\n\n    /**\n     * Initialize and fetch the groups from server.\n     * Async render afterwards.\n     * @param  {object} options an object with options\n     */\n    initialize: function(options) {\n        this.options = _.defaults(this.options || {}, this.defaults, options);\n        const that = this;\n        window.globalTS.groups.collection = new mod_group_model.Groups();\n        window.globalTS.groups.collection.fetch({\n            success: function(model) {\n                console.log(\"received data: \");\n                console.log(model);\n                that.render();\n            },\n            error: function(model, response) {\n                if (typeof response.responseJSON !== \"undefined\") {\n                    mod_toastr.error(response.responseJSON.err_msg);\n                } else {\n                    mod_toastr.error(\"An error occurred.\");\n                }\n            }\n        });\n    },\n\n    fetch: function() {},\n\n    /**\n     * Render the groups table from the object's own collection.\n     */\n    render: function(options) {\n        this.options = _.extend(this.options, options);\n        $(\".tooltip\").hide();\n        const template = this.templateGroupsList();\n        this.$el.html(template({ length: window.globalTS.groups.collection.models.length }));\n        this.renderRows(window.globalTS.groups.collection.models);\n        $(\"#center [data-toggle]\").tooltip();\n        $(\"#center\").css(\"overflow\", \"auto\");\n    },\n\n    /**\n     * Render all given models as rows in the groups list\n     * @param  {array} groups_to_render array of group models to render\n     */\n    renderRows: function(groups_to_render) {\n        for (let i = 0; i < groups_to_render.length; i++) {\n            const group = groups_to_render[i];\n            this.renderOne({ group: group });\n        }\n    },\n\n    /**\n     * Create a view for the given model and add it to the groups view.\n     * @param {Group} model of the view that will be rendered\n     */\n    renderOne: function(options) {\n        const rowView = new mod_group_row.GroupListRowView(options);\n        this.$el.find(\"#group_list_body\").append(rowView.el);\n    },\n\n    /**\n     * Table heading was clicked, update sorting preferences and re-render.\n     * @return {[type]} [description]\n     */\n    // sort_clicked : function(){\n    //     if (Galaxy.libraries.preferences.get('sort_order') === 'asc'){\n    //         Galaxy.libraries.preferences.set({'sort_order': 'desc'});\n    //     } else {\n    //         Galaxy.libraries.preferences.set({'sort_order': 'asc'});\n    //     }\n    //     this.render();\n    // },\n\n    /**\n     * Sort the underlying collection according to the parameters received.\n     * Currently supports only sorting by name.\n     */\n    // sortLibraries: function(){\n    //     if (Galaxy.libraries.preferences.get('sort_by') === 'name'){\n    //         if (Galaxy.libraries.preferences.get('sort_order') === 'asc'){\n    //             this.collection.sortByNameAsc();\n    //         } else if (Galaxy.libraries.preferences.get('sort_order') === 'desc'){\n    //             this.collection.sortByNameDesc();\n    //         }\n    //     }\n    // },\n\n    // MMMMMMMMMMMMMMMMMM\n    // === TEMPLATES ====\n    // MMMMMMMMMMMMMMMMMM\n\n    templateGroupsList: function() {\n        const tmpl_array = [];\n\n        tmpl_array.push('<div id=\"groups\">');\n        tmpl_array.push(\"</div>\");\n        tmpl_array.push('<div class=\"groups_container table-responsive\">');\n        tmpl_array.push(\"<% if(length === 0) { %>\");\n        tmpl_array.push(\"<div>There are no groups yet.</div>\");\n        tmpl_array.push(\"<% } else{ %>\");\n        tmpl_array.push('<table class=\"grid table table-condensed\">');\n        tmpl_array.push(\"   <thead>\");\n        tmpl_array.push(\"     <th>Name</th>\");\n        // tmpl_array.push('     <th style=\"width:22%;\">description</th>');\n        tmpl_array.push(\"     <th>Members</th> \");\n        tmpl_array.push(\"     <th>Repositories</th>\");\n        tmpl_array.push(\"   </thead>\");\n        tmpl_array.push('   <tbody id=\"group_list_body\">');\n        // group item views will attach here\n        tmpl_array.push(\"   </tbody>\");\n        tmpl_array.push(\"</table>\");\n        tmpl_array.push(\"<% }%>\");\n        tmpl_array.push(\"</div>\");\n\n        return _.template(tmpl_array.join(\"\"));\n    }\n});\n\nexport default {\n    GroupListView: GroupListView\n};\n"]}