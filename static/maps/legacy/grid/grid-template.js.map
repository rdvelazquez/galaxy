{"version":3,"sources":["legacy/grid/grid-template.js"],"names":["grid","options","tmpl","embedded","grid_header","grid_table","info_text","title","global_actions","show_popup","length","action","target","url_args","label","insert","grid_filters","header","show_item_checkboxes","items","columns","column","visible","key","href","extra","body","items_length","item","current_item_id","id","encode_id","nowrap","column_settings","column_config","link","value","jQuery","type","replace","cls","attach_popup","operations","label_id_prefix","footer","use_paging","num_pages","num_page_links","cur_page_num","page_link_range","min_page","min_offset","max_range","max_page","max_offset","page_index","operation","allow_multiple","found_global","global_operation","legend","message","status","indexOf","_","escape","default_filter_dict","filters","advanced_search_display","advanced_search","show_advanced_search_link","filterable","column_key","f_key","d_key","standard_search_display","grid_column_filter","column_label","toLowerCase","is_text","url","filter_value","JSON","stringify","column_filter","filter_element","i","params","slice","size","seperator","cf_label","categorical_filters","cf","cf_key","cf_arg","filter","filter_key","sanitize"],"mappings":"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","file":"../../../scripts/legacy/grid/grid-template.js","sourcesContent":["// dependencies\nimport Utils from \"utils/utils\";\n// grid view templates\nexport default {\n    // template\n    grid: function(options) {\n        var tmpl = \"\";\n        if (options.embedded) {\n            tmpl = this.grid_header(options) + this.grid_table(options);\n        } else {\n            tmpl = `<div class=\"loading-elt-overlay\"></div><table><tr><td width=\"75%\">${this.grid_header(\n                options\n            )}</td><td></td><td></td></tr><tr><td width=\"100%\" id=\"grid-message\" valign=\"top\"></td><td></td><td></td></tr></table>${this.grid_table(\n                options\n            )}`;\n        }\n\n        // add info text\n        if (options.info_text) {\n            tmpl += `<br><div class=\"toolParamHelp\" style=\"clear: both;\">${options.info_text}</div>`;\n        }\n\n        // return\n        return tmpl;\n    },\n\n    // template\n    grid_table: function() {\n        return `\n            <form method=\"post\" onsubmit=\"return false;\">\n                <table id=\"grid-table\" class=\"grid\">\n                    <thead id=\"grid-table-header\"></thead>\n                    <tbody id=\"grid-table-body\"></tbody>\n                    <tfoot id=\"grid-table-footer\"></tfoot>\n                </table>\n            </form>`;\n    },\n\n    // template\n    grid_header: function(options) {\n        var tmpl = '<div class=\"grid-header\">';\n        if (!options.embedded) {\n            tmpl += `<h2>${options.title}</h2>`;\n        }\n        if (options.global_actions) {\n            tmpl += '<ul class=\"manage-table-actions\">';\n            var show_popup = options.global_actions.length >= 3;\n            if (show_popup) {\n                tmpl +=\n                    '<li><a class=\"action-button\" id=\"popup-global-actions\" class=\"menubutton\">Actions</a></li>' +\n                    '<div popupmenu=\"popup-global-actions\">';\n            }\n            for (let action of options.global_actions) {\n                tmpl += `<li><a class=\"action-button use-target\" target=\"${action.target}\" href=\"${\n                    action.url_args\n                }\" onclick=\"return false;\" >${action.label}</a></li>`;\n            }\n            if (show_popup) {\n                tmpl += \"</div>\";\n            }\n            tmpl += \"</ul>\";\n        }\n        if (options.insert) {\n            tmpl += options.insert;\n        }\n\n        // add grid filters\n        tmpl += this.grid_filters(options);\n        tmpl += \"</div>\";\n\n        // return template\n        return tmpl;\n    },\n\n    // template\n    header: function(options) {\n        // start\n        var tmpl = \"<tr>\";\n\n        // add checkbox\n        if (options.show_item_checkboxes) {\n            tmpl += \"<th>\";\n            if (options.items.length > 0) {\n                tmpl +=\n                    '<input type=\"checkbox\" id=\"check_all\" name=select_all_checkbox value=\"true\">' +\n                    '<input type=\"hidden\" name=select_all_checkbox value=\"true\">';\n            }\n            tmpl += \"</th>\";\n        }\n\n        // create header elements\n        for (let column of options.columns) {\n            if (column.visible) {\n                tmpl += `<th id=\"${column.key}-header\">`;\n                if (column.href) {\n                    tmpl += `<a href=\"${column.href}\" class=\"sort-link\" sort_key=\"${column.key}\">${column.label}</a>`;\n                } else {\n                    tmpl += column.label;\n                }\n                tmpl += `<span class=\"sort-arrow\">${column.extra}</span></th>`;\n            }\n        }\n\n        // finalize\n        tmpl += \"</tr>\";\n\n        // return template\n        return tmpl;\n    },\n\n    // template\n    body: function(options) {\n        // initialize\n        var tmpl = \"\";\n        var items_length = options.items.length;\n\n        // empty grid?\n        if (items_length === 0) {\n            // No results.\n            tmpl += '<tr><td colspan=\"100\"><em>No Items</em></td></tr>';\n        }\n\n        // create rows\n        for (let item of options.items) {\n            // Tag current\n            tmpl += \"<tr \";\n            if (options.current_item_id == item.id) {\n                tmpl += 'class=\"current\"';\n            }\n            tmpl += \">\";\n\n            // Item selection column\n            if (options.show_item_checkboxes) {\n                tmpl += `<td style=\"width: 1.5em;\"><input type=\"checkbox\" name=\"id\" value=\"${item.encode_id}\" id=\"${\n                    item.encode_id\n                }\" class=\"grid-row-select-checkbox\" /></td>`;\n            }\n\n            // Data columns\n            for (let column of options.columns) {\n                if (column.visible) {\n                    // Nowrap\n                    var nowrap = \"\";\n                    if (column.nowrap) {\n                        nowrap = 'style=\"white-space:nowrap;\"';\n                    }\n\n                    // get column settings\n                    var column_settings = item.column_config[column.label];\n\n                    // load attributes\n                    var link = column_settings.link;\n                    var value = column_settings.value;\n                    var target = column_settings.target;\n\n                    // unescape value\n                    if (jQuery.type(value) === \"string\") {\n                        value = value.replace(/\\/\\//g, \"/\");\n                    }\n\n                    // Attach popup menu?\n                    var id = \"\";\n                    var cls = \"\";\n                    if (column.attach_popup) {\n                        id = `grid-${item.encode_id}-popup`;\n                        cls = \"menubutton\";\n                        if (link !== \"\") {\n                            cls += \" split\";\n                        }\n                        cls += \" popup\";\n                    }\n\n                    // Check for row wrapping\n                    tmpl += `<td ${nowrap}>`;\n\n                    // Link\n                    if (link) {\n                        if (options.operations.length !== 0) {\n                            tmpl += `<div id=\"${id}\" class=\"${cls}\" style=\"float: left;\">`;\n                        }\n                        tmpl += `<a class=\"menubutton-label use-target\" target=\"${target}\" href=\"${link}\" onclick=\"return false;\">${value}</a>`;\n                        if (options.operations.length !== 0) {\n                            tmpl += \"</div>\";\n                        }\n                    } else {\n                        tmpl += `<div id=\"${id}\" class=\"${cls}\"><label id=\"${column.label_id_prefix}${\n                            item.encode_id\n                        }\" for=\"${item.encode_id}\">${value || \"\"}</label></div>`;\n                    }\n                    tmpl += \"</td>\";\n                }\n            }\n            tmpl += \"</tr>\";\n        }\n        return tmpl;\n    },\n\n    // template\n    footer: function(options) {\n        // create template string\n        var tmpl = \"\";\n\n        // paging\n        if (options.use_paging && options.num_pages > 1) {\n            // get configuration\n            var num_page_links = options.num_page_links;\n            var cur_page_num = options.cur_page_num;\n            var num_pages = options.num_pages;\n\n            // First pass on min page.\n            var page_link_range = num_page_links / 2;\n            var min_page = cur_page_num - page_link_range;\n            var min_offset = 0;\n            if (min_page <= 0) {\n                // Min page is too low.\n                min_page = 1;\n                min_offset = page_link_range - (cur_page_num - min_page);\n            }\n\n            // Set max page.\n            var max_range = page_link_range + min_offset;\n            var max_page = cur_page_num + max_range;\n            var max_offset;\n            if (max_page <= num_pages) {\n                // Max page is fine.\n                max_offset = 0;\n            } else {\n                // Max page is too high.\n                max_page = num_pages;\n                // +1 to account for the +1 in the loop below.\n                max_offset = max_range - (max_page + 1 - cur_page_num);\n            }\n\n            // Second and final pass on min page to add any unused\n            // offset from max to min.\n            if (max_offset !== 0) {\n                min_page -= max_offset;\n                if (min_page < 1) {\n                    min_page = 1;\n                }\n            }\n\n            // template header\n            tmpl += '<tr id=\"page-links-row\">';\n            if (options.show_item_checkboxes) {\n                tmpl += \"<td></td>\";\n            }\n            tmpl += '<td colspan=\"100\">' + '<span id=\"page-link-container\">' + \"Page:\";\n\n            if (min_page > 1) {\n                tmpl +=\n                    '<span class=\"page-link\" id=\"page-link-1\"><a href=\"javascript:void(0);\" page_num=\"1\" onclick=\"return false;\">1</a></span> ...';\n            }\n\n            // create page urls\n            for (var page_index = min_page; page_index < max_page + 1; page_index++) {\n                if (page_index == options.cur_page_num) {\n                    tmpl += `<span class=\"page-link inactive-link\" id=\"page-link-${page_index}\">${page_index}</span>`;\n                } else {\n                    tmpl += `<span class=\"page-link\" id=\"page-link-${page_index}\"><a href=\"javascript:void(0);\" onclick=\"return false;\" page_num=\"${page_index}\">${page_index}</a></span>`;\n                }\n            }\n\n            // show last page\n            if (max_page < num_pages) {\n                tmpl += `...<span class=\"page-link\" id=\"page-link-${num_pages}\"><a href=\"javascript:void(0);\" onclick=\"return false;\" page_num=\"${num_pages}\">${num_pages}</a></span>`;\n            }\n            tmpl += \"</span>\";\n\n            // Show all link\n            tmpl += `\n                    <span class=\"page-link\" id=\"show-all-link-span\"> | <a href=\"javascript:void(0);\" onclick=\"return false;\" page_num=\"all\">Show All</a></span>\n                    </td>\n                </tr>`;\n        }\n\n        // Grid operations for multiple items.\n        if (options.show_item_checkboxes) {\n            // start template\n            tmpl += `\n                <tr>\n                    <input type=\"hidden\" id=\"operation\" name=\"operation\" value=\"\">\n                    <td></td>\n                    <td colspan=\"100\">\n                        For <span class=\"grid-selected-count\"></span> selected items: \n            `;\n\n            // configure buttons for operations\n            for (let operation of options.operations) {\n                if (operation.allow_multiple) {\n                    tmpl += `<input type=\"button\" value=\"${\n                        operation.label\n                    }\" class=\"operation-button action-button\">&nbsp;`;\n                }\n            }\n\n            // finalize template\n            tmpl += \"</td>\" + \"</tr>\";\n        }\n\n        // count global operations\n        var found_global = false;\n        for (let operation of options.operations) {\n            if (operation.global_operation) {\n                found_global = true;\n                break;\n            }\n        }\n\n        // add global operations\n        if (found_global) {\n            tmpl += \"<tr>\" + '<td colspan=\"100\">';\n            for (let operation of options.operations) {\n                if (operation.global_operation) {\n                    tmpl += `<a class=\"action-button\" href=\"${operation.global_operation}\">${operation.label}</a>`;\n                }\n            }\n            tmpl += \"</td>\" + \"</tr>\";\n        }\n\n        // add legend\n        if (options.legend) {\n            tmpl += `<tr><td colspan=\"100\">${options.legend}</td></tr>`;\n        }\n\n        // return\n        return tmpl;\n    },\n\n    // template\n    message: function(options) {\n        var status = options.status;\n        if ([\"success\", \"ok\"].indexOf(status) != -1) {\n            status = \"done\";\n        }\n        return `<p><div class=\"${status}message transient-message\">${_.escape(\n            options.message\n        )}</div><div style=\"clear: both\"></div></p>`;\n    },\n\n    // template\n    grid_filters: function(options) {\n        // get filters\n        var default_filter_dict = options.default_filter_dict;\n        var filters = options.filters;\n\n        // show advanced search if flag set or if there are filters for advanced search fields\n        var advanced_search_display = \"none\";\n        if (options.advanced_search) {\n            advanced_search_display = \"block\";\n        }\n\n        // identify columns with advanced filtering\n        var show_advanced_search_link = false;\n        for (let column of options.columns) {\n            if (column.filterable == \"advanced\") {\n                var column_key = column.key;\n                var f_key = filters[column_key];\n                var d_key = default_filter_dict[column_key];\n                if (f_key && d_key && f_key != d_key) {\n                    advanced_search_display = \"block\";\n                }\n                show_advanced_search_link = true;\n            }\n        }\n\n        // hide standard search if advanced is shown\n        var standard_search_display = \"block\";\n        if (advanced_search_display == \"block\") {\n            standard_search_display = \"none\";\n        }\n\n        //\n        // standard search\n        //\n        var tmpl = `<div id=\"standard-search\" style=\"display: ${standard_search_display};\"><table><tr><td style=\"padding: 0;\"><table>`;\n\n        // add standard filters\n        for (let column of options.columns) {\n            if (column.filterable == \"standard\") {\n                tmpl += this.grid_column_filter(options, column);\n            }\n        }\n\n        // finalize standard search\n        tmpl += \"</table>\" + \"</td>\" + \"</tr>\" + \"<tr>\" + \"<td>\";\n\n        // show advanced search link in standard display\n        if (show_advanced_search_link) {\n            tmpl += '<a href=\"\" class=\"advanced-search-toggle\">Advanced Search</a>';\n        }\n\n        // finalize standard search display\n        tmpl += \"</td>\" + \"</tr>\" + \"</table>\" + \"</div>\";\n\n        //\n        // advanced search\n        //\n        tmpl += `<div id=\"advanced-search\" style=\"display: ${advanced_search_display}; margin-top: 5px; border: 1px solid #ccc;\"><table><tr><td style=\"text-align: left\" colspan=\"100\"><a href=\"\" class=\"advanced-search-toggle\">Close Advanced Search</a></td></tr>`;\n\n        // add advanced filters\n        for (let column of options.columns) {\n            if (column.filterable == \"advanced\") {\n                tmpl += this.grid_column_filter(options, column);\n            }\n        }\n\n        // finalize advanced search template\n        tmpl += \"</table>\" + \"</div>\";\n\n        // return template\n        return tmpl;\n    },\n\n    // template\n    grid_column_filter: function(options, column) {\n        // collect parameters\n        var filters = options.filters;\n        var column_label = column.label;\n        var column_key = column.key;\n        if (column.filterable == \"advanced\") {\n            column_label = column_label.toLowerCase();\n        }\n\n        // start\n        var tmpl = \"<tr>\";\n\n        if (column.filterable == \"advanced\") {\n            tmpl += `<td align=\"left\" style=\"padding-left: 10px\">${column_label}:</td>`;\n        }\n        tmpl += '<td style=\"padding-bottom: 1px;\">';\n        if (column.is_text) {\n            tmpl += `<form class=\"text-filter-form\" column_key=\"${column_key}\" action=\"${options.url}\" method=\"get\" >`;\n            // Carry forward filtering criteria with hidden inputs.\n            for (let column of options.columns) {\n                var filter_value = filters[column.key];\n                if (filter_value) {\n                    if (filter_value != \"All\") {\n                        if (column.is_text) {\n                            filter_value = JSON.stringify(filter_value);\n                        }\n                        tmpl += `<input type=\"hidden\" id=\"${column.key}\" name=\"f-${\n                            column.key\n                        }\" value=\"${filter_value}\"/>`;\n                    }\n                }\n            }\n            // Print current filtering criteria and links to delete.\n            tmpl += `<span id=\"${column_key}-filtering-criteria\">`;\n\n            // add filters\n            var column_filter = filters[column_key];\n            if (column_filter) {\n                // identify type\n                var type = jQuery.type(column_filter);\n\n                // single filter value\n                if (type == \"string\") {\n                    if (column_filter != \"All\") {\n                        // append template\n                        tmpl += this.filter_element(column_key, column_filter);\n                    }\n                }\n\n                // multiple filter values\n                if (type == \"array\") {\n                    for (let i in column_filter) {\n                        // copy filters and remove entry\n                        var params = column_filter;\n                        params = params.slice(i);\n\n                        // append template\n                        tmpl += this.filter_element(column_key, column_filter[i]);\n                    }\n                }\n            }\n\n            // close span\n            tmpl += \"</span>\";\n\n            // Set value, size of search input field. Minimum size is 20 characters.\n            var value = \"\";\n            var size = 20;\n            if (column.filterable == \"standard\") {\n                value = column.label.toLowerCase();\n                if (value.length < 20) {\n                    size = value.length;\n                }\n                // +4 to account for space after placeholder\n                size = size + 4;\n            }\n\n            // print input field for column\n            tmpl += `\n                <span class=\"search-box\">\n                    <input class=\"search-box-input\" id=\"input-${column_key}-filter\" name=\"f-${column_key}\" type=\"text\" placeholder=\"${value}\" size=\"${size}\"/>\n                    <button type=\"submit\" style=\"background: transparent; border: none; padding: 4px; margin: 0px;\">\n                        <i class=\"fa fa-search\"></i>\n                    </button>\n                </span>\n            </form>`;\n        } else {\n            // filter criteria\n            tmpl += `<span id=\"${column_key}-filtering-criteria\">`;\n\n            // add category filters\n            var seperator = false;\n            for (var cf_label in options.categorical_filters[column_key]) {\n                // get category filter\n                var cf = options.categorical_filters[column_key][cf_label];\n\n                // each filter will have only a single argument, so get that single argument\n                var cf_key = \"\";\n                var cf_arg = \"\";\n                for (var key in cf) {\n                    cf_key = key;\n                    cf_arg = cf[key];\n                }\n\n                // add seperator\n                if (seperator) {\n                    tmpl += \" | \";\n                }\n                seperator = true;\n\n                // add category\n                var filter = filters[column_key];\n                if (filter && cf[column_key] && filter == cf_arg) {\n                    tmpl += `<span class=\"categorical-filter ${column_key}-filter current-filter\">${cf_label}</span>`;\n                } else {\n                    tmpl += `<span class=\"categorical-filter ${column_key}-filter\"><a href=\"javascript:void(0);\" filter_key=\"${cf_key}\" filter_val=\"${cf_arg}\">${cf_label}</a></span>`;\n                }\n            }\n            tmpl += \"</span>\";\n        }\n        tmpl += \"</td>\" + \"</tr>\";\n\n        // return template\n        return tmpl;\n    },\n\n    // template for filter items\n    filter_element: function(filter_key, filter_value) {\n        filter_value = Utils.sanitize(filter_value);\n        return `<span class=\"text-filter-val\">${filter_value}<a href=\"javascript:void(0);\" filter_key=\"${filter_key}\" filter_val=\"${filter_value}\"><i class=\"fa fa-times\" style=\"padding-left: 5px; padding-bottom: 6px;\"/></a></span>`;\n    }\n};\n"]}