{"version":3,"sources":["galaxy.js"],"names":["_","Backbone","GalaxyApp","options","bootstrapped","self","_init","DEBUGGING_KEY","NAMESPACE_KEY","FLATTEN_LOG_MESSAGES_KEY","localDebugging","localStorage","getItem","storageErr","console","log","prototype","__init","extend","Events","logger","debug","_processOptions","root","params","session_csrf_token","_initConfig","config","_patchGalaxy","window","Galaxy","_initLogger","loggerOptions","_initLocale","localize","_initUser","user","_setUpListeners","trigger","defaultOptions","patchExisting","defaults","k","hasOwnProperty","patchWith","consoleLogger","consoleLevel","MetricsLogger","ALL","consoleNamespaceWhitelist","split","consoleFlattenMessages","emit","map","i","data","arguments","Array","slice","call","LoggableMixin","_l","userJSON","User","lastAjax","$","document","bind","ev","xhr","JSON","parse","err","url","location","href","debugging","_debugging","setting","undefined","setItem","removeItem","debuggingNamespaces","_debuggingNamespaces","namespaces","csv","newSettings","toString","userEmail","get"],"mappings":"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","file":"../scripts/galaxy.js","sourcesContent":["import * as _ from \"libs/underscore\";\nimport * as Backbone from \"libs/backbone\";\nimport BASE_MVC from \"mvc/base-mvc\";\nimport userModel from \"mvc/user/user-model\";\nimport metricsLogger from \"utils/metrics-logger\";\nimport addLogging from \"utils/add-logging\";\nimport localize from \"utils/localization\";\n// TODO: move into a singleton pattern and have dependents import Galaxy\n// ============================================================================\n/** Base galaxy client-side application.\n *      Iniitializes:\n *          logger      : the logger/metrics-logger\n *          localize    : the string localizer\n *          config      : the current configuration (any k/v in\n *              galaxy.ini available from the configuration API)\n *          user        : the current user (as a mvc/user/user-model)\n */\nfunction GalaxyApp(options, bootstrapped) {\n    var self = this;\n    return self._init(options || {}, bootstrapped || {});\n}\n\n// add logging shortcuts for this object\naddLogging(GalaxyApp, \"GalaxyApp\");\n\n// a debug flag can be set via local storage and made available during script/page loading\nvar DEBUGGING_KEY = \"galaxy:debug\";\n\nvar NAMESPACE_KEY = `${DEBUGGING_KEY}:namespaces`;\nvar FLATTEN_LOG_MESSAGES_KEY = `${DEBUGGING_KEY}:flatten`;\n\nvar localDebugging = false;\ntry {\n    localDebugging = localStorage.getItem(DEBUGGING_KEY) == \"true\";\n} catch (storageErr) {\n    console.log(localize(\"localStorage not available for debug flag retrieval\"));\n}\n\n/** initalize options and sub-components */\nGalaxyApp.prototype._init = function __init(options, bootstrapped) {\n    var self = this;\n    _.extend(self, Backbone.Events);\n    if (localDebugging) {\n        self.logger = console;\n        console.debug(\"debugging galaxy:\", \"options:\", options, \"bootstrapped:\", bootstrapped);\n    }\n\n    self._processOptions(options);\n\n    // add root and url parameters\n    self.root = options.root || \"/\";\n    self.params = options.params || {};\n    self.session_csrf_token = options.session_csrf_token || null;\n\n    self._initConfig(options.config || {});\n    self._patchGalaxy(window.Galaxy);\n\n    self._initLogger(self.options.loggerOptions || {});\n    // at this point, either logging or not and namespaces are enabled - chat it up\n    self.debug(\"GalaxyApp.options: \", self.options);\n    self.debug(\"GalaxyApp.config: \", self.config);\n    self.debug(\"GalaxyApp.logger: \", self.logger);\n\n    self._initLocale();\n    self.debug(\"GalaxyApp.localize: \", self.localize);\n\n    self.config = options.config || {};\n    self.debug(\"GalaxyApp.config: \", self.config);\n\n    self._initUser(options.user || {});\n    self.debug(\"GalaxyApp.user: \", self.user);\n\n    self._setUpListeners();\n    self.trigger(\"ready\", self);\n\n    return self;\n};\n\n/** default options */\nGalaxyApp.prototype.defaultOptions = {\n    /** monkey patch attributes from existing window.Galaxy object? */\n    patchExisting: true,\n    /** root url of this app */\n    root: \"/\",\n    session_csrf_token: null\n};\n\n/** filter to options present in defaultOptions (and default to them) */\nGalaxyApp.prototype._processOptions = function _processOptions(options) {\n    var self = this;\n    var defaults = self.defaultOptions;\n\n    self.options = {};\n    for (var k in defaults) {\n        if (defaults.hasOwnProperty(k)) {\n            self.options[k] = options.hasOwnProperty(k) ? options[k] : defaults[k];\n        }\n    }\n    return self;\n};\n\n/** parse the config and any extra info derived from it */\nGalaxyApp.prototype._initConfig = function _initConfig(config) {\n    var self = this;\n    self.config = config;\n\n    // give precendence to localdebugging for this setting\n    self.config.debug = localDebugging || self.config.debug;\n\n    return self;\n};\n\n/** add an option from options if the key matches an option in defaultOptions */\nGalaxyApp.prototype._patchGalaxy = function _patchGalaxy(patchWith) {\n    var self = this;\n    // in case req or plain script tag order has created a prev. version of the Galaxy obj...\n    if (self.options.patchExisting && patchWith) {\n        // self.debug( 'found existing Galaxy object:', patchWith );\n        // ...(for now) monkey patch any added attributes that the previous Galaxy may have had\n        //TODO: move those attributes to more formal assignment in GalaxyApp\n        for (var k in patchWith) {\n            if (patchWith.hasOwnProperty(k)) {\n                // self.debug( '\\t patching in ' + k + ' to Galaxy:', self[ k ] );\n                self[k] = patchWith[k];\n            }\n        }\n    }\n};\n\n/** set up the metrics logger (utils/metrics-logger) and pass loggerOptions */\nGalaxyApp.prototype._initLogger = function _initLogger(loggerOptions) {\n    var self = this;\n\n    // default to console logging at the debug level if the debug flag is set\n    if (self.config.debug) {\n        loggerOptions.consoleLogger = loggerOptions.consoleLogger || console;\n        loggerOptions.consoleLevel = loggerOptions.consoleLevel || metricsLogger.MetricsLogger.ALL;\n        // load any logging namespaces from localStorage if we can\n        try {\n            loggerOptions.consoleNamespaceWhitelist = localStorage.getItem(NAMESPACE_KEY).split(\",\");\n        } catch (storageErr) {}\n        try {\n            loggerOptions.consoleFlattenMessages = localStorage.getItem(FLATTEN_LOG_MESSAGES_KEY) == \"true\";\n        } catch (storageErr) {}\n        console.log(loggerOptions.consoleFlattenMessages);\n    }\n\n    self.logger = new metricsLogger.MetricsLogger(loggerOptions);\n    self.emit = {};\n    [\"log\", \"debug\", \"info\", \"warn\", \"error\", \"metric\"].map(i => {\n        self.emit[i] = function(data) {\n            self.logger.emit(i, arguments[0], Array.prototype.slice.call(arguments, 1));\n        };\n    });\n\n    if (self.config.debug) {\n        // add this logger to mvc's loggable mixin so that all models can use the logger\n        BASE_MVC.LoggableMixin.logger = self.logger;\n    }\n    return self;\n};\n\n/** add the localize fn to this object and the window namespace (as '_l') */\nGalaxyApp.prototype._initLocale = function _initLocale(options) {\n    var self = this;\n    self.debug(\"_initLocale:\", options);\n    self.localize = localize;\n    // add to window as global shortened alias\n    // TODO: temporary - remove when can require for plugins\n    window._l = self.localize;\n    return self;\n};\n\n/** set up the current user as a Backbone model (mvc/user/user-model) */\nGalaxyApp.prototype._initUser = function _initUser(userJSON) {\n    var self = this;\n    self.debug(\"_initUser:\", userJSON);\n    self.user = new userModel.User(userJSON);\n    self.user.logger = self.logger;\n    return self;\n};\n\n/** Set up DOM/jQuery/Backbone event listeners enabled for all pages */\nGalaxyApp.prototype._setUpListeners = function _setUpListeners() {\n    var self = this;\n\n    // hook to jq beforeSend to record the most recent ajax call and cache some data about it\n    /** cached info about the last ajax call made through jQuery */\n    self.lastAjax = {};\n    $(document).bind(\"ajaxSend\", (ev, xhr, options) => {\n        var data = options.data;\n        try {\n            data = JSON.parse(data);\n        } catch (err) {}\n\n        self.lastAjax = {\n            url: location.href.slice(0, -1) + options.url,\n            data: data\n        };\n        //TODO:?? we might somehow manage to *retry* ajax using either this hook or Backbone.sync\n    });\n    return self;\n};\n\n/** Turn debugging/console-output on/off by passing boolean. Pass nothing to get current setting. */\nGalaxyApp.prototype.debugging = function _debugging(setting) {\n    var self = this;\n    try {\n        if (setting === undefined) {\n            return localStorage.getItem(DEBUGGING_KEY) === \"true\";\n        }\n        if (setting) {\n            localStorage.setItem(DEBUGGING_KEY, true);\n            return true;\n        }\n\n        localStorage.removeItem(DEBUGGING_KEY);\n        // also remove all namespaces\n        self.debuggingNamespaces(null);\n    } catch (storageErr) {\n        console.log(localize(\"localStorage not available for debug flag retrieval\"));\n    }\n    return false;\n};\n\n/** Add, remove, or clear namespaces from the debugging filters\n *  Pass no arguments to retrieve the existing namespaces as an array.\n *  Pass in null to clear all namespaces (all logging messages will show now).\n *  Pass in an array of strings or single string of the namespaces to filter to.\n *  Returns the new/current namespaces as an array;\n */\nGalaxyApp.prototype.debuggingNamespaces = function _debuggingNamespaces(namespaces) {\n    var self = this;\n    try {\n        if (namespaces === undefined) {\n            var csv = localStorage.getItem(NAMESPACE_KEY);\n            return typeof csv === \"string\" ? csv.split(\",\") : [];\n        } else if (namespaces === null) {\n            localStorage.removeItem(NAMESPACE_KEY);\n        } else {\n            localStorage.setItem(NAMESPACE_KEY, namespaces);\n        }\n        var newSettings = self.debuggingNamespaces();\n        if (self.logger) {\n            self.logger.options.consoleNamespaceWhitelist = newSettings;\n        }\n        return newSettings;\n    } catch (storageErr) {\n        console.log(localize(\"localStorage not available for debug namespace retrieval\"));\n    }\n};\n\n/** string rep */\nGalaxyApp.prototype.toString = function toString() {\n    var userEmail = this.user ? this.user.get(\"email\") || \"(anonymous)\" : \"uninitialized\";\n    return `GalaxyApp(${userEmail})`;\n};\n\n// This is not great.  Rework to be a singleton-style Galaxy app accessible/created by import\nwindow.Galaxy = window.Galaxy || new GalaxyApp();\n\n// ============================================================================\nexport default {\n    GalaxyApp: GalaxyApp\n};\n"]}